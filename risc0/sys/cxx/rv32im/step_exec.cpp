// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/page_fault.cpp":143:20)
  Fp x0(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
  Fp x1(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":134:18)
  Fp x2(63);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":123:68)
  Fp x3(218806);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":109:32)
  Fp x4(218805);
  // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
  Fp x5(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":342:18)
  Fp x6(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
  Fp x7(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
  Fp x8(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x9(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x10(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x11(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x12(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x13(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x14(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x15(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x16(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x18(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x20(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x21(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":54:24)
  Fp x22(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x23(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x24(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":90:25)
  Fp x25(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x26(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x27(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":129:49)
  Fp x28(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":124:21)
  Fp x29(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x30(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x31(131072);
  // loc("cirgen/components/u32.cpp":189:21)
  Fp x32(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x33(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x34(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x35(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x36(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x37(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x38(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x39(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x40(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x41(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x42(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x43(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x44(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x45(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x46(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x47(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x48(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x49(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x50(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x51(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x52(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x53(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x54(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x55(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x56(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x57(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x58(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x59(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x60(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x61(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x62(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x63(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x64(128);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x65(13);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x66(12);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x67(11);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x68(10);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x69(9);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x70(8);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x71(7);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x72(6);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x73(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x74(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":48:18)
  Fp x75(14);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x76(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x77(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x78(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x79(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x80(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x81(56014263);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x82(56014262);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x83(56014261);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x84(56014260);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x85(56014259);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x86(56014258);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x87(56014257);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x88(56014256);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x89(2005401601);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x90(256);
  // loc("cirgen/components/bytes.cpp":89:26)
  Fp x91(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x92(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x93(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x94(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x95(1);
  // loc("Top/Code/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
  Fp x96(args[0][2 * steps + ((cycle - 0) & mask)]);
  assert(x96 != Fp::invalid());
  if (x96 != 0) {
    // loc("Top/Code/OneHot/Reg1"("cirgen/circuit/rv32im/top.cpp":18:69))
    Fp x97(args[0][2 * steps + ((cycle - 1) & mask)]);
    assert(x97 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x98 = x95 - x97;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x99(args[0][8 * steps + ((cycle - 0) & mask)]);
    assert(x99 != Fp::invalid());
    if (x98 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      args[2][10 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":22:3)
      args[2][11 * steps + cycle] = x94;
    }
    // loc("cirgen/components/bytes.cpp":110:17)
    auto x100 = x95 - x98;
    if (x100 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x101(args[2][50 * steps + ((cycle - 1) & mask)]);
      assert(x101 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x102(args[2][51 * steps + ((cycle - 1) & mask)]);
      assert(x102 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x103 = x102 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x104 = (x103 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x105 = x95 - x104;
        if (x105 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][10 * steps + cycle] = x101;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x106 = Fp(x102) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][11 * steps + cycle] = x106;
        }
        if (x104 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x107 = Fp(x101) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][10 * steps + cycle] = x107;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][11 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x108(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x109 = x108 - x101;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x110(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x110 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x111 = x110 - x102;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x112 = x109 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x113 = x109 * x112;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x113 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x114 = Fp(x111) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x115 = x109 * x114;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x115 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x116 = x111 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x117 = x112 * x116;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x117 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x118(args[2][10 * steps + ((cycle - 0) & mask)]);
    assert(x118 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x119(args[2][11 * steps + ((cycle - 0) & mask)]);
    assert(x119 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x120 = x119 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x121 = (x120 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x122 = x95 - x121;
      if (x122 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][12 * steps + cycle] = x118;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x123 = Fp(x119) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][13 * steps + cycle] = x123;
      }
      if (x121 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x124 = Fp(x118) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][12 * steps + cycle] = x124;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][13 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x125(args[2][12 * steps + ((cycle - 0) & mask)]);
    assert(x125 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x126 = x125 - x118;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x127(args[2][13 * steps + ((cycle - 0) & mask)]);
    assert(x127 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x128 = x127 - x119;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x129 = x126 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x130 = x126 * x129;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x130 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x131 = Fp(x128) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x132 = x126 * x131;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x132 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x133 = x128 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x134 = x129 * x133;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x134 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x135 = x127 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x136 = (x135 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x137 = x95 - x136;
      if (x137 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][14 * steps + cycle] = x125;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x138 = Fp(x127) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][15 * steps + cycle] = x138;
      }
      if (x136 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x139 = Fp(x125) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][14 * steps + cycle] = x139;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][15 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x140(args[2][14 * steps + ((cycle - 0) & mask)]);
    assert(x140 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x141 = x140 - x125;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x142(args[2][15 * steps + ((cycle - 0) & mask)]);
    assert(x142 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x143 = x142 - x127;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x144 = x141 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x145 = x141 * x144;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x145 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x146 = Fp(x143) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x147 = x141 * x146;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x147 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x148 = x143 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x149 = x144 * x148;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x149 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x150 = x142 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x151 = (x150 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x152 = x95 - x151;
      if (x152 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][16 * steps + cycle] = x140;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x153 = Fp(x142) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][17 * steps + cycle] = x153;
      }
      if (x151 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x154 = Fp(x140) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][16 * steps + cycle] = x154;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][17 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x155(args[2][16 * steps + ((cycle - 0) & mask)]);
    assert(x155 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x156 = x155 - x140;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x157(args[2][17 * steps + ((cycle - 0) & mask)]);
    assert(x157 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x158 = x157 - x142;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x159 = x156 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x160 = x156 * x159;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x160 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x161 = Fp(x158) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x162 = x156 * x161;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x162 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x163 = x158 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x164 = x159 * x163;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x164 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x165 = x157 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x166 = (x165 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x167 = x95 - x166;
      if (x167 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][18 * steps + cycle] = x155;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x168 = Fp(x157) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][19 * steps + cycle] = x168;
      }
      if (x166 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x169 = Fp(x155) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][18 * steps + cycle] = x169;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][19 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x170(args[2][18 * steps + ((cycle - 0) & mask)]);
    assert(x170 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x171 = x170 - x155;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x172(args[2][19 * steps + ((cycle - 0) & mask)]);
    assert(x172 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x173 = x172 - x157;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x174 = x171 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x175 = x171 * x174;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x175 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x176 = Fp(x173) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x177 = x171 * x176;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x178 = x173 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x179 = x174 * x178;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x179 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x180 = x172 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x181 = (x180 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x182 = x95 - x181;
      if (x182 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][20 * steps + cycle] = x170;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x183 = Fp(x172) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][21 * steps + cycle] = x183;
      }
      if (x181 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x184 = Fp(x170) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][20 * steps + cycle] = x184;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][21 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x185(args[2][20 * steps + ((cycle - 0) & mask)]);
    assert(x185 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x186 = x185 - x170;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x187(args[2][21 * steps + ((cycle - 0) & mask)]);
    assert(x187 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x188 = x187 - x172;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x189 = x186 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x190 = x186 * x189;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x190 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x191 = Fp(x188) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x192 = x186 * x191;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x192 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x193 = x188 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x194 = x189 * x193;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x194 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x195 = x187 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x196 = (x195 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x197 = x95 - x196;
      if (x197 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][22 * steps + cycle] = x185;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x198 = Fp(x187) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][23 * steps + cycle] = x198;
      }
      if (x196 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x199 = Fp(x185) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][22 * steps + cycle] = x199;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][23 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x200(args[2][22 * steps + ((cycle - 0) & mask)]);
    assert(x200 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x201 = x200 - x185;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x202(args[2][23 * steps + ((cycle - 0) & mask)]);
    assert(x202 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x203 = x202 - x187;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x204 = x201 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x205 = x201 * x204;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x205 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x206 = Fp(x203) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x207 = x201 * x206;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x207 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x208 = x203 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x209 = x204 * x208;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x209 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x210 = x202 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x211 = (x210 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x212 = x95 - x211;
      if (x212 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        args[2][24 * steps + cycle] = x200;
        // loc("cirgen/components/bytes.cpp":37:16)
        Fp x213 = Fp(x202) + Fp(x92);
        // loc("cirgen/components/bytes.cpp":37:7)
        args[2][25 * steps + cycle] = x213;
      }
      if (x211 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        Fp x214 = Fp(x200) + Fp(x95);
        // loc("cirgen/components/bytes.cpp":40:7)
        args[2][24 * steps + cycle] = x214;
        // loc("cirgen/components/bytes.cpp":41:7)
        args[2][25 * steps + cycle] = x94;
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x215(args[2][24 * steps + ((cycle - 0) & mask)]);
    assert(x215 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x216 = x215 - x200;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x217(args[2][25 * steps + ((cycle - 0) & mask)]);
    assert(x217 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x218 = x217 - x202;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x219 = x216 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    Fp x220 = x216 * x219;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x220 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    Fp x221 = Fp(x218) + Fp(x93);
    // loc("cirgen/components/bytes.cpp":51:7)
    Fp x222 = x216 * x221;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x222 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x223 = x218 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    Fp x224 = x219 * x223;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x224 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    if (x99 != 0) {
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][26 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][27 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][28 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][29 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][30 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][31 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][32 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][33 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][34 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][35 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][36 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][37 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][38 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][39 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][40 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][41 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][42 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][43 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][44 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][45 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][46 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][47 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][48 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][49 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":119:7)
      args[2][50 * steps + cycle] = x94;
      // loc("cirgen/components/bytes.cpp":120:7)
      args[2][51 * steps + cycle] = x94;
    }
    // loc("cirgen/components/bytes.cpp":123:16)
    auto x225 = x95 - x99;
    if (x225 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x226 = x217 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x227 = (x226 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x228 = x95 - x227;
        if (x228 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][26 * steps + cycle] = x215;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x229 = Fp(x217) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][27 * steps + cycle] = x229;
        }
        if (x227 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x230 = Fp(x215) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][26 * steps + cycle] = x230;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][27 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x231(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x232 = x231 - x215;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x233(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x233 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x234 = x233 - x217;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x235 = x232 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x236 = x232 * x235;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x236 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x237 = Fp(x234) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x238 = x232 * x237;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x238 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x239 = x234 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x240 = x235 * x239;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x240 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x241 = x233 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x242 = (x241 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x243 = x95 - x242;
        if (x243 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][28 * steps + cycle] = x231;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x244 = Fp(x233) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][29 * steps + cycle] = x244;
        }
        if (x242 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x245 = Fp(x231) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][28 * steps + cycle] = x245;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][29 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x246(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x246 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x247 = x246 - x231;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x248(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x248 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x249 = x248 - x233;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x250 = x247 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x251 = x247 * x250;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x251 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x252 = Fp(x249) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x253 = x247 * x252;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x253 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x254 = x249 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x255 = x250 * x254;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x255 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x256 = x248 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x257 = (x256 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x258 = x95 - x257;
        if (x258 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][30 * steps + cycle] = x246;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x259 = Fp(x248) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][31 * steps + cycle] = x259;
        }
        if (x257 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x260 = Fp(x246) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][30 * steps + cycle] = x260;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][31 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x261(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x261 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x262 = x261 - x246;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x263(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x263 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x264 = x263 - x248;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x265 = x262 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x266 = x262 * x265;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x266 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x267 = Fp(x264) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x268 = x262 * x267;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x268 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x269 = x264 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x270 = x265 * x269;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x270 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x271 = x263 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x272 = (x271 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x273 = x95 - x272;
        if (x273 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][32 * steps + cycle] = x261;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x274 = Fp(x263) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][33 * steps + cycle] = x274;
        }
        if (x272 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x275 = Fp(x261) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][32 * steps + cycle] = x275;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][33 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x276(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x276 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x277 = x276 - x261;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x278(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x278 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x279 = x278 - x263;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x280 = x277 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x281 = x277 * x280;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x281 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x282 = Fp(x279) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x283 = x277 * x282;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x283 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x284 = x279 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x285 = x280 * x284;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x285 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x286 = x278 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x287 = (x286 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x288 = x95 - x287;
        if (x288 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][34 * steps + cycle] = x276;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x289 = Fp(x278) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][35 * steps + cycle] = x289;
        }
        if (x287 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x290 = Fp(x276) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][34 * steps + cycle] = x290;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][35 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x291(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x291 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x292 = x291 - x276;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x293(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x293 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x294 = x293 - x278;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x295 = x292 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x296 = x292 * x295;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x296 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x297 = Fp(x294) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x298 = x292 * x297;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x298 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x299 = x294 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x300 = x295 * x299;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x300 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x301 = x293 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x302 = (x301 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x303 = x95 - x302;
        if (x303 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][36 * steps + cycle] = x291;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x304 = Fp(x293) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][37 * steps + cycle] = x304;
        }
        if (x302 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x305 = Fp(x291) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][36 * steps + cycle] = x305;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][37 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x306(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x306 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x307 = x306 - x291;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x308(args[2][37 * steps + ((cycle - 0) & mask)]);
      assert(x308 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x309 = x308 - x293;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x310 = x307 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x311 = x307 * x310;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x311 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x312 = Fp(x309) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x313 = x307 * x312;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x313 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x314 = x309 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x315 = x310 * x314;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x315 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x316 = x308 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x317 = (x316 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x318 = x95 - x317;
        if (x318 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][38 * steps + cycle] = x306;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x319 = Fp(x308) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][39 * steps + cycle] = x319;
        }
        if (x317 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x320 = Fp(x306) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][38 * steps + cycle] = x320;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][39 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x321(args[2][38 * steps + ((cycle - 0) & mask)]);
      assert(x321 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x322 = x321 - x306;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x323(args[2][39 * steps + ((cycle - 0) & mask)]);
      assert(x323 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x324 = x323 - x308;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x325 = x322 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x326 = x322 * x325;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x326 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x327 = Fp(x324) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x328 = x322 * x327;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x328 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x329 = x324 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x330 = x325 * x329;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x330 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x331 = x323 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x332 = (x331 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x333 = x95 - x332;
        if (x333 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][40 * steps + cycle] = x321;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x334 = Fp(x323) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][41 * steps + cycle] = x334;
        }
        if (x332 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x335 = Fp(x321) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][40 * steps + cycle] = x335;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][41 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x336(args[2][40 * steps + ((cycle - 0) & mask)]);
      assert(x336 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x337 = x336 - x321;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x338(args[2][41 * steps + ((cycle - 0) & mask)]);
      assert(x338 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x339 = x338 - x323;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x340 = x337 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x341 = x337 * x340;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x341 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x342 = Fp(x339) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x343 = x337 * x342;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x343 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x344 = x339 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x345 = x340 * x344;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x345 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x346 = x338 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x347 = (x346 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x348 = x95 - x347;
        if (x348 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][42 * steps + cycle] = x336;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x349 = Fp(x338) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][43 * steps + cycle] = x349;
        }
        if (x347 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x350 = Fp(x336) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][42 * steps + cycle] = x350;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][43 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x351(args[2][42 * steps + ((cycle - 0) & mask)]);
      assert(x351 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x352 = x351 - x336;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x353(args[2][43 * steps + ((cycle - 0) & mask)]);
      assert(x353 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x354 = x353 - x338;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x355 = x352 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x356 = x352 * x355;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x356 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x357 = Fp(x354) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x358 = x352 * x357;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x358 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x359 = x354 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x360 = x355 * x359;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x360 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x361 = x353 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x362 = (x361 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x363 = x95 - x362;
        if (x363 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][44 * steps + cycle] = x351;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x364 = Fp(x353) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][45 * steps + cycle] = x364;
        }
        if (x362 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x365 = Fp(x351) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][44 * steps + cycle] = x365;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][45 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x366(args[2][44 * steps + ((cycle - 0) & mask)]);
      assert(x366 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x367 = x366 - x351;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x368(args[2][45 * steps + ((cycle - 0) & mask)]);
      assert(x368 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x369 = x368 - x353;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x370 = x367 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x371 = x367 * x370;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x371 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x372 = Fp(x369) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x373 = x367 * x372;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x373 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x374 = x369 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x375 = x370 * x374;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x375 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x376 = x368 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x377 = (x376 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x378 = x95 - x377;
        if (x378 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][46 * steps + cycle] = x366;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x379 = Fp(x368) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][47 * steps + cycle] = x379;
        }
        if (x377 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x380 = Fp(x366) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][46 * steps + cycle] = x380;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][47 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x381(args[2][46 * steps + ((cycle - 0) & mask)]);
      assert(x381 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x382 = x381 - x366;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x383(args[2][47 * steps + ((cycle - 0) & mask)]);
      assert(x383 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x384 = x383 - x368;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x385 = x382 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x386 = x382 * x385;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x386 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x387 = Fp(x384) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x388 = x382 * x387;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x388 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x389 = x384 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x390 = x385 * x389;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x390 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x391 = x383 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x392 = (x391 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x393 = x95 - x392;
        if (x393 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][48 * steps + cycle] = x381;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x394 = Fp(x383) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][49 * steps + cycle] = x394;
        }
        if (x392 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x395 = Fp(x381) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][48 * steps + cycle] = x395;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][49 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x396(args[2][48 * steps + ((cycle - 0) & mask)]);
      assert(x396 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x397 = x396 - x381;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x398(args[2][49 * steps + ((cycle - 0) & mask)]);
      assert(x398 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x399 = x398 - x383;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x400 = x397 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x401 = x397 * x400;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x401 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x402 = Fp(x399) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x403 = x397 * x402;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x403 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x404 = x399 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x405 = x400 * x404;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x405 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x406 = x398 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x407 = (x406 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x408 = x95 - x407;
        if (x408 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          args[2][50 * steps + cycle] = x396;
          // loc("cirgen/components/bytes.cpp":37:16)
          Fp x409 = Fp(x398) + Fp(x92);
          // loc("cirgen/components/bytes.cpp":37:7)
          args[2][51 * steps + cycle] = x409;
        }
        if (x407 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          Fp x410 = Fp(x396) + Fp(x95);
          // loc("cirgen/components/bytes.cpp":40:7)
          args[2][50 * steps + cycle] = x410;
          // loc("cirgen/components/bytes.cpp":41:7)
          args[2][51 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x411(args[2][50 * steps + ((cycle - 0) & mask)]);
      assert(x411 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x412 = x411 - x396;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x413(args[2][51 * steps + ((cycle - 0) & mask)]);
      assert(x413 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x414 = x413 - x398;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x415 = x412 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      Fp x416 = x412 * x415;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x416 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      Fp x417 = Fp(x414) + Fp(x93);
      // loc("cirgen/components/bytes.cpp":51:7)
      Fp x418 = x412 * x417;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x418 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x419 = x414 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      Fp x420 = x415 * x419;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x420 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
  Fp x421(args[0][3 * steps + ((cycle - 0) & mask)]);
  assert(x421 != Fp::invalid());
  if (x421 != 0) {
    // loc("Top/Code/Mux/2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x422(args[0][9 * steps + ((cycle - 0) & mask)]);
    assert(x422 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x423 = Fp(x422.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][19 * steps + cycle] = x423;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x424(args[2][19 * steps + ((cycle - 0) & mask)]);
    assert(x424 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x425 = x422 - x424;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x426 = x425 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    args[2][20 * steps + cycle] = x426;
    // loc("Top/Code/Mux/2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x427(args[0][10 * steps + ((cycle - 0) & mask)]);
    assert(x427 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x428 = Fp(x427.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][21 * steps + cycle] = x428;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x429(args[2][21 * steps + ((cycle - 0) & mask)]);
    assert(x429 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x430 = x427 - x429;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x431 = x430 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    args[2][22 * steps + cycle] = x431;
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x432(args[2][20 * steps + ((cycle - 0) & mask)]);
    assert(x432 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x433(args[2][22 * steps + ((cycle - 0) & mask)]);
    assert(x433 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x434(args[0][0 * steps + ((cycle - 0) & mask)]);
    assert(x434 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x435(args[0][8 * steps + ((cycle - 0) & mask)]);
    assert(x435 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][58 * steps + cycle] = x424;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][59 * steps + cycle] = x432;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][60 * steps + cycle] = x429;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][61 * steps + cycle] = x433;
    {
      host_args.at(0) = x435;
      host_args.at(1) = x424;
      host_args.at(2) = x432;
      host_args.at(3) = x429;
      host_args.at(4) = x433;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x436(args[2][58 * steps + ((cycle - 0) & mask)]);
    assert(x436 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x437(args[2][59 * steps + ((cycle - 0) & mask)]);
    assert(x437 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x438(args[2][60 * steps + ((cycle - 0) & mask)]);
    assert(x438 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x439(args[2][61 * steps + ((cycle - 0) & mask)]);
    assert(x439 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][55 * steps + cycle] = x435;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][56 * steps + cycle] = x434;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][57 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][58 * steps + cycle] = x436;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][59 * steps + cycle] = x437;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][60 * steps + cycle] = x438;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][61 * steps + cycle] = x439;
    // loc("Top/Code/Mux/2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x440(args[0][11 * steps + ((cycle - 0) & mask)]);
    assert(x440 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x441 = Fp(x440.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][23 * steps + cycle] = x441;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x442(args[2][23 * steps + ((cycle - 0) & mask)]);
    assert(x442 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x443 = x440 - x442;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x444 = x443 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    args[2][24 * steps + cycle] = x444;
    // loc("Top/Code/Mux/2/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x445(args[0][12 * steps + ((cycle - 0) & mask)]);
    assert(x445 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x446 = Fp(x445.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][25 * steps + cycle] = x446;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x447(args[2][25 * steps + ((cycle - 0) & mask)]);
    assert(x447 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x448 = x445 - x447;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x449 = x448 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    args[2][26 * steps + cycle] = x449;
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x450(args[2][24 * steps + ((cycle - 0) & mask)]);
    assert(x450 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x451(args[2][26 * steps + ((cycle - 0) & mask)]);
    assert(x451 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":38:44)
    Fp x452 = Fp(x435) + Fp(x95);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][65 * steps + cycle] = x442;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][66 * steps + cycle] = x450;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][67 * steps + cycle] = x447;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][68 * steps + cycle] = x451;
    {
      host_args.at(0) = x452;
      host_args.at(1) = x442;
      host_args.at(2) = x450;
      host_args.at(3) = x447;
      host_args.at(4) = x451;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x453(args[2][65 * steps + ((cycle - 0) & mask)]);
    assert(x453 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x454(args[2][66 * steps + ((cycle - 0) & mask)]);
    assert(x454 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x455(args[2][67 * steps + ((cycle - 0) & mask)]);
    assert(x455 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x456(args[2][68 * steps + ((cycle - 0) & mask)]);
    assert(x456 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][62 * steps + cycle] = x452;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][63 * steps + cycle] = x434;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][64 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][65 * steps + cycle] = x453;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][66 * steps + cycle] = x454;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][67 * steps + cycle] = x455;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][68 * steps + cycle] = x456;
    // loc("Top/Code/Mux/2/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x457(args[0][13 * steps + ((cycle - 0) & mask)]);
    assert(x457 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x458 = Fp(x457.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][27 * steps + cycle] = x458;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x459(args[2][27 * steps + ((cycle - 0) & mask)]);
    assert(x459 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x460 = x457 - x459;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x461 = x460 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    args[2][28 * steps + cycle] = x461;
    // loc("Top/Code/Mux/2/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x462(args[0][14 * steps + ((cycle - 0) & mask)]);
    assert(x462 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x463 = Fp(x462.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][29 * steps + cycle] = x463;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x464(args[2][29 * steps + ((cycle - 0) & mask)]);
    assert(x464 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x465 = x462 - x464;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x466 = x465 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    args[2][30 * steps + cycle] = x466;
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x467(args[2][28 * steps + ((cycle - 0) & mask)]);
    assert(x467 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x468(args[2][30 * steps + ((cycle - 0) & mask)]);
    assert(x468 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":38:44)
    Fp x469 = Fp(x435) + Fp(x92);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][72 * steps + cycle] = x459;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][73 * steps + cycle] = x467;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][74 * steps + cycle] = x464;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][75 * steps + cycle] = x468;
    {
      host_args.at(0) = x469;
      host_args.at(1) = x459;
      host_args.at(2) = x467;
      host_args.at(3) = x464;
      host_args.at(4) = x468;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x470(args[2][72 * steps + ((cycle - 0) & mask)]);
    assert(x470 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x471(args[2][73 * steps + ((cycle - 0) & mask)]);
    assert(x471 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x472(args[2][74 * steps + ((cycle - 0) & mask)]);
    assert(x472 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x473(args[2][75 * steps + ((cycle - 0) & mask)]);
    assert(x473 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][69 * steps + cycle] = x469;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][70 * steps + cycle] = x434;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][71 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][72 * steps + cycle] = x470;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][73 * steps + cycle] = x471;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][74 * steps + cycle] = x472;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][75 * steps + cycle] = x473;
  }
  // loc("Top/Code/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
  Fp x474(args[0][4 * steps + ((cycle - 0) & mask)]);
  assert(x474 != Fp::invalid());
  if (x474 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x475(args[0][0 * steps + ((cycle - 0) & mask)]);
    assert(x475 != Fp::invalid());
    // loc("Top/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x476(args[1][4]);
    // loc("Top/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x477(args[1][5]);
    // loc("Top/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x478(args[1][6]);
    // loc("Top/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x479(args[1][7]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][97 * steps + cycle] = x476;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][98 * steps + cycle] = x477;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][99 * steps + cycle] = x478;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][100 * steps + cycle] = x479;
    {
      host_args.at(0) = x88;
      host_args.at(1) = x476;
      host_args.at(2) = x477;
      host_args.at(3) = x478;
      host_args.at(4) = x479;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x480(args[2][97 * steps + ((cycle - 0) & mask)]);
    assert(x480 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x481(args[2][98 * steps + ((cycle - 0) & mask)]);
    assert(x481 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x482(args[2][99 * steps + ((cycle - 0) & mask)]);
    assert(x482 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x483(args[2][100 * steps + ((cycle - 0) & mask)]);
    assert(x483 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][94 * steps + cycle] = x88;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][95 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][96 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][97 * steps + cycle] = x480;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][98 * steps + cycle] = x481;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][99 * steps + cycle] = x482;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][100 * steps + cycle] = x483;
    // loc("Top/Mux/3/U32Reg2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x484(args[1][8]);
    // loc("Top/Mux/3/U32Reg2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x485(args[1][9]);
    // loc("Top/Mux/3/U32Reg2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x486(args[1][10]);
    // loc("Top/Mux/3/U32Reg2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x487(args[1][11]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][104 * steps + cycle] = x484;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][105 * steps + cycle] = x485;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][106 * steps + cycle] = x486;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][107 * steps + cycle] = x487;
    {
      host_args.at(0) = x87;
      host_args.at(1) = x484;
      host_args.at(2) = x485;
      host_args.at(3) = x486;
      host_args.at(4) = x487;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x488(args[2][104 * steps + ((cycle - 0) & mask)]);
    assert(x488 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x489(args[2][105 * steps + ((cycle - 0) & mask)]);
    assert(x489 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x490(args[2][106 * steps + ((cycle - 0) & mask)]);
    assert(x490 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x491(args[2][107 * steps + ((cycle - 0) & mask)]);
    assert(x491 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][101 * steps + cycle] = x87;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][102 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][103 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][104 * steps + cycle] = x488;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][105 * steps + cycle] = x489;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][106 * steps + cycle] = x490;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][107 * steps + cycle] = x491;
    // loc("Top/Mux/3/U32Reg3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x492(args[1][12]);
    // loc("Top/Mux/3/U32Reg3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x493(args[1][13]);
    // loc("Top/Mux/3/U32Reg3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x494(args[1][14]);
    // loc("Top/Mux/3/U32Reg3/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x495(args[1][15]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][111 * steps + cycle] = x492;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][112 * steps + cycle] = x493;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][113 * steps + cycle] = x494;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][114 * steps + cycle] = x495;
    {
      host_args.at(0) = x86;
      host_args.at(1) = x492;
      host_args.at(2) = x493;
      host_args.at(3) = x494;
      host_args.at(4) = x495;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x496(args[2][111 * steps + ((cycle - 0) & mask)]);
    assert(x496 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x497(args[2][112 * steps + ((cycle - 0) & mask)]);
    assert(x497 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x498(args[2][113 * steps + ((cycle - 0) & mask)]);
    assert(x498 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x499(args[2][114 * steps + ((cycle - 0) & mask)]);
    assert(x499 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][108 * steps + cycle] = x86;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][109 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][110 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][111 * steps + cycle] = x496;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][112 * steps + cycle] = x497;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][113 * steps + cycle] = x498;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][114 * steps + cycle] = x499;
    // loc("Top/Mux/3/U32Reg4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x500(args[1][16]);
    // loc("Top/Mux/3/U32Reg4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x501(args[1][17]);
    // loc("Top/Mux/3/U32Reg4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x502(args[1][18]);
    // loc("Top/Mux/3/U32Reg4/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x503(args[1][19]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][118 * steps + cycle] = x500;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][119 * steps + cycle] = x501;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][120 * steps + cycle] = x502;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][121 * steps + cycle] = x503;
    {
      host_args.at(0) = x85;
      host_args.at(1) = x500;
      host_args.at(2) = x501;
      host_args.at(3) = x502;
      host_args.at(4) = x503;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x504(args[2][118 * steps + ((cycle - 0) & mask)]);
    assert(x504 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x505(args[2][119 * steps + ((cycle - 0) & mask)]);
    assert(x505 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x506(args[2][120 * steps + ((cycle - 0) & mask)]);
    assert(x506 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x507(args[2][121 * steps + ((cycle - 0) & mask)]);
    assert(x507 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][115 * steps + cycle] = x85;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][116 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][117 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][118 * steps + cycle] = x504;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][119 * steps + cycle] = x505;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][120 * steps + cycle] = x506;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][121 * steps + cycle] = x507;
    // loc("Top/Mux/3/U32Reg5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x508(args[1][20]);
    // loc("Top/Mux/3/U32Reg5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x509(args[1][21]);
    // loc("Top/Mux/3/U32Reg5/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x510(args[1][22]);
    // loc("Top/Mux/3/U32Reg5/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x511(args[1][23]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][125 * steps + cycle] = x508;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][126 * steps + cycle] = x509;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][127 * steps + cycle] = x510;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][128 * steps + cycle] = x511;
    {
      host_args.at(0) = x84;
      host_args.at(1) = x508;
      host_args.at(2) = x509;
      host_args.at(3) = x510;
      host_args.at(4) = x511;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x512(args[2][125 * steps + ((cycle - 0) & mask)]);
    assert(x512 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x513(args[2][126 * steps + ((cycle - 0) & mask)]);
    assert(x513 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x514(args[2][127 * steps + ((cycle - 0) & mask)]);
    assert(x514 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x515(args[2][128 * steps + ((cycle - 0) & mask)]);
    assert(x515 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][122 * steps + cycle] = x84;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][123 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][124 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][125 * steps + cycle] = x512;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][126 * steps + cycle] = x513;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][127 * steps + cycle] = x514;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][128 * steps + cycle] = x515;
    // loc("Top/Mux/3/U32Reg6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x516(args[1][24]);
    // loc("Top/Mux/3/U32Reg6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x517(args[1][25]);
    // loc("Top/Mux/3/U32Reg6/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x518(args[1][26]);
    // loc("Top/Mux/3/U32Reg6/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x519(args[1][27]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][132 * steps + cycle] = x516;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][133 * steps + cycle] = x517;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][134 * steps + cycle] = x518;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][135 * steps + cycle] = x519;
    {
      host_args.at(0) = x83;
      host_args.at(1) = x516;
      host_args.at(2) = x517;
      host_args.at(3) = x518;
      host_args.at(4) = x519;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x520(args[2][132 * steps + ((cycle - 0) & mask)]);
    assert(x520 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x521(args[2][133 * steps + ((cycle - 0) & mask)]);
    assert(x521 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x522(args[2][134 * steps + ((cycle - 0) & mask)]);
    assert(x522 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x523(args[2][135 * steps + ((cycle - 0) & mask)]);
    assert(x523 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][129 * steps + cycle] = x83;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][130 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][131 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][132 * steps + cycle] = x520;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][133 * steps + cycle] = x521;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][134 * steps + cycle] = x522;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][135 * steps + cycle] = x523;
    // loc("Top/Mux/3/U32Reg7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x524(args[1][28]);
    // loc("Top/Mux/3/U32Reg7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x525(args[1][29]);
    // loc("Top/Mux/3/U32Reg7/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x526(args[1][30]);
    // loc("Top/Mux/3/U32Reg7/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x527(args[1][31]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][139 * steps + cycle] = x524;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][140 * steps + cycle] = x525;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][141 * steps + cycle] = x526;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][142 * steps + cycle] = x527;
    {
      host_args.at(0) = x82;
      host_args.at(1) = x524;
      host_args.at(2) = x525;
      host_args.at(3) = x526;
      host_args.at(4) = x527;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x528(args[2][139 * steps + ((cycle - 0) & mask)]);
    assert(x528 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x529(args[2][140 * steps + ((cycle - 0) & mask)]);
    assert(x529 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x530(args[2][141 * steps + ((cycle - 0) & mask)]);
    assert(x530 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x531(args[2][142 * steps + ((cycle - 0) & mask)]);
    assert(x531 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][136 * steps + cycle] = x82;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][137 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][138 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][139 * steps + cycle] = x528;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][140 * steps + cycle] = x529;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][141 * steps + cycle] = x530;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][142 * steps + cycle] = x531;
    // loc("Top/Mux/3/U32Reg8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x532(args[1][32]);
    // loc("Top/Mux/3/U32Reg8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x533(args[1][33]);
    // loc("Top/Mux/3/U32Reg8/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x534(args[1][34]);
    // loc("Top/Mux/3/U32Reg8/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x535(args[1][35]);
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][146 * steps + cycle] = x532;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][147 * steps + cycle] = x533;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][148 * steps + cycle] = x534;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][149 * steps + cycle] = x535;
    {
      host_args.at(0) = x81;
      host_args.at(1) = x532;
      host_args.at(2) = x533;
      host_args.at(3) = x534;
      host_args.at(4) = x535;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x536(args[2][146 * steps + ((cycle - 0) & mask)]);
    assert(x536 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x537(args[2][147 * steps + ((cycle - 0) & mask)]);
    assert(x537 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x538(args[2][148 * steps + ((cycle - 0) & mask)]);
    assert(x538 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x539(args[2][149 * steps + ((cycle - 0) & mask)]);
    assert(x539 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    args[2][143 * steps + cycle] = x81;
    // loc("cirgen/components/ram.cpp":131:3)
    args[2][144 * steps + cycle] = x475;
    // loc("cirgen/components/ram.cpp":132:3)
    args[2][145 * steps + cycle] = x94;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][146 * steps + cycle] = x536;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][147 * steps + cycle] = x537;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][148 * steps + cycle] = x538;
    // loc("cirgen/components/u32.cpp":34:5)
    args[2][149 * steps + cycle] = x539;
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x540(args[1][0]);
    // loc("Top/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x541(args[1][1]);
    // loc("Top/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x542(args[1][2]);
    // loc("Top/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x543(args[1][3]);
    // loc("./cirgen/components/u32.h":25:12)
    Fp x544 = x541 * x90;
    // loc("./cirgen/components/u32.h":24:12)
    Fp x545 = Fp(x540) + Fp(x544);
    // loc("./cirgen/components/u32.h":26:12)
    Fp x546 = x542 * x80;
    // loc("./cirgen/components/u32.h":24:12)
    Fp x547 = Fp(x545) + Fp(x546);
    // loc("./cirgen/components/u32.h":27:12)
    Fp x548 = x543 * x79;
    // loc("./cirgen/components/u32.h":24:12)
    Fp x549 = Fp(x547) + Fp(x548);
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    Fp x550 = Fp(x549) + Fp(x78);
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x551 = Fp(x550.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][10 * steps + cycle] = x551;
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    Fp x552(args[2][10 * steps + ((cycle - 0) & mask)]);
    assert(x552 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x553 = x550 - x552;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x554 = x553 * x89;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x555 = Fp(x554.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][11 * steps + cycle] = x555;
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
    Fp x556(args[2][11 * steps + ((cycle - 0) & mask)]);
    assert(x556 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x557 = x554 - x556;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x558 = x557 * x89;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x559 = Fp(x558.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      args[2][12 * steps + cycle] = x559;
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
    Fp x560(args[2][12 * steps + ((cycle - 0) & mask)]);
    assert(x560 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x561 = x558 - x560;
    // loc("cirgen/components/bytes.cpp":90:10)
    Fp x562 = x561 * x89;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x563 = Fp(x562.asUInt32() & x77.asUInt32());
      // loc("./cirgen/components/bits.h":60:23)
      args[2][72 * steps + cycle] = x563;
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x564(args[2][72 * steps + ((cycle - 0) & mask)]);
    assert(x564 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x565 = x562 - x564;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    Fp x566 = x565 * x76;
    // loc("./cirgen/components/bits.h":60:23)
    args[2][73 * steps + cycle] = x566;
    // loc("Top/Mux/3/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x567(args[2][73 * steps + ((cycle - 0) & mask)]);
    assert(x567 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x568 = x95 - x567;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    Fp x569 = x567 * x568;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    args[2][92 * steps + cycle] = x569;
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x570(args[2][92 * steps + ((cycle - 0) & mask)]);
    assert(x570 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x571 = x92 - x567;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    Fp x572 = x570 * x571;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x572 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":48:3)
    args[2][93 * steps + cycle] = x75;
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    Fp x573 = x556 * x90;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x574 = Fp(x552) + Fp(x573);
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    Fp x575 = x560 * x80;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x576 = Fp(x574) + Fp(x575);
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    Fp x577 = x564 * x79;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x578 = Fp(x576) + Fp(x577);
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    Fp x579 = x567 * x74;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x580 = Fp(x578) + Fp(x579);
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x581 = x580 - x78;
    host_args.at(0) = x475;
    host_args.at(1) = x581;
    host(ctx, "log", "%u: Reset: PC = 0x%x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
  Fp x582(args[0][5 * steps + ((cycle - 0) & mask)]);
  assert(x582 != Fp::invalid());
  if (x582 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x583(args[2][10 * steps + ((cycle - 1) & mask)]);
    assert(x583 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":85:10))
    Fp x584(args[2][11 * steps + ((cycle - 1) & mask)]);
    assert(x584 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    Fp x585 = x584 * x90;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x586 = Fp(x583) + Fp(x585);
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":85:10))
    Fp x587(args[2][12 * steps + ((cycle - 1) & mask)]);
    assert(x587 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    Fp x588 = x587 * x80;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x589 = Fp(x586) + Fp(x588);
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x590(args[2][72 * steps + ((cycle - 1) & mask)]);
    assert(x590 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    Fp x591 = x590 * x79;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x592 = Fp(x589) + Fp(x591);
    // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x593(args[2][73 * steps + ((cycle - 1) & mask)]);
    assert(x593 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    Fp x594 = x593 * x74;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    Fp x595 = Fp(x592) + Fp(x594);
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x596 = x595 - x78;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":59:45))
      Fp x597(args[2][93 * steps + ((cycle - 1) & mask)]);
      assert(x597 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":60:24)
      auto x598 = x597 - x75;
      // loc("cirgen/circuit/rv32im/body.cpp":60:24)
      auto x599 = (x598 == 0) ? Fp(1) : Fp(0);
      if (x599 != 0) {
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x600(args[0][0 * steps + ((cycle - 0) & mask)]);
        assert(x600 != Fp::invalid());
        host_args.at(0) = x600;
        host_args.at(1) = x596;
        host(ctx, "log", "%u: BODY pc: 0x%x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x596;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x596;
        host(ctx, "getMajor", "", host_args.data(), 1, host_outs.data(), 1);
        Fp x601(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x602 = (x601 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][94 * steps + cycle] = x602;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x603 = x601 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x604 = (x603 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][95 * steps + cycle] = x604;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x605 = x601 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x606 = (x605 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][96 * steps + cycle] = x606;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x607 = x601 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x608 = (x607 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][97 * steps + cycle] = x608;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x609 = x601 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x610 = (x609 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][98 * steps + cycle] = x610;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x611 = x601 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x612 = (x611 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][99 * steps + cycle] = x612;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x613 = x601 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x614 = (x613 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][100 * steps + cycle] = x614;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x615 = x601 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x616 = (x615 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][101 * steps + cycle] = x616;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x617 = x601 - x70;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x618 = (x617 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][102 * steps + cycle] = x618;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x619 = x601 - x69;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x620 = (x619 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][103 * steps + cycle] = x620;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x621 = x601 - x68;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x622 = (x621 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][104 * steps + cycle] = x622;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x623 = x601 - x67;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x624 = (x623 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][105 * steps + cycle] = x624;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x625 = x601 - x66;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x626 = (x625 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][106 * steps + cycle] = x626;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x627 = x601 - x65;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x628 = (x627 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][107 * steps + cycle] = x628;
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x629(args[2][95 * steps + ((cycle - 0) & mask)]);
        assert(x629 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x630(args[2][96 * steps + ((cycle - 0) & mask)]);
        assert(x630 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x631 = x630 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x632 = Fp(x629) + Fp(x631);
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x633(args[2][97 * steps + ((cycle - 0) & mask)]);
        assert(x633 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x634 = x633 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x635 = Fp(x632) + Fp(x634);
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x636(args[2][98 * steps + ((cycle - 0) & mask)]);
        assert(x636 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x637 = x636 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x638 = Fp(x635) + Fp(x637);
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x639(args[2][99 * steps + ((cycle - 0) & mask)]);
        assert(x639 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x640 = x639 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x641 = Fp(x638) + Fp(x640);
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x642(args[2][100 * steps + ((cycle - 0) & mask)]);
        assert(x642 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x643 = x642 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x644 = Fp(x641) + Fp(x643);
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x645(args[2][101 * steps + ((cycle - 0) & mask)]);
        assert(x645 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x646 = x645 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x647 = Fp(x644) + Fp(x646);
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x648(args[2][102 * steps + ((cycle - 0) & mask)]);
        assert(x648 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x649 = x648 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x650 = Fp(x647) + Fp(x649);
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x651(args[2][103 * steps + ((cycle - 0) & mask)]);
        assert(x651 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x652 = x651 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x653 = Fp(x650) + Fp(x652);
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x654(args[2][104 * steps + ((cycle - 0) & mask)]);
        assert(x654 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x655 = x654 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x656 = Fp(x653) + Fp(x655);
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x657(args[2][105 * steps + ((cycle - 0) & mask)]);
        assert(x657 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x658 = x657 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x659 = Fp(x656) + Fp(x658);
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x660(args[2][106 * steps + ((cycle - 0) & mask)]);
        assert(x660 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x661 = x660 * x66;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x662 = Fp(x659) + Fp(x661);
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x663(args[2][107 * steps + ((cycle - 0) & mask)]);
        assert(x663 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x664 = x663 * x65;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x665 = Fp(x662) + Fp(x664);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x666 = x665 - x601;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x666 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":67:20)
      auto x667 = x95 - x599;
      if (x667 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x668 = x597 - x70;
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x669 = (x668 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x670 = x95 - x669;
        if (x670 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x671(args[0][0 * steps + ((cycle - 0) & mask)]);
          assert(x671 != Fp::invalid());
          host_args.at(0) = x671;
          host_args.at(1) = x596;
          host_args.at(2) = x597;
          host(ctx, "log", "%u: BODY pc: 0x%x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x672 = (x597 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][94 * steps + cycle] = x672;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x673 = x597 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x674 = (x673 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][95 * steps + cycle] = x674;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x675 = x597 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x676 = (x675 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][96 * steps + cycle] = x676;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x677 = x597 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x678 = (x677 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][97 * steps + cycle] = x678;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x679 = x597 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x680 = (x679 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][98 * steps + cycle] = x680;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x681 = x597 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x682 = (x681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][99 * steps + cycle] = x682;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x683 = x597 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x684 = (x683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][100 * steps + cycle] = x684;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x685 = x597 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x686 = (x685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][101 * steps + cycle] = x686;
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][102 * steps + cycle] = x669;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x687 = x597 - x69;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x688 = (x687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][103 * steps + cycle] = x688;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x689 = x597 - x68;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x690 = (x689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][104 * steps + cycle] = x690;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x691 = x597 - x67;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x692 = (x691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][105 * steps + cycle] = x692;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x693 = x597 - x66;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x694 = (x693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][106 * steps + cycle] = x694;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x695 = x597 - x65;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x696 = (x695 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][107 * steps + cycle] = x696;
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x697(args[2][95 * steps + ((cycle - 0) & mask)]);
        assert(x697 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x698(args[2][96 * steps + ((cycle - 0) & mask)]);
        assert(x698 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x699 = x698 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x700 = Fp(x697) + Fp(x699);
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x701(args[2][97 * steps + ((cycle - 0) & mask)]);
        assert(x701 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x702 = x701 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x703 = Fp(x700) + Fp(x702);
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x704(args[2][98 * steps + ((cycle - 0) & mask)]);
        assert(x704 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x705 = x704 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x706 = Fp(x703) + Fp(x705);
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x707(args[2][99 * steps + ((cycle - 0) & mask)]);
        assert(x707 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x708 = x707 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x709 = Fp(x706) + Fp(x708);
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x710(args[2][100 * steps + ((cycle - 0) & mask)]);
        assert(x710 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x711 = x710 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x712 = Fp(x709) + Fp(x711);
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x713(args[2][101 * steps + ((cycle - 0) & mask)]);
        assert(x713 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x714 = x713 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x715 = Fp(x712) + Fp(x714);
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x716(args[2][102 * steps + ((cycle - 0) & mask)]);
        assert(x716 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x717 = x716 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x718 = Fp(x715) + Fp(x717);
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x719(args[2][103 * steps + ((cycle - 0) & mask)]);
        assert(x719 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x720 = x719 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x721 = Fp(x718) + Fp(x720);
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x722(args[2][104 * steps + ((cycle - 0) & mask)]);
        assert(x722 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x723 = x722 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x724 = Fp(x721) + Fp(x723);
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x725(args[2][105 * steps + ((cycle - 0) & mask)]);
        assert(x725 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x726 = x725 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x727 = Fp(x724) + Fp(x726);
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x728(args[2][106 * steps + ((cycle - 0) & mask)]);
        assert(x728 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x729 = x728 * x66;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x730 = Fp(x727) + Fp(x729);
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x731(args[2][107 * steps + ((cycle - 0) & mask)]);
        assert(x731 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x732 = x731 * x65;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x733 = Fp(x730) + Fp(x732);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x734 = x733 - x597;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x734 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg"("./cirgen/components/mux.h":37:25))
    Fp x735(args[2][94 * steps + ((cycle - 0) & mask)]);
    assert(x735 != Fp::invalid());
    if (x735 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x736(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x736 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      Fp x737 = x596 * x76;
      {
        host_args.at(0) = x737;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x738(host_outs.at(0));
        Fp x739(host_outs.at(1));
        Fp x740(host_outs.at(2));
        Fp x741(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x738;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x739;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x740;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x741;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x742(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x743(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x744(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x745(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x745 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x737;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x736;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x742;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x743;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x744;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x745;
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x746 = Fp(x745.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        Fp x747 = x746 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x747;
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x748 = Fp(x745.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        Fp x749 = x748 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x749;
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x750 = Fp(x745.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        Fp x751 = x750 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x751;
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x752 = Fp(x745.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        Fp x753 = x752 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x753;
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x754 = Fp(x745.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        Fp x755 = x754 * x56;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][78 * steps + cycle] = x755;
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x756 = Fp(x745.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x756;
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x757 = Fp(x744.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        Fp x758 = x757 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x758;
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x759 = Fp(x744.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        Fp x760 = x759 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x760;
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x761 = Fp(x744.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        Fp x762 = x761 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x762;
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x763 = Fp(x744.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        Fp x764 = x763 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][82 * steps + cycle] = x764;
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x765 = Fp(x744.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x765;
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x766 = Fp(x743.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        Fp x767 = x766 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x767;
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x768 = Fp(x743.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        Fp x769 = x768 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x769;
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x770 = Fp(x743.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        Fp x771 = x770 * x58;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][83 * steps + cycle] = x771;
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x772 = Fp(x743.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        Fp x773 = x772 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][85 * steps + cycle] = x773;
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x774 = Fp(x743.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][84 * steps + cycle] = x774;
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x775 = Fp(x742.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        Fp x776 = x775 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x776;
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x777 = Fp(x742.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        args[2][170 * steps + cycle] = x777;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x778(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x779 = x778 * x55;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x780(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x781 = x780 * x59;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x782(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x782 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      Fp x783 = x782 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x784 = Fp(x781) + Fp(x783);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x785(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      Fp x786 = x785 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x787 = Fp(x784) + Fp(x786);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x788(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x788 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x789 = Fp(x787) + Fp(x788);
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x790 = Fp(x779) + Fp(x789);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x791 = x790 * x92;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x792(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x793 = Fp(x791) + Fp(x792);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x794 = x745 - x793;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x794 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x795(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x795 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x796 = x795 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x797(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x797 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      Fp x798 = x797 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x799 = Fp(x796) + Fp(x798);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x800(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x800 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x801 = Fp(x799) + Fp(x800);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x802 = x801 * x59;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x803(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      Fp x804 = x803 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x805 = Fp(x802) + Fp(x804);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x806(args[2][81 * steps + ((cycle - 0) & mask)]);
      assert(x806 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x807 = Fp(x805) + Fp(x806);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x808 = x744 - x807;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x808 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x809(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x809 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x810 = x809 * x64;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x811(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x812 = x811 * x78;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x813(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x813 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x814 = Fp(x812) + Fp(x813);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      Fp x815 = x814 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x816 = Fp(x810) + Fp(x815);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x817(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x817 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      Fp x818 = x817 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x819 = Fp(x816) + Fp(x818);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x820(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x821 = Fp(x819) + Fp(x820);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x822 = x743 - x821;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x823(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x823 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x824 = x823 * x64;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x825(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x826 = Fp(x824) + Fp(x825);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x827 = x742 - x826;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x742;
        host_args.at(1) = x743;
        host_args.at(2) = x744;
        host_args.at(3) = x745;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        Fp x828(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x829 = (x828 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][171 * steps + cycle] = x829;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x830 = x828 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x831 = (x830 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][172 * steps + cycle] = x831;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x832 = x828 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x833 = (x832 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][173 * steps + cycle] = x833;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x834 = x828 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x835 = (x834 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][174 * steps + cycle] = x835;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x836 = x828 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x837 = (x836 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][175 * steps + cycle] = x837;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x838 = x828 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x839 = (x838 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][176 * steps + cycle] = x839;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x840 = x828 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x841 = (x840 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][177 * steps + cycle] = x841;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x842 = x828 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x843 = (x842 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][178 * steps + cycle] = x843;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x844(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x844 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x845(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x845 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x846 = x845 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x847 = Fp(x844) + Fp(x846);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x848(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x848 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x849 = x848 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x850 = Fp(x847) + Fp(x849);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x851(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x851 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x852 = x851 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x853 = Fp(x850) + Fp(x852);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x854(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x854 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x855 = x854 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x856 = Fp(x853) + Fp(x855);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x857(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x857 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x858 = x857 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x859 = Fp(x856) + Fp(x858);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x860(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x860 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x861 = x860 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x862 = Fp(x859) + Fp(x861);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x863 = x862 - x828;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x863 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        Fp x864(args[2][171 * steps + ((cycle - 0) & mask)]);
        assert(x864 != Fp::invalid());
        if (x864 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        Fp x865(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x865 != Fp::invalid());
        if (x865 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        Fp x866(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x866 != Fp::invalid());
        if (x866 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          args[2][187 * steps + cycle] = x50;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x72;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        Fp x867(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x867 != Fp::invalid());
        if (x867 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          args[2][187 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x72;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        Fp x868(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x868 != Fp::invalid());
        if (x868 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          args[2][185 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          args[2][186 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          args[2][187 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x72;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        Fp x869(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x869 != Fp::invalid());
        if (x869 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        Fp x870(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x870 != Fp::invalid());
        if (x870 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        Fp x871(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x871 != Fp::invalid());
        if (x871 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x872 = x785 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x873 = x788 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x874 = Fp(x872) + Fp(x873);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x875 = x792 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x876 = Fp(x875) + Fp(x801);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x877 = Fp(x874) + Fp(x876);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x878 = x778 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x879 = x780 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x880 = Fp(x878) + Fp(x879);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x881 = Fp(x880) + Fp(x782);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x882 = x778 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x877;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x881;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x882;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x882;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x883 = x803 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      Fp x884 = x806 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x885 = Fp(x883) + Fp(x884);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x886 = Fp(x885) + Fp(x809);
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      Fp x887 = Fp(x886) + Fp(x48);
      {
        host_args.at(0) = x887;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x888(host_outs.at(0));
        Fp x889(host_outs.at(1));
        Fp x890(host_outs.at(2));
        Fp x891(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x888;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x889;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x890;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x891;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x892(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x893(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x894(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x895(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x895 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x887;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x736;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x892;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x893;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x894;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x895;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x896 = x792 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x897 = Fp(x896) + Fp(x801);
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      Fp x898 = Fp(x897) + Fp(x48);
      {
        host_args.at(0) = x898;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x899(host_outs.at(0));
        Fp x900(host_outs.at(1));
        Fp x901(host_outs.at(2));
        Fp x902(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][125 * steps + cycle] = x899;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][126 * steps + cycle] = x900;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][127 * steps + cycle] = x901;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][128 * steps + cycle] = x902;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x903(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x904(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x905(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x906(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x906 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][122 * steps + cycle] = x898;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][123 * steps + cycle] = x736;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][124 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][125 * steps + cycle] = x903;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][126 * steps + cycle] = x904;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][127 * steps + cycle] = x905;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][128 * steps + cycle] = x906;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x907(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x908(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x909(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x910(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x910 != Fp::invalid());
      host_args.at(0) = x907;
      host_args.at(1) = x908;
      host_args.at(2) = x909;
      host_args.at(3) = x910;
      host_args.at(4) = x886;
      host_args.at(5) = x892;
      host_args.at(6) = x893;
      host_args.at(7) = x894;
      host_args.at(8) = x895;
      host_args.at(9) = x897;
      host_args.at(10) = x903;
      host_args.at(11) = x904;
      host_args.at(12) = x905;
      host_args.at(13) = x906;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x911(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x912 = x95 - x911;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x913 = x912 * x892;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x914 = x912 * x893;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x915 = x912 * x894;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x916 = x912 * x895;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      Fp x917 = x593 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      Fp x918 = Fp(x590) + Fp(x917);
      // loc("cirgen/components/u32.cpp":97:20)
      auto x919 = x583 - x78;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x920 = x911 * x919;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x921 = x911 * x584;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x922 = x911 * x587;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x923 = x911 * x918;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x924 = Fp(x913) + Fp(x920);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x925 = Fp(x914) + Fp(x921);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x926 = Fp(x915) + Fp(x922);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x927 = Fp(x916) + Fp(x923);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x928(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x928 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x929 = x95 - x928;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x930 = x929 * x903;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x931 = x929 * x904;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x932 = x929 * x905;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x933 = x929 * x906;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x934 = x928 * x907;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x935 = x928 * x908;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x936 = x928 * x909;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x937 = x928 * x910;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x938 = Fp(x930) + Fp(x934);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x939 = Fp(x931) + Fp(x935);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x940 = Fp(x932) + Fp(x936);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x941 = Fp(x933) + Fp(x937);
      host_args.at(0) = x924;
      host_args.at(1) = x925;
      host_args.at(2) = x926;
      host_args.at(3) = x927;
      host_args.at(4) = x938;
      host_args.at(5) = x939;
      host_args.at(6) = x940;
      host_args.at(7) = x941;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x942 = Fp(x927.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x943 = x942 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][189 * steps + cycle] = x943;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x944 = Fp(x927.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x945 = x944 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][25 * steps + cycle] = x945;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x946(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x946 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x947 = x946 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x948(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x948 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x949 = x948 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x950 = Fp(x947) + Fp(x949);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x951 = x927 - x950;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x951 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x952 = Fp(x941.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x953 = x952 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][190 * steps + cycle] = x953;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x954 = Fp(x941.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x955 = x954 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][26 * steps + cycle] = x955;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x956(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x956 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x957 = x956 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x958(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x958 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x959 = x958 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x960 = Fp(x957) + Fp(x959);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x961 = x941 - x960;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x961 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][191 * steps + cycle] = x938;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][192 * steps + cycle] = x939;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][193 * steps + cycle] = x940;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][194 * steps + cycle] = x941;
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x962 = Fp(x924.asUInt32() & x938.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x963 = Fp(x925.asUInt32() & x939.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x964 = Fp(x926.asUInt32() & x940.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x965 = Fp(x927.asUInt32() & x941.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][195 * steps + cycle] = x962;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][196 * steps + cycle] = x963;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][197 * steps + cycle] = x964;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][198 * steps + cycle] = x965;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x966(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x966 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x967 = x966 * x924;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x968 = x966 * x925;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x969 = x966 * x926;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x970 = x966 * x927;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x971 = Fp(x967) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x972 = Fp(x968) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x973 = Fp(x969) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x974 = Fp(x970) + Fp(x91);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x975(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x975 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x976 = x975 * x938;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x977 = x975 * x939;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x978 = x975 * x940;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x979 = x975 * x941;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x980 = Fp(x971) + Fp(x976);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x981 = Fp(x972) + Fp(x977);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x982 = Fp(x973) + Fp(x978);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x983 = Fp(x974) + Fp(x979);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x984(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x985(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x986(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x987(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x988(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x988 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x989 = x984 * x985;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x990 = x984 * x986;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x991 = x984 * x987;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x992 = x984 * x988;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x993 = Fp(x980) + Fp(x989);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x994 = Fp(x981) + Fp(x990);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x995 = Fp(x982) + Fp(x991);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x996 = Fp(x983) + Fp(x992);
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x997 = x994 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x998 = Fp(x993) + Fp(x997);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x999 = Fp(x998.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][27 * steps + cycle] = x999;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x1000(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x1000 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1001 = x998 - x1000;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1002 = x1001 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1003 = Fp(x1002.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][28 * steps + cycle] = x1003;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x1004(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x1004 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1005 = x1002 - x1004;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1006 = x1005 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][86 * steps + cycle] = x1006;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1007(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x1007 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x1008 = Fp(x1007) + Fp(x995);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x1009 = x996 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x1010 = Fp(x1008) + Fp(x1009);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1011 = Fp(x1010.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][29 * steps + cycle] = x1011;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x1012(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x1012 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1013 = x1010 - x1012;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1014 = x1013 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1015 = Fp(x1014.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][30 * steps + cycle] = x1015;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x1016(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x1016 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1017 = x1014 - x1016;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1018 = x1017 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][87 * steps + cycle] = x1018;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1019 = Fp(x1016.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x1020 = x1019 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][199 * steps + cycle] = x1020;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1021 = Fp(x1016.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x1022 = x1021 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][31 * steps + cycle] = x1022;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1023(args[2][199 * steps + ((cycle - 0) & mask)]);
      assert(x1023 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1024 = x1023 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x1025(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x1025 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x1026 = x1025 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1027 = Fp(x1024) + Fp(x1026);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1028 = x1016 - x1027;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1028 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1029 = x95 - x956;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x1030 = x946 * x1029;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1031 = x95 - x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x1032 = x1030 * x1031;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1033 = x95 - x946;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      Fp x1034 = x1033 * x956;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      Fp x1035 = x1034 * x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x1036 = Fp(x1032) + Fp(x1035);
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      args[2][200 * steps + cycle] = x1036;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x1037(args[2][200 * steps + ((cycle - 0) & mask)]);
      assert(x1037 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      Fp x1038 = Fp(x1037) + Fp(x1023);
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      Fp x1039 = x1037 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      Fp x1040 = x1039 * x1023;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1041 = x1038 - x1040;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      args[2][201 * steps + cycle] = x1041;
      // loc("cirgen/components/u32.cpp":137:26)
      Fp x1042 = x1004 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      Fp x1043 = Fp(x1000) + Fp(x1042);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1044 = (x1043 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][202 * steps + cycle] = x1044;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1045 = inv(x1043);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][203 * steps + cycle] = x1045;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1046(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x1046 != Fp::invalid());
      if (x1046 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1043 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1047 = x95 - x1046;
      if (x1047 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1048(args[2][203 * steps + ((cycle - 0) & mask)]);
        assert(x1048 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x1049 = x1043 * x1048;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1050 = x1049 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1050 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      Fp x1051 = x1016 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x1052 = Fp(x1012) + Fp(x1051);
      // loc("cirgen/components/u32.cpp":138:47)
      Fp x1053 = x1047 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x1054 = Fp(x1052) + Fp(x1053);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1055 = (x1054 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][204 * steps + cycle] = x1055;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1056 = inv(x1054);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][205 * steps + cycle] = x1056;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1057(args[2][204 * steps + ((cycle - 0) & mask)]);
      assert(x1057 != Fp::invalid());
      if (x1057 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1054 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1058 = x95 - x1057;
      if (x1058 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1059(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x1059 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x1060 = x1054 * x1059;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1061 = x1060 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1061 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1062(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x1062 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1063(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x1063 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1064 = x95 - x1063;
      host_args.at(0) = x1000;
      host_args.at(1) = x1004;
      host_args.at(2) = x1012;
      host_args.at(3) = x1016;
      host_args.at(4) = x1057;
      host_args.at(5) = x1062;
      host_args.at(6) = x1064;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x1065 = x817 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      Fp x1066 = x820 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x1067 = Fp(x1065) + Fp(x1066);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x1068 = Fp(x1067) + Fp(x823);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1069 = (x1068 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][206 * steps + cycle] = x1069;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1070 = inv(x1068);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][207 * steps + cycle] = x1070;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1071(args[2][206 * steps + ((cycle - 0) & mask)]);
      assert(x1071 != Fp::invalid());
      if (x1071 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1068 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1072 = x95 - x1071;
      if (x1072 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1073(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x1073 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x1074 = x1068 * x1073;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1075 = x1074 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1075 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      Fp x1076 = Fp(x596) + Fp(x78);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      Fp x1077(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x1077 != Fp::invalid());
      if (x1077 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1078 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x814 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1079 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1080 = Fp(x1079.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1080;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1081(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1081 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1082 = x1079 - x1081;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1083 = x1082 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1084 = Fp(x1083.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1084;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1085(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1085 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1086 = x1083 - x1085;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1087 = x1086 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1088 = Fp(x1087.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1088;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1089(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1089 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1090 = x1087 - x1089;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1091 = x1090 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1092 = Fp(x1091.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1092;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1093(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1093 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1094 = x1091 - x1093;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1095 = x1094 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1095;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1096(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1096 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1097 = x95 - x1096;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1098 = x1096 * x1097;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1098;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1099(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1099 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1100 = x92 - x1096;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1101 = x1099 * x1100;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1101 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1102(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1102 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        args[2][93 * steps + cycle] = x1102;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          Fp x1103 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1016;
          {
            host_args.at(0) = x1103;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1104(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1104 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1105(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1105 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1106(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1106 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1107(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1107 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1103;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1104;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1105;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1106;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1107;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      Fp x1108(args[2][172 * steps + ((cycle - 0) & mask)]);
      assert(x1108 != Fp::invalid());
      if (x1108 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1109 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1109 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x814 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1110 = x790 - x61;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1110 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1111 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1112 = Fp(x1111.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1112;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1113(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1113 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1114 = x1111 - x1113;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1115 = x1114 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1116 = Fp(x1115.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1116;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1117(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1117 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1118 = x1115 - x1117;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1119 = x1118 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1120 = Fp(x1119.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1120;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1121(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1121 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1122 = x1119 - x1121;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1123 = x1122 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1124 = Fp(x1123.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1124;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1125(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1125 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1126 = x1123 - x1125;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1127 = x1126 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1127;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1128(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1128 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1129 = x95 - x1128;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1130 = x1128 * x1129;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1130;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1131(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1131 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1132 = x92 - x1128;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1133 = x1131 * x1132;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1133 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1134(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1134 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        args[2][93 * steps + cycle] = x1134;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          Fp x1135 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1016;
          {
            host_args.at(0) = x1135;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1136(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1136 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1137(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1137 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1138(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1138 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1139(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1139 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1135;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1136;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1137;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1138;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1139;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      Fp x1140(args[2][173 * steps + ((cycle - 0) & mask)]);
      assert(x1140 != Fp::invalid());
      if (x1140 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1141 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1141 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1142 = x814 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1142 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        args[2][187 * steps + cycle] = x50;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x72;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1143 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1144 = Fp(x1143.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1144;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1145(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1145 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1146 = x1143 - x1145;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1147 = x1146 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1148 = Fp(x1147.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1148;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1149(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1149 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1150 = x1147 - x1149;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1151 = x1150 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1152 = Fp(x1151.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1152;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1153(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1153 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1154 = x1151 - x1153;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1155 = x1154 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1156 = Fp(x1155.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1156;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1157(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1157 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1158 = x1155 - x1157;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1159 = x1158 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1159;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1160(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1160 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1161 = x95 - x1160;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1162 = x1160 * x1161;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1162;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1163(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1163 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1164 = x92 - x1160;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1165 = x1163 * x1164;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1165 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1166(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1166 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        args[2][93 * steps + cycle] = x1166;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          Fp x1167 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1016;
          {
            host_args.at(0) = x1167;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1168(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1168 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1169(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1169 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1170(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1170 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1171(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1171 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1167;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1168;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1169;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1170;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1171;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      Fp x1172(args[2][174 * steps + ((cycle - 0) & mask)]);
      assert(x1172 != Fp::invalid());
      if (x1172 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1173 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1173 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1174 = x814 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1174 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        args[2][187 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x72;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1175 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1176 = Fp(x1175.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1176;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1177(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1177 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1178 = x1175 - x1177;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1179 = x1178 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1180 = Fp(x1179.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1180;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1181(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1181 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1182 = x1179 - x1181;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1183 = x1182 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1184 = Fp(x1183.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1184;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1185(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1185 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1186 = x1183 - x1185;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1187 = x1186 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1188 = Fp(x1187.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1188;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1189(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1189 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1190 = x1187 - x1189;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1191 = x1190 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1191;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1192(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1193 = x95 - x1192;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1194 = x1192 * x1193;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1194;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1195(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1196 = x92 - x1192;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1197 = x1195 * x1196;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1197 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1198(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1198 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        args[2][93 * steps + cycle] = x1198;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          Fp x1199 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1016;
          {
            host_args.at(0) = x1199;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1200(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1200 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1201(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1201 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1202(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1202 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1203(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1203 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1199;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1200;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1201;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1202;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1203;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      Fp x1204(args[2][175 * steps + ((cycle - 0) & mask)]);
      assert(x1204 != Fp::invalid());
      if (x1204 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1205 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1205 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1206 = x814 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1206 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        args[2][185 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        args[2][186 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        args[2][187 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x72;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1207 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1208 = Fp(x1207.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1208;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1209(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1209 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1210 = x1207 - x1209;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1211 = x1210 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1212 = Fp(x1211.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1212;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1213(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1213 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1214 = x1211 - x1213;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1215 = x1214 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1216 = Fp(x1215.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1216;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1217(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1217 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1218 = x1215 - x1217;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1219 = x1218 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1220 = Fp(x1219.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1220;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1221(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1221 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1222 = x1219 - x1221;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1223 = x1222 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1223;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1224(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1224 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1225 = x95 - x1224;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1226 = x1224 * x1225;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1226;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1227(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1227 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1228 = x92 - x1224;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1229 = x1227 * x1228;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1229 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1230(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1230 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        args[2][93 * steps + cycle] = x1230;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          Fp x1231 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1016;
          {
            host_args.at(0) = x1231;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1232(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1232 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1233(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1233 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1234(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1234 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1235(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1235 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1231;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1232;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1233;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1234;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1235;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      Fp x1236(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x1236 != Fp::invalid());
      if (x1236 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1237 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1237 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1238 = x814 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1238 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1239 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1240 = Fp(x1239.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1240;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1241(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1241 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1242 = x1239 - x1241;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1243 = x1242 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1244 = Fp(x1243.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1244;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1245(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1245 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1246 = x1243 - x1245;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1247 = x1246 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1248 = Fp(x1247.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1248;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1249(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1249 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1250 = x1247 - x1249;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1251 = x1250 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1252 = Fp(x1251.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1252;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1253(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1253 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1254 = x1251 - x1253;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1255 = x1254 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1255;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1256(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1256 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1257 = x95 - x1256;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1258 = x1256 * x1257;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1258;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1259(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1260 = x92 - x1256;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1261 = x1259 * x1260;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1261 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1262(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1262 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        args[2][93 * steps + cycle] = x1262;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1062;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          Fp x1263 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1062;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x94;
          {
            host_args.at(0) = x1263;
            host_args.at(1) = x1062;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1264(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1264 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1265(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1265 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1266(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1266 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1267(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1267 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1263;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1264;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1265;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1266;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1267;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      Fp x1268(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x1268 != Fp::invalid());
      if (x1268 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1269 = x825 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1269 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1270 = x814 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1270 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1271 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1272 = Fp(x1271.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1272;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1273(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1273 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1274 = x1271 - x1273;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1275 = x1274 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1276 = Fp(x1275.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1276;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1277(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1277 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1278 = x1275 - x1277;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1279 = x1278 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1280 = Fp(x1279.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1280;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1281(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1281 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1282 = x1279 - x1281;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1283 = x1282 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1284 = Fp(x1283.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1284;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1285(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1286 = x1283 - x1285;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1287 = x1286 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1287;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1288(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1289 = x95 - x1288;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1290 = x1288 * x1289;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1290;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1291(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1292 = x92 - x1288;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1293 = x1291 * x1292;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1293 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1294(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1294 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        args[2][93 * steps + cycle] = x1294;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1064;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          Fp x1295 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1064;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x94;
          {
            host_args.at(0) = x1295;
            host_args.at(1) = x1064;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1296(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1296 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1297(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1297 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1298(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1298 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1299(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1299 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1295;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1296;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1297;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1298;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1299;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      Fp x1300(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x1300 != Fp::invalid());
      if (x1300 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1301 = x825 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1301 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x814 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1302 = x785 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x1303 = x788 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1304 = Fp(x1302) + Fp(x1303);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1305 = Fp(x1304) + Fp(x897);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1306 = x778 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x1307 = x780 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1308 = Fp(x1306) + Fp(x1307);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1309 = Fp(x1308) + Fp(x782);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x1310 = x778 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1305;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x1309;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x1310;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x1310;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1311 = Fp(x1076) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1312 = Fp(x1311.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1312;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1313(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1313 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1314 = x1311 - x1313;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1315 = x1314 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1316 = Fp(x1315.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1316;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1317(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1317 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1318 = x1315 - x1317;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1319 = x1318 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1320 = Fp(x1319.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1320;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1321(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1321 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1322 = x1319 - x1321;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1323 = x1322 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1324 = Fp(x1323.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1324;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1325(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1325 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1326 = x1323 - x1325;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1327 = x1326 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1327;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1328(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1328 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1329 = x95 - x1328;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1330 = x1328 * x1329;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1330;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1331(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1331 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1332 = x92 - x1328;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1333 = x1331 * x1332;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1333 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1334(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1334 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        args[2][93 * steps + cycle] = x1334;
        if (x1072 != 0) {
          host_args.at(0) = x1068;
          host_args.at(1) = x1000;
          host_args.at(2) = x1004;
          host_args.at(3) = x1012;
          host_args.at(4) = x1016;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          Fp x1335 = Fp(x1068) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1016;
          {
            host_args.at(0) = x1335;
            host_args.at(1) = x1000;
            host_args.at(2) = x1004;
            host_args.at(3) = x1012;
            host_args.at(4) = x1016;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1336(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1337(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1337 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1338(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1338 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1339(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1339 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1335;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x736;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1336;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1337;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1338;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1339;
        }
        if (x1071 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
    Fp x1340(args[2][95 * steps + ((cycle - 0) & mask)]);
    assert(x1340 != Fp::invalid());
    if (x1340 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1341(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x1341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      Fp x1342 = x596 * x76;
      {
        host_args.at(0) = x1342;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x1343(host_outs.at(0));
        Fp x1344(host_outs.at(1));
        Fp x1345(host_outs.at(2));
        Fp x1346(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x1343;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x1344;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x1345;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x1346;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1347(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x1347 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1348(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x1348 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1349(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x1349 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1350(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x1350 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x1342;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x1341;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x1347;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x1348;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x1349;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x1350;
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1351 = Fp(x1350.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        Fp x1352 = x1351 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x1352;
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1353 = Fp(x1350.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        Fp x1354 = x1353 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x1354;
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1355 = Fp(x1350.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        Fp x1356 = x1355 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x1356;
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1357 = Fp(x1350.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        Fp x1358 = x1357 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x1358;
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1359 = Fp(x1350.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        Fp x1360 = x1359 * x56;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][78 * steps + cycle] = x1360;
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1361 = Fp(x1350.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x1361;
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1362 = Fp(x1349.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        Fp x1363 = x1362 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x1363;
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1364 = Fp(x1349.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        Fp x1365 = x1364 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x1365;
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1366 = Fp(x1349.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        Fp x1367 = x1366 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x1367;
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1368 = Fp(x1349.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        Fp x1369 = x1368 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][82 * steps + cycle] = x1369;
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1370 = Fp(x1349.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x1370;
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1371 = Fp(x1348.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        Fp x1372 = x1371 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x1372;
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1373 = Fp(x1348.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        Fp x1374 = x1373 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x1374;
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1375 = Fp(x1348.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        Fp x1376 = x1375 * x58;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][83 * steps + cycle] = x1376;
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1377 = Fp(x1348.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        Fp x1378 = x1377 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][85 * steps + cycle] = x1378;
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1379 = Fp(x1348.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][84 * steps + cycle] = x1379;
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1380 = Fp(x1347.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        Fp x1381 = x1380 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x1381;
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1382 = Fp(x1347.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        args[2][170 * steps + cycle] = x1382;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1383(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x1383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x1384 = x1383 * x55;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1385(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x1385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x1386 = x1385 * x59;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1387(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x1387 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      Fp x1388 = x1387 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x1389 = Fp(x1386) + Fp(x1388);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1390(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x1390 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      Fp x1391 = x1390 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x1392 = Fp(x1389) + Fp(x1391);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1393(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x1393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x1394 = Fp(x1392) + Fp(x1393);
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x1395 = Fp(x1384) + Fp(x1394);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x1396 = x1395 * x92;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1397(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x1397 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x1398 = Fp(x1396) + Fp(x1397);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1399 = x1350 - x1398;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1399 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1400(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x1400 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x1401 = x1400 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1402(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x1402 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      Fp x1403 = x1402 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x1404 = Fp(x1401) + Fp(x1403);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1405(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x1405 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x1406 = Fp(x1404) + Fp(x1405);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x1407 = x1406 * x59;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1408(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x1408 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      Fp x1409 = x1408 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x1410 = Fp(x1407) + Fp(x1409);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1411(args[2][81 * steps + ((cycle - 0) & mask)]);
      assert(x1411 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x1412 = Fp(x1410) + Fp(x1411);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1413 = x1349 - x1412;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1413 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1414(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x1414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x1415 = x1414 * x64;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1416(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x1416 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x1417 = x1416 * x78;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1418(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x1418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x1419 = Fp(x1417) + Fp(x1418);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      Fp x1420 = x1419 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x1421 = Fp(x1415) + Fp(x1420);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1422(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x1422 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      Fp x1423 = x1422 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x1424 = Fp(x1421) + Fp(x1423);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1425(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x1425 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x1426 = Fp(x1424) + Fp(x1425);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1427 = x1348 - x1426;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1427 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1428(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x1428 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x1429 = x1428 * x64;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x1430(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x1430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x1431 = Fp(x1429) + Fp(x1430);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1432 = x1347 - x1431;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1432 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1347;
        host_args.at(1) = x1348;
        host_args.at(2) = x1349;
        host_args.at(3) = x1350;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        Fp x1433(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1434 = (x1433 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][171 * steps + cycle] = x1434;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1435 = x1433 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1436 = (x1435 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][172 * steps + cycle] = x1436;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1437 = x1433 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1438 = (x1437 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][173 * steps + cycle] = x1438;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1439 = x1433 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1440 = (x1439 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][174 * steps + cycle] = x1440;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1441 = x1433 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1442 = (x1441 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][175 * steps + cycle] = x1442;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1443 = x1433 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1444 = (x1443 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][176 * steps + cycle] = x1444;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1445 = x1433 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1446 = (x1445 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][177 * steps + cycle] = x1446;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1447 = x1433 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1448 = (x1447 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][178 * steps + cycle] = x1448;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1449(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x1449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1450(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x1450 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x1451 = x1450 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x1452 = Fp(x1449) + Fp(x1451);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1453(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x1453 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x1454 = x1453 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x1455 = Fp(x1452) + Fp(x1454);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1456(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x1456 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x1457 = x1456 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x1458 = Fp(x1455) + Fp(x1457);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1459(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x1459 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x1460 = x1459 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x1461 = Fp(x1458) + Fp(x1460);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1462(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x1462 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x1463 = x1462 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x1464 = Fp(x1461) + Fp(x1463);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1465(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x1465 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x1466 = x1465 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x1467 = Fp(x1464) + Fp(x1466);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x1468 = x1467 - x1433;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x1468 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        Fp x1469(args[2][171 * steps + ((cycle - 0) & mask)]);
        assert(x1469 != Fp::invalid());
        if (x1469 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1470 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x1471 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1472 = Fp(x1470) + Fp(x1471);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1473 = x1397 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1474 = Fp(x1473) + Fp(x1406);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1475 = Fp(x1472) + Fp(x1474);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1476 = x1383 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x1477 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1478 = Fp(x1476) + Fp(x1477);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1479 = Fp(x1478) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x1480 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1475;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1479;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1480;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1480;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          args[2][187 * steps + cycle] = x50;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x72;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        Fp x1481(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x1481 != Fp::invalid());
        if (x1481 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1482 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x1483 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1484 = Fp(x1482) + Fp(x1483);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1485 = x1397 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1486 = Fp(x1485) + Fp(x1406);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1487 = Fp(x1484) + Fp(x1486);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1488 = x1383 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x1489 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1490 = Fp(x1488) + Fp(x1489);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1491 = Fp(x1490) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x1492 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1487;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1491;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1492;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1492;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          args[2][187 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x72;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        Fp x1493(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x1493 != Fp::invalid());
        if (x1493 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1494 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x1495 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1496 = Fp(x1494) + Fp(x1495);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1497 = x1397 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1498 = Fp(x1497) + Fp(x1406);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1499 = Fp(x1496) + Fp(x1498);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1500 = x1383 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x1501 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1502 = Fp(x1500) + Fp(x1501);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1503 = Fp(x1502) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x1504 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1499;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1503;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1504;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1504;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          args[2][185 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          args[2][186 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          args[2][187 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x72;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        Fp x1505(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x1505 != Fp::invalid());
        if (x1505 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1506 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x1507 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1508 = Fp(x1506) + Fp(x1507);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1509 = x1397 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1510 = Fp(x1509) + Fp(x1406);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1511 = Fp(x1508) + Fp(x1510);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1512 = x1383 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x1513 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1514 = Fp(x1512) + Fp(x1513);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1515 = Fp(x1514) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x1516 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1511;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1515;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1516;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1516;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        Fp x1517(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x1517 != Fp::invalid());
        if (x1517 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1518 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x1519 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1520 = Fp(x1518) + Fp(x1519);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1521 = x1397 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x1522 = Fp(x1521) + Fp(x1406);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x1523 = Fp(x1520) + Fp(x1522);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1524 = x1383 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x1525 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1526 = Fp(x1524) + Fp(x1525);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x1527 = Fp(x1526) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x1528 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1523;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1527;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1528;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1528;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        Fp x1529(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x1529 != Fp::invalid());
        if (x1529 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1530 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          Fp x1531 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1532 = Fp(x1530) + Fp(x1531);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          Fp x1533 = x1422 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1534 = Fp(x1532) + Fp(x1533);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          Fp x1535 = x1425 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1536 = Fp(x1534) + Fp(x1535);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1537 = x1383 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          Fp x1538 = x1428 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1539 = Fp(x1537) + Fp(x1538);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          Fp x1540 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1541 = Fp(x1539) + Fp(x1540);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1542 = Fp(x1541) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          Fp x1543 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1536;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1542;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1543;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1543;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        Fp x1544(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x1544 != Fp::invalid());
        if (x1544 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1545 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          Fp x1546 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1547 = Fp(x1545) + Fp(x1546);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          Fp x1548 = x1422 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1549 = Fp(x1547) + Fp(x1548);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          Fp x1550 = x1425 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1551 = Fp(x1549) + Fp(x1550);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1552 = x1383 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          Fp x1553 = x1428 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1554 = Fp(x1552) + Fp(x1553);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          Fp x1555 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1556 = Fp(x1554) + Fp(x1555);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1557 = Fp(x1556) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          Fp x1558 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1551;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1557;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1558;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1558;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        Fp x1559(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x1559 != Fp::invalid());
        if (x1559 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1560 = x1390 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          Fp x1561 = x1393 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1562 = Fp(x1560) + Fp(x1561);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          Fp x1563 = x1422 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1564 = Fp(x1562) + Fp(x1563);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          Fp x1565 = x1425 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x1566 = Fp(x1564) + Fp(x1565);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1567 = x1383 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          Fp x1568 = x1428 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1569 = Fp(x1567) + Fp(x1568);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          Fp x1570 = x1385 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1571 = Fp(x1569) + Fp(x1570);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x1572 = Fp(x1571) + Fp(x1387);
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          Fp x1573 = x1383 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x1566;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x1572;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x1573;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x1573;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x1574 = x1408 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      Fp x1575 = x1411 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x1576 = Fp(x1574) + Fp(x1575);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x1577 = Fp(x1576) + Fp(x1414);
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      Fp x1578 = Fp(x1577) + Fp(x48);
      {
        host_args.at(0) = x1578;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x1579(host_outs.at(0));
        Fp x1580(host_outs.at(1));
        Fp x1581(host_outs.at(2));
        Fp x1582(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x1579;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x1580;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x1581;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x1582;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1583(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x1583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1584(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x1584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1585(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x1585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1586(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x1586 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x1578;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x1341;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x1583;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x1584;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x1585;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x1586;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x1587 = x1397 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x1588 = Fp(x1587) + Fp(x1406);
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      Fp x1589 = Fp(x1588) + Fp(x48);
      {
        host_args.at(0) = x1589;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x1590(host_outs.at(0));
        Fp x1591(host_outs.at(1));
        Fp x1592(host_outs.at(2));
        Fp x1593(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][125 * steps + cycle] = x1590;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][126 * steps + cycle] = x1591;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][127 * steps + cycle] = x1592;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][128 * steps + cycle] = x1593;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1594(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x1594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1595(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x1595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1596(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x1596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1597(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x1597 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][122 * steps + cycle] = x1589;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][123 * steps + cycle] = x1341;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][124 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][125 * steps + cycle] = x1594;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][126 * steps + cycle] = x1595;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][127 * steps + cycle] = x1596;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][128 * steps + cycle] = x1597;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1598(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x1598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1599(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x1599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1600(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x1600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1601(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x1601 != Fp::invalid());
      host_args.at(0) = x1598;
      host_args.at(1) = x1599;
      host_args.at(2) = x1600;
      host_args.at(3) = x1601;
      host_args.at(4) = x1577;
      host_args.at(5) = x1583;
      host_args.at(6) = x1584;
      host_args.at(7) = x1585;
      host_args.at(8) = x1586;
      host_args.at(9) = x1588;
      host_args.at(10) = x1594;
      host_args.at(11) = x1595;
      host_args.at(12) = x1596;
      host_args.at(13) = x1597;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1602(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x1602 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1603 = x95 - x1602;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1604 = x1603 * x1583;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1605 = x1603 * x1584;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1606 = x1603 * x1585;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1607 = x1603 * x1586;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      Fp x1608 = x593 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      Fp x1609 = Fp(x590) + Fp(x1608);
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1610 = x583 - x78;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1611 = x1602 * x1610;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1612 = x1602 * x584;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1613 = x1602 * x587;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1614 = x1602 * x1609;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1615 = Fp(x1604) + Fp(x1611);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1616 = Fp(x1605) + Fp(x1612);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1617 = Fp(x1606) + Fp(x1613);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1618 = Fp(x1607) + Fp(x1614);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1619(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x1619 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1620 = x95 - x1619;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1621 = x1620 * x1594;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1622 = x1620 * x1595;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1623 = x1620 * x1596;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1624 = x1620 * x1597;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1625 = x1619 * x1598;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1626 = x1619 * x1599;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1627 = x1619 * x1600;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1628 = x1619 * x1601;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1629 = Fp(x1621) + Fp(x1625);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1630 = Fp(x1622) + Fp(x1626);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1631 = Fp(x1623) + Fp(x1627);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1632 = Fp(x1624) + Fp(x1628);
      host_args.at(0) = x1615;
      host_args.at(1) = x1616;
      host_args.at(2) = x1617;
      host_args.at(3) = x1618;
      host_args.at(4) = x1629;
      host_args.at(5) = x1630;
      host_args.at(6) = x1631;
      host_args.at(7) = x1632;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1633 = Fp(x1618.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x1634 = x1633 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][189 * steps + cycle] = x1634;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1635 = Fp(x1618.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x1636 = x1635 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][25 * steps + cycle] = x1636;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1637(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x1637 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1638 = x1637 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x1639(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x1639 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x1640 = x1639 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1641 = Fp(x1638) + Fp(x1640);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1642 = x1618 - x1641;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1642 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1643 = Fp(x1632.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x1644 = x1643 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][190 * steps + cycle] = x1644;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1645 = Fp(x1632.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x1646 = x1645 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][26 * steps + cycle] = x1646;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1647(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x1647 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1648 = x1647 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x1649(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x1649 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x1650 = x1649 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1651 = Fp(x1648) + Fp(x1650);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1652 = x1632 - x1651;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1652 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][191 * steps + cycle] = x1629;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][192 * steps + cycle] = x1630;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][193 * steps + cycle] = x1631;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][194 * steps + cycle] = x1632;
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1653 = Fp(x1615.asUInt32() & x1629.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1654 = Fp(x1616.asUInt32() & x1630.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1655 = Fp(x1617.asUInt32() & x1631.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1656 = Fp(x1618.asUInt32() & x1632.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][195 * steps + cycle] = x1653;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][196 * steps + cycle] = x1654;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][197 * steps + cycle] = x1655;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][198 * steps + cycle] = x1656;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1657(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x1657 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1658 = x1657 * x1615;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1659 = x1657 * x1616;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1660 = x1657 * x1617;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1661 = x1657 * x1618;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1662 = Fp(x1658) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1663 = Fp(x1659) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1664 = Fp(x1660) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1665 = Fp(x1661) + Fp(x91);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1666(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x1666 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1667 = x1666 * x1629;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1668 = x1666 * x1630;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1669 = x1666 * x1631;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1670 = x1666 * x1632;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1671 = Fp(x1662) + Fp(x1667);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1672 = Fp(x1663) + Fp(x1668);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1673 = Fp(x1664) + Fp(x1669);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1674 = Fp(x1665) + Fp(x1670);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1675(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x1675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1676(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x1676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1677(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x1677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1678(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x1678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1679(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x1679 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1680 = x1675 * x1676;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1681 = x1675 * x1677;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1682 = x1675 * x1678;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x1683 = x1675 * x1679;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1684 = Fp(x1671) + Fp(x1680);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1685 = Fp(x1672) + Fp(x1681);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1686 = Fp(x1673) + Fp(x1682);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x1687 = Fp(x1674) + Fp(x1683);
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x1688 = x1685 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x1689 = Fp(x1684) + Fp(x1688);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1690 = Fp(x1689.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][27 * steps + cycle] = x1690;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x1691(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x1691 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1692 = x1689 - x1691;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1693 = x1692 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1694 = Fp(x1693.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][28 * steps + cycle] = x1694;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x1695(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x1695 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1696 = x1693 - x1695;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1697 = x1696 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][86 * steps + cycle] = x1697;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1698(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x1698 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x1699 = Fp(x1698) + Fp(x1686);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x1700 = x1687 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x1701 = Fp(x1699) + Fp(x1700);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1702 = Fp(x1701.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][29 * steps + cycle] = x1702;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x1703(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x1703 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1704 = x1701 - x1703;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1705 = x1704 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1706 = Fp(x1705.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][30 * steps + cycle] = x1706;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x1707(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x1707 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1708 = x1705 - x1707;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x1709 = x1708 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][87 * steps + cycle] = x1709;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1710 = Fp(x1707.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x1711 = x1710 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][199 * steps + cycle] = x1711;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1712 = Fp(x1707.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x1713 = x1712 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][31 * steps + cycle] = x1713;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1714(args[2][199 * steps + ((cycle - 0) & mask)]);
      assert(x1714 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1715 = x1714 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x1716(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x1716 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x1717 = x1716 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x1718 = Fp(x1715) + Fp(x1717);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1719 = x1707 - x1718;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1719 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1720 = x95 - x1647;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x1721 = x1637 * x1720;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1722 = x95 - x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x1723 = x1721 * x1722;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1724 = x95 - x1637;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      Fp x1725 = x1724 * x1647;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      Fp x1726 = x1725 * x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x1727 = Fp(x1723) + Fp(x1726);
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      args[2][200 * steps + cycle] = x1727;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x1728(args[2][200 * steps + ((cycle - 0) & mask)]);
      assert(x1728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      Fp x1729 = Fp(x1728) + Fp(x1714);
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      Fp x1730 = x1728 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      Fp x1731 = x1730 * x1714;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1732 = x1729 - x1731;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      args[2][201 * steps + cycle] = x1732;
      // loc("cirgen/components/u32.cpp":137:26)
      Fp x1733 = x1695 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      Fp x1734 = Fp(x1691) + Fp(x1733);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1735 = (x1734 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][202 * steps + cycle] = x1735;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1736 = inv(x1734);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][203 * steps + cycle] = x1736;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1737(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x1737 != Fp::invalid());
      if (x1737 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1734 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1738 = x95 - x1737;
      if (x1738 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1739(args[2][203 * steps + ((cycle - 0) & mask)]);
        assert(x1739 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x1740 = x1734 * x1739;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1741 = x1740 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1741 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      Fp x1742 = x1707 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x1743 = Fp(x1703) + Fp(x1742);
      // loc("cirgen/components/u32.cpp":138:47)
      Fp x1744 = x1738 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x1745 = Fp(x1743) + Fp(x1744);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1746 = (x1745 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][204 * steps + cycle] = x1746;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1747 = inv(x1745);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][205 * steps + cycle] = x1747;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1748(args[2][204 * steps + ((cycle - 0) & mask)]);
      assert(x1748 != Fp::invalid());
      if (x1748 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1745 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1749 = x95 - x1748;
      if (x1749 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1750(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x1750 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x1751 = x1745 * x1750;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1752 = x1751 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1752 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1753(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x1753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1754(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x1754 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1755 = x95 - x1754;
      host_args.at(0) = x1691;
      host_args.at(1) = x1695;
      host_args.at(2) = x1703;
      host_args.at(3) = x1707;
      host_args.at(4) = x1748;
      host_args.at(5) = x1753;
      host_args.at(6) = x1755;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x1756 = x1422 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      Fp x1757 = x1425 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x1758 = Fp(x1756) + Fp(x1757);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x1759 = Fp(x1758) + Fp(x1428);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1760 = (x1759 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][206 * steps + cycle] = x1760;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1761 = inv(x1759);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][207 * steps + cycle] = x1761;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x1762(args[2][206 * steps + ((cycle - 0) & mask)]);
      assert(x1762 != Fp::invalid());
      if (x1762 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1759 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1763 = x95 - x1762;
      if (x1763 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1764(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x1764 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x1765 = x1759 * x1764;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1766 = x1765 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1766 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      Fp x1767 = Fp(x596) + Fp(x78);
      // loc("cirgen/components/u32.cpp":62:25)
      Fp x1768 = x1599 * x90;
      // loc("cirgen/components/u32.cpp":62:13)
      Fp x1769 = Fp(x1598) + Fp(x1768);
      // loc("cirgen/components/u32.cpp":62:49)
      Fp x1770 = x1600 * x80;
      // loc("cirgen/components/u32.cpp":62:13)
      Fp x1771 = Fp(x1769) + Fp(x1770);
      // loc("cirgen/components/u32.cpp":65:17)
      Fp x1772 = x1601 * x47;
      // loc("cirgen/components/u32.cpp":65:16)
      Fp x1773 = x1772 * x46;
      // loc("cirgen/components/u32.cpp":65:10)
      Fp x1774 = Fp(x1771) + Fp(x1773);
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      Fp x1775 = Fp(x596) + Fp(x1774);
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      Fp x1776 = x1748 * x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      Fp x1777 = x1749 * x1767;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      Fp x1778 = Fp(x1776) + Fp(x1777);
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      Fp x1779 = x1748 * x1767;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      Fp x1780 = x1749 * x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      Fp x1781 = Fp(x1779) + Fp(x1780);
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      Fp x1782 = x1753 * x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1783 = x95 - x1753;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      Fp x1784 = x1783 * x1767;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      Fp x1785 = Fp(x1782) + Fp(x1784);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      Fp x1786(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x1786 != Fp::invalid());
      if (x1786 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1787 = x1430 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1787 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1788 = x1419 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1788 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1789 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x1790 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1791 = Fp(x1789) + Fp(x1790);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1792 = Fp(x1791) + Fp(x1588);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1793 = x1383 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x1794 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1795 = Fp(x1793) + Fp(x1794);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1796 = Fp(x1795) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x1797 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1792;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x1796;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x1797;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x1797;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        args[2][187 * steps + cycle] = x50;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x72;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1798 = Fp(x1767) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1799 = Fp(x1798.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1799;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1800(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1800 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1801 = x1798 - x1800;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1802 = x1801 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1803 = Fp(x1802.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1803;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1804(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1804 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1805 = x1802 - x1804;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1806 = x1805 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1807 = Fp(x1806.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1807;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1808(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1808 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1809 = x1806 - x1808;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1810 = x1809 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1811 = Fp(x1810.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1811;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1812(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1812 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1813 = x1810 - x1812;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1814 = x1813 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1814;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1815(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1816 = x95 - x1815;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1817 = x1815 * x1816;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1817;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1818(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1819 = x92 - x1815;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1820 = x1818 * x1819;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1820 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1821(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1821 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        args[2][93 * steps + cycle] = x1821;
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          Fp x1822 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1691;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1695;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1703;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1707;
          {
            host_args.at(0) = x1822;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1823(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1823 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1824(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1824 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1825(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1825 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1826(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1826 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1822;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1823;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1824;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1825;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1826;
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      Fp x1827(args[2][172 * steps + ((cycle - 0) & mask)]);
      assert(x1827 != Fp::invalid());
      if (x1827 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1828 = x1430 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1828 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1829 = x1419 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1829 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1830 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x1831 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1832 = Fp(x1830) + Fp(x1831);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1833 = Fp(x1832) + Fp(x1588);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1834 = x1383 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x1835 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1836 = Fp(x1834) + Fp(x1835);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1837 = Fp(x1836) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x1838 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1833;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x1837;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x1838;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x1838;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        args[2][187 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x72;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1839 = Fp(x1767) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1840 = Fp(x1839.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1840;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1841(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1841 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1842 = x1839 - x1841;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1843 = x1842 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1844 = Fp(x1843.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1844;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1845(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1845 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1846 = x1843 - x1845;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1847 = x1846 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1848 = Fp(x1847.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1848;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1849(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1849 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1850 = x1847 - x1849;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1851 = x1850 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1852 = Fp(x1851.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1852;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1853(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1853 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1854 = x1851 - x1853;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1855 = x1854 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1855;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1856(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1856 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1857 = x95 - x1856;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1858 = x1856 * x1857;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1858;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1859(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1860 = x92 - x1856;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1861 = x1859 * x1860;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1861 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1862(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1862 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        args[2][93 * steps + cycle] = x1862;
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          Fp x1863 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1691;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1695;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1703;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1707;
          {
            host_args.at(0) = x1863;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1864(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1864 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1865(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1865 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1866(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1866 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1867(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1867 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1863;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1864;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1865;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1866;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1867;
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      Fp x1868(args[2][173 * steps + ((cycle - 0) & mask)]);
      assert(x1868 != Fp::invalid());
      if (x1868 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1869 = x1430 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1869 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1870 = x1419 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1870 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1871 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x1872 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1873 = Fp(x1871) + Fp(x1872);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1874 = Fp(x1873) + Fp(x1588);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1875 = x1383 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x1876 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1877 = Fp(x1875) + Fp(x1876);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1878 = Fp(x1877) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x1879 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1874;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x1878;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x1879;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x1879;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        args[2][185 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        args[2][186 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        args[2][187 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x72;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1880 = Fp(x1767) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1881 = Fp(x1880.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1881;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1882(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1882 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1883 = x1880 - x1882;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1884 = x1883 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1885 = Fp(x1884.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1885;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1886(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1886 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1887 = x1884 - x1886;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1888 = x1887 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1889 = Fp(x1888.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1889;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1890(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1890 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1891 = x1888 - x1890;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1892 = x1891 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1893 = Fp(x1892.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1893;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1894(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1894 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1895 = x1892 - x1894;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1896 = x1895 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1896;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1897(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1897 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1898 = x95 - x1897;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1899 = x1897 * x1898;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1899;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1900(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1900 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1901 = x92 - x1897;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1902 = x1900 * x1901;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1902 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1903(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1903 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        args[2][93 * steps + cycle] = x1903;
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          Fp x1904 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1691;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1695;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1703;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1707;
          {
            host_args.at(0) = x1904;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1905(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1905 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1906(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1906 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1907(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1907 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1908(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1908 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1904;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1905;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1906;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1907;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1908;
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      Fp x1909(args[2][174 * steps + ((cycle - 0) & mask)]);
      assert(x1909 != Fp::invalid());
      if (x1909 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1910 = x1430 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1910 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1911 = x1419 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1911 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1912 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x1913 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1914 = Fp(x1912) + Fp(x1913);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1915 = Fp(x1914) + Fp(x1588);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1916 = x1383 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x1917 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1918 = Fp(x1916) + Fp(x1917);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1919 = Fp(x1918) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x1920 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1915;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x1919;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x1920;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x1920;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1921 = Fp(x1767) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1922 = Fp(x1921.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1922;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1923(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1923 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1924 = x1921 - x1923;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1925 = x1924 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1926 = Fp(x1925.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1926;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1927(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1927 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1928 = x1925 - x1927;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1929 = x1928 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1930 = Fp(x1929.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1930;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1931(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1931 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1932 = x1929 - x1931;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1933 = x1932 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1934 = Fp(x1933.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1934;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1935(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1935 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1936 = x1933 - x1935;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1937 = x1936 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1937;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1938(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1939 = x95 - x1938;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1940 = x1938 * x1939;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1940;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1941(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1942 = x92 - x1938;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1943 = x1941 * x1942;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1943 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1944(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1944 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        args[2][93 * steps + cycle] = x1944;
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1753;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          Fp x1945 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1753;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x94;
          {
            host_args.at(0) = x1945;
            host_args.at(1) = x1753;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1946(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1946 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1947(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1947 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1948(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1948 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1949(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1949 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1945;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1946;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1947;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1948;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1949;
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      Fp x1950(args[2][175 * steps + ((cycle - 0) & mask)]);
      assert(x1950 != Fp::invalid());
      if (x1950 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1951 = x1430 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1951 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1952 = x1419 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1952 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1953 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x1954 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1955 = Fp(x1953) + Fp(x1954);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x1956 = Fp(x1955) + Fp(x1588);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1957 = x1383 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x1958 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1959 = Fp(x1957) + Fp(x1958);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x1960 = Fp(x1959) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x1961 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1956;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x1960;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x1961;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x1961;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x1962 = Fp(x1767) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1963 = Fp(x1962.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x1963;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1964(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x1964 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1965 = x1962 - x1964;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1966 = x1965 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1967 = Fp(x1966.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x1967;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x1968(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x1968 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1969 = x1966 - x1968;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1970 = x1969 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1971 = Fp(x1970.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x1971;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x1972(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x1972 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1973 = x1970 - x1972;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x1974 = x1973 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1975 = Fp(x1974.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x1975;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1976(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x1976 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1977 = x1974 - x1976;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x1978 = x1977 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x1978;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1979(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x1979 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1980 = x95 - x1979;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x1981 = x1979 * x1980;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x1981;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x1982(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x1982 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1983 = x92 - x1979;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x1984 = x1982 * x1983;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1984 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x1985(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x1985 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        args[2][93 * steps + cycle] = x1985;
        if (x1763 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1755;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          Fp x1986 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1755;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x94;
          {
            host_args.at(0) = x1986;
            host_args.at(1) = x1755;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1987(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x1987 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1988(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x1988 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1989(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x1989 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x1990(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x1990 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x1986;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1987;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1988;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1989;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1990;
        }
        if (x1762 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      Fp x1991(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x1991 != Fp::invalid());
      if (x1991 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x1992 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1992 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1419 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x1993 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        Fp x1994 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x1995 = Fp(x1993) + Fp(x1994);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x1996 = Fp(x1995) + Fp(x1756);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x1997 = Fp(x1996) + Fp(x1757);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x1998 = x1383 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        Fp x1999 = x1428 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2000 = Fp(x1998) + Fp(x1999);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        Fp x2001 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2002 = Fp(x2000) + Fp(x2001);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2003 = Fp(x2002) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        Fp x2004 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x1997;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2003;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2004;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2004;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2005 = Fp(x1778) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2006 = Fp(x2005.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2006;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2007(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2007 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2008 = x2005 - x2007;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2009 = x2008 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2010 = Fp(x2009.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2010;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2011(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2011 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2012 = x2009 - x2011;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2013 = x2012 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2014 = Fp(x2013.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2014;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2015(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2015 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2016 = x2013 - x2015;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2017 = x2016 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2018 = Fp(x2017.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2018;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2019(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2019 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2020 = x2017 - x2019;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2021 = x2020 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2021;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2022(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2022 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2023 = x95 - x2022;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2024 = x2022 * x2023;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2024;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2025(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2026 = x92 - x2022;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2027 = x2025 * x2026;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2027 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2028(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2028 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        args[2][93 * steps + cycle] = x2028;
        if (x94 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          Fp x2029 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1691;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1695;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1703;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1707;
          {
            host_args.at(0) = x2029;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2030(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2030 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2031(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2031 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2032(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2032 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2033(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2033 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2029;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2030;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2031;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2032;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2033;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        Fp x2034 = Fp(x1762) + Fp(x95);
        if (x2034 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      Fp x2035(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x2035 != Fp::invalid());
      if (x2035 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2036 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2036 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2037 = x1419 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2037 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2038 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        Fp x2039 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2040 = Fp(x2038) + Fp(x2039);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2041 = Fp(x2040) + Fp(x1756);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2042 = Fp(x2041) + Fp(x1757);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2043 = x1383 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        Fp x2044 = x1428 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2045 = Fp(x2043) + Fp(x2044);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        Fp x2046 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2047 = Fp(x2045) + Fp(x2046);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2048 = Fp(x2047) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        Fp x2049 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2042;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2048;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2049;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2049;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2050 = Fp(x1781) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2051 = Fp(x2050.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2051;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2052(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2052 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2053 = x2050 - x2052;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2054 = x2053 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2055 = Fp(x2054.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2055;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2056(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2056 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2057 = x2054 - x2056;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2058 = x2057 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2059 = Fp(x2058.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2059;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2060(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2060 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2061 = x2058 - x2060;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2062 = x2061 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2063 = Fp(x2062.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2063;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2064(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2064 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2065 = x2062 - x2064;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2066 = x2065 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2066;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2067(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2067 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2068 = x95 - x2067;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2069 = x2067 * x2068;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2069;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2070(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2070 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2071 = x92 - x2067;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2072 = x2070 * x2071;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2072 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2073(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2073 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        args[2][93 * steps + cycle] = x2073;
        if (x94 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          Fp x2074 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1691;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1695;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1703;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1707;
          {
            host_args.at(0) = x2074;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2075(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2075 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2076(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2076 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2077(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2077 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2078(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2078 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2074;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2075;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2076;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2077;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2078;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        Fp x2079 = Fp(x1762) + Fp(x95);
        if (x2079 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      Fp x2080(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x2080 != Fp::invalid());
      if (x2080 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2081 = x1430 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2081 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2082 = x1419 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2082 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2083 = x1390 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        Fp x2084 = x1393 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2085 = Fp(x2083) + Fp(x2084);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2086 = Fp(x2085) + Fp(x1756);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2087 = Fp(x2086) + Fp(x1757);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2088 = x1383 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        Fp x2089 = x1428 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2090 = Fp(x2088) + Fp(x2089);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        Fp x2091 = x1385 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2092 = Fp(x2090) + Fp(x2091);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2093 = Fp(x2092) + Fp(x1387);
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        Fp x2094 = x1383 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2087;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2093;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2094;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2094;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2095 = Fp(x1785) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2096 = Fp(x2095.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2096;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2097(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2097 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2098 = x2095 - x2097;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2099 = x2098 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2100 = Fp(x2099.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2100;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2101(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2101 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2102 = x2099 - x2101;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2103 = x2102 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2104 = Fp(x2103.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2104;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2105(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2105 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2106 = x2103 - x2105;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2107 = x2106 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2108 = Fp(x2107.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2108;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2109(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2109 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2110 = x2107 - x2109;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2111 = x2110 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2111;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2112(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2112 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2113 = x95 - x2112;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2114 = x2112 * x2113;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2114;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2115(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2115 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2116 = x92 - x2112;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2117 = x2115 * x2116;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2117 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2118(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2118 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        args[2][93 * steps + cycle] = x2118;
        if (x94 != 0) {
          host_args.at(0) = x1759;
          host_args.at(1) = x1691;
          host_args.at(2) = x1695;
          host_args.at(3) = x1703;
          host_args.at(4) = x1707;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          Fp x2119 = Fp(x1759) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x1691;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x1695;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x1703;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x1707;
          {
            host_args.at(0) = x2119;
            host_args.at(1) = x1691;
            host_args.at(2) = x1695;
            host_args.at(3) = x1703;
            host_args.at(4) = x1707;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2120(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2120 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2121(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2121 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2122(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2122 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2123(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2123 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2119;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x1341;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2120;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2121;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2122;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2123;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        Fp x2124 = Fp(x1762) + Fp(x95);
        if (x2124 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
    Fp x2125(args[2][96 * steps + ((cycle - 0) & mask)]);
    assert(x2125 != Fp::invalid());
    if (x2125 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2126(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x2126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      Fp x2127 = x596 * x76;
      {
        host_args.at(0) = x2127;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x2128(host_outs.at(0));
        Fp x2129(host_outs.at(1));
        Fp x2130(host_outs.at(2));
        Fp x2131(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x2128;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x2129;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x2130;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x2131;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2132(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x2132 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2133(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x2133 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2134(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x2134 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2135(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x2135 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x2127;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x2126;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x2132;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x2133;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x2134;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x2135;
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2136 = Fp(x2135.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        Fp x2137 = x2136 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x2137;
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2138 = Fp(x2135.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        Fp x2139 = x2138 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x2139;
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2140 = Fp(x2135.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        Fp x2141 = x2140 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x2141;
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2142 = Fp(x2135.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        Fp x2143 = x2142 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x2143;
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2144 = Fp(x2135.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        Fp x2145 = x2144 * x56;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][78 * steps + cycle] = x2145;
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2146 = Fp(x2135.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x2146;
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2147 = Fp(x2134.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        Fp x2148 = x2147 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x2148;
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2149 = Fp(x2134.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        Fp x2150 = x2149 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x2150;
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2151 = Fp(x2134.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        Fp x2152 = x2151 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x2152;
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2153 = Fp(x2134.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        Fp x2154 = x2153 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][82 * steps + cycle] = x2154;
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2155 = Fp(x2134.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x2155;
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2156 = Fp(x2133.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        Fp x2157 = x2156 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x2157;
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2158 = Fp(x2133.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        Fp x2159 = x2158 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x2159;
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2160 = Fp(x2133.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        Fp x2161 = x2160 * x58;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][83 * steps + cycle] = x2161;
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2162 = Fp(x2133.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        Fp x2163 = x2162 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][85 * steps + cycle] = x2163;
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2164 = Fp(x2133.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][84 * steps + cycle] = x2164;
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2165 = Fp(x2132.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        Fp x2166 = x2165 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x2166;
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2167 = Fp(x2132.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        args[2][170 * steps + cycle] = x2167;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2168(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x2168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x2169 = x2168 * x55;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2170(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x2170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2171 = x2170 * x59;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2172(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x2172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      Fp x2173 = x2172 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2174 = Fp(x2171) + Fp(x2173);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2175(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x2175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      Fp x2176 = x2175 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2177 = Fp(x2174) + Fp(x2176);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2178(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x2178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2179 = Fp(x2177) + Fp(x2178);
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x2180 = Fp(x2169) + Fp(x2179);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x2181 = x2180 * x92;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2182(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x2182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x2183 = Fp(x2181) + Fp(x2182);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2184 = x2135 - x2183;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2185(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x2185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x2186 = x2185 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2187(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x2187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      Fp x2188 = x2187 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x2189 = Fp(x2186) + Fp(x2188);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2190(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x2190 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x2191 = Fp(x2189) + Fp(x2190);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x2192 = x2191 * x59;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2193(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x2193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      Fp x2194 = x2193 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x2195 = Fp(x2192) + Fp(x2194);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2196(args[2][81 * steps + ((cycle - 0) & mask)]);
      assert(x2196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x2197 = Fp(x2195) + Fp(x2196);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2198 = x2134 - x2197;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2198 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2199(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x2199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2200 = x2199 * x64;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2201(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x2201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x2202 = x2201 * x78;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2203(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x2203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x2204 = Fp(x2202) + Fp(x2203);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      Fp x2205 = x2204 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2206 = Fp(x2200) + Fp(x2205);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2207(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x2207 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      Fp x2208 = x2207 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2209 = Fp(x2206) + Fp(x2208);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2210(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x2210 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2211 = Fp(x2209) + Fp(x2210);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2212 = x2133 - x2211;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2212 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2213(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x2213 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x2214 = x2213 * x64;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x2215(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x2215 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x2216 = Fp(x2214) + Fp(x2215);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2217 = x2132 - x2216;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2217 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2132;
        host_args.at(1) = x2133;
        host_args.at(2) = x2134;
        host_args.at(3) = x2135;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        Fp x2218(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2219 = (x2218 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][171 * steps + cycle] = x2219;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2220 = x2218 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2221 = (x2220 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][172 * steps + cycle] = x2221;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2222 = x2218 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2223 = (x2222 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][173 * steps + cycle] = x2223;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2224 = x2218 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2225 = (x2224 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][174 * steps + cycle] = x2225;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2226 = x2218 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2227 = (x2226 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][175 * steps + cycle] = x2227;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2228 = x2218 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2229 = (x2228 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][176 * steps + cycle] = x2229;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2230 = x2218 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2231 = (x2230 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][177 * steps + cycle] = x2231;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2232 = x2218 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2233 = (x2232 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][178 * steps + cycle] = x2233;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2234(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x2234 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2235(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x2235 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2236 = x2235 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2237 = Fp(x2234) + Fp(x2236);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2238(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x2238 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2239 = x2238 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2240 = Fp(x2237) + Fp(x2239);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2241(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x2241 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2242 = x2241 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2243 = Fp(x2240) + Fp(x2242);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2244(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x2244 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2245 = x2244 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2246 = Fp(x2243) + Fp(x2245);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2247(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x2247 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2248 = x2247 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2249 = Fp(x2246) + Fp(x2248);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2250(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x2250 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2251 = x2250 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2252 = Fp(x2249) + Fp(x2251);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2253 = x2252 - x2218;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2253 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        Fp x2254(args[2][171 * steps + ((cycle - 0) & mask)]);
        assert(x2254 != Fp::invalid());
        if (x2254 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2255 = x2175 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          Fp x2256 = x2178 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2257 = Fp(x2255) + Fp(x2256);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          Fp x2258 = x2207 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2259 = Fp(x2257) + Fp(x2258);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          Fp x2260 = x2210 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2261 = Fp(x2259) + Fp(x2260);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2262 = x2168 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          Fp x2263 = x2213 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2264 = Fp(x2262) + Fp(x2263);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          Fp x2265 = x2170 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2266 = Fp(x2264) + Fp(x2265);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2267 = Fp(x2266) + Fp(x2172);
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          Fp x2268 = x2168 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x2261;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2267;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2268;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2268;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        Fp x2269(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x2269 != Fp::invalid());
        if (x2269 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2270 = x2175 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          Fp x2271 = x2178 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2272 = Fp(x2270) + Fp(x2271);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          Fp x2273 = x2207 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2274 = Fp(x2272) + Fp(x2273);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          Fp x2275 = x2210 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2276 = Fp(x2274) + Fp(x2275);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2277 = x2168 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          Fp x2278 = x2213 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2279 = Fp(x2277) + Fp(x2278);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          Fp x2280 = x2170 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2281 = Fp(x2279) + Fp(x2280);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2282 = Fp(x2281) + Fp(x2172);
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          Fp x2283 = x2168 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x2276;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2282;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2283;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2283;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        Fp x2284(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x2284 != Fp::invalid());
        if (x2284 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2285 = x2175 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          Fp x2286 = x2178 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2287 = Fp(x2285) + Fp(x2286);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          Fp x2288 = x2207 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2289 = Fp(x2287) + Fp(x2288);
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          Fp x2290 = x2210 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          Fp x2291 = Fp(x2289) + Fp(x2290);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2292 = x2168 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          Fp x2293 = x2213 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2294 = Fp(x2292) + Fp(x2293);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          Fp x2295 = x2170 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2296 = Fp(x2294) + Fp(x2295);
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          Fp x2297 = Fp(x2296) + Fp(x2172);
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          Fp x2298 = x2168 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x2291;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2297;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2298;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2298;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          args[2][186 * steps + cycle] = x51;
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        Fp x2299(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x2299 != Fp::invalid());
        if (x2299 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          Fp x2300 = x2175 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          Fp x2301 = x2178 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          Fp x2302 = Fp(x2300) + Fp(x2301);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2303 = x2182 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2304 = Fp(x2303) + Fp(x2191);
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          Fp x2305 = Fp(x2302) + Fp(x2304);
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2306 = x2305 - x2190;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          Fp x2307 = x2190 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          Fp x2308 = Fp(x2206) + Fp(x2307);
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          Fp x2309 = x2170 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          Fp x2310 = Fp(x2308) + Fp(x2309);
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          Fp x2311 = Fp(x2310) + Fp(x2172);
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          Fp x2312 = x2168 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          Fp x2313 = Fp(x2312) + Fp(x2194);
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          Fp x2314 = Fp(x2313) + Fp(x2196);
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          Fp x2315 = x2168 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x2306;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2311;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2314;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2315;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        Fp x2316(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x2316 != Fp::invalid());
        if (x2316 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2317 = x2175 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x2318 = x2178 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2319 = Fp(x2317) + Fp(x2318);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2320 = x2182 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2321 = Fp(x2320) + Fp(x2191);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2322 = Fp(x2319) + Fp(x2321);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2323 = x2168 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x2324 = x2170 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2325 = Fp(x2323) + Fp(x2324);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2326 = Fp(x2325) + Fp(x2172);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x2327 = x2168 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x2322;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2326;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2327;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2327;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        Fp x2328(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x2328 != Fp::invalid());
        if (x2328 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2206;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2197;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2183;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          args[2][185 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        Fp x2329(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x2329 != Fp::invalid());
        if (x2329 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][179 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][180 * steps + cycle] = x2206;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][181 * steps + cycle] = x2197;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][182 * steps + cycle] = x2183;
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          args[2][183 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          args[2][184 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          args[2][185 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          args[2][186 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          args[2][187 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          args[2][188 * steps + cycle] = x75;
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x2330 = x2193 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      Fp x2331 = x2196 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x2332 = Fp(x2330) + Fp(x2331);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x2333 = Fp(x2332) + Fp(x2199);
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      Fp x2334 = Fp(x2333) + Fp(x48);
      {
        host_args.at(0) = x2334;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x2335(host_outs.at(0));
        Fp x2336(host_outs.at(1));
        Fp x2337(host_outs.at(2));
        Fp x2338(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x2335;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x2336;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x2337;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x2338;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2339(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x2339 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2340(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x2340 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2341(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x2341 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2342(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x2342 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x2334;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x2126;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x2339;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x2340;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x2341;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x2342;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x2343 = x2182 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x2344 = Fp(x2343) + Fp(x2191);
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      Fp x2345 = Fp(x2344) + Fp(x48);
      {
        host_args.at(0) = x2345;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x2346(host_outs.at(0));
        Fp x2347(host_outs.at(1));
        Fp x2348(host_outs.at(2));
        Fp x2349(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][125 * steps + cycle] = x2346;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][126 * steps + cycle] = x2347;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][127 * steps + cycle] = x2348;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][128 * steps + cycle] = x2349;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2350(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x2350 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2351(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x2351 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2352(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x2352 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2353(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x2353 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][122 * steps + cycle] = x2345;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][123 * steps + cycle] = x2126;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][124 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][125 * steps + cycle] = x2350;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][126 * steps + cycle] = x2351;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][127 * steps + cycle] = x2352;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][128 * steps + cycle] = x2353;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2354(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x2354 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2355(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x2355 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2356(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x2356 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2357(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x2357 != Fp::invalid());
      host_args.at(0) = x2354;
      host_args.at(1) = x2355;
      host_args.at(2) = x2356;
      host_args.at(3) = x2357;
      host_args.at(4) = x2333;
      host_args.at(5) = x2339;
      host_args.at(6) = x2340;
      host_args.at(7) = x2341;
      host_args.at(8) = x2342;
      host_args.at(9) = x2344;
      host_args.at(10) = x2350;
      host_args.at(11) = x2351;
      host_args.at(12) = x2352;
      host_args.at(13) = x2353;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2358(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x2358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2359 = x95 - x2358;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2360 = x2359 * x2339;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2361 = x2359 * x2340;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2362 = x2359 * x2341;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2363 = x2359 * x2342;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      Fp x2364 = x593 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      Fp x2365 = Fp(x590) + Fp(x2364);
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2366 = x583 - x78;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2367 = x2358 * x2366;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2368 = x2358 * x584;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2369 = x2358 * x587;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2370 = x2358 * x2365;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2371 = Fp(x2360) + Fp(x2367);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2372 = Fp(x2361) + Fp(x2368);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2373 = Fp(x2362) + Fp(x2369);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2374 = Fp(x2363) + Fp(x2370);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2375(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x2375 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2376 = x95 - x2375;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2377 = x2376 * x2350;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2378 = x2376 * x2351;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2379 = x2376 * x2352;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2380 = x2376 * x2353;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2381 = x2375 * x2354;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2382 = x2375 * x2355;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2383 = x2375 * x2356;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2384 = x2375 * x2357;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2385 = Fp(x2377) + Fp(x2381);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2386 = Fp(x2378) + Fp(x2382);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2387 = Fp(x2379) + Fp(x2383);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2388 = Fp(x2380) + Fp(x2384);
      host_args.at(0) = x2371;
      host_args.at(1) = x2372;
      host_args.at(2) = x2373;
      host_args.at(3) = x2374;
      host_args.at(4) = x2385;
      host_args.at(5) = x2386;
      host_args.at(6) = x2387;
      host_args.at(7) = x2388;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2389 = Fp(x2374.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x2390 = x2389 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][189 * steps + cycle] = x2390;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2391 = Fp(x2374.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x2392 = x2391 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][25 * steps + cycle] = x2392;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2393(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x2393 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x2394 = x2393 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x2395(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x2395 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x2396 = x2395 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x2397 = Fp(x2394) + Fp(x2396);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2398 = x2374 - x2397;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2398 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2399 = Fp(x2388.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x2400 = x2399 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][190 * steps + cycle] = x2400;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2401 = Fp(x2388.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x2402 = x2401 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][26 * steps + cycle] = x2402;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2403(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x2403 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x2404 = x2403 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x2405(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x2405 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x2406 = x2405 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x2407 = Fp(x2404) + Fp(x2406);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2408 = x2388 - x2407;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2408 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][191 * steps + cycle] = x2385;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][192 * steps + cycle] = x2386;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][193 * steps + cycle] = x2387;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][194 * steps + cycle] = x2388;
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2409 = Fp(x2371.asUInt32() & x2385.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2410 = Fp(x2372.asUInt32() & x2386.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2411 = Fp(x2373.asUInt32() & x2387.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2412 = Fp(x2374.asUInt32() & x2388.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][195 * steps + cycle] = x2409;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][196 * steps + cycle] = x2410;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][197 * steps + cycle] = x2411;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][198 * steps + cycle] = x2412;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2413(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x2413 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2414 = x2413 * x2371;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2415 = x2413 * x2372;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2416 = x2413 * x2373;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2417 = x2413 * x2374;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2418 = Fp(x2414) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2419 = Fp(x2415) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2420 = Fp(x2416) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2421 = Fp(x2417) + Fp(x91);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2422(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x2422 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2423 = x2422 * x2385;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2424 = x2422 * x2386;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2425 = x2422 * x2387;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2426 = x2422 * x2388;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2427 = Fp(x2418) + Fp(x2423);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2428 = Fp(x2419) + Fp(x2424);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2429 = Fp(x2420) + Fp(x2425);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2430 = Fp(x2421) + Fp(x2426);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2431(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x2431 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2432(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x2432 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2433(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x2433 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2434(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x2434 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2435(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x2435 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2436 = x2431 * x2432;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2437 = x2431 * x2433;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2438 = x2431 * x2434;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x2439 = x2431 * x2435;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2440 = Fp(x2427) + Fp(x2436);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2441 = Fp(x2428) + Fp(x2437);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2442 = Fp(x2429) + Fp(x2438);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x2443 = Fp(x2430) + Fp(x2439);
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x2444 = x2441 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x2445 = Fp(x2440) + Fp(x2444);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2446 = Fp(x2445.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][27 * steps + cycle] = x2446;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x2447(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x2447 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2448 = x2445 - x2447;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x2449 = x2448 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2450 = Fp(x2449.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][28 * steps + cycle] = x2450;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x2451(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x2451 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2452 = x2449 - x2451;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x2453 = x2452 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][86 * steps + cycle] = x2453;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2454(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x2454 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x2455 = Fp(x2454) + Fp(x2442);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x2456 = x2443 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x2457 = Fp(x2455) + Fp(x2456);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2458 = Fp(x2457.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][29 * steps + cycle] = x2458;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x2459(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x2459 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2460 = x2457 - x2459;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x2461 = x2460 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2462 = Fp(x2461.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][30 * steps + cycle] = x2462;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x2463(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x2463 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2464 = x2461 - x2463;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x2465 = x2464 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][87 * steps + cycle] = x2465;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2466 = Fp(x2463.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x2467 = x2466 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][199 * steps + cycle] = x2467;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2468 = Fp(x2463.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x2469 = x2468 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][31 * steps + cycle] = x2469;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2470(args[2][199 * steps + ((cycle - 0) & mask)]);
      assert(x2470 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x2471 = x2470 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x2472(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x2472 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x2473 = x2472 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x2474 = Fp(x2471) + Fp(x2473);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2475 = x2463 - x2474;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2475 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2476 = x95 - x2403;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x2477 = x2393 * x2476;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2478 = x95 - x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x2479 = x2477 * x2478;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2480 = x95 - x2393;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      Fp x2481 = x2480 * x2403;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      Fp x2482 = x2481 * x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      Fp x2483 = Fp(x2479) + Fp(x2482);
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      args[2][200 * steps + cycle] = x2483;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x2484(args[2][200 * steps + ((cycle - 0) & mask)]);
      assert(x2484 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      Fp x2485 = Fp(x2484) + Fp(x2470);
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      Fp x2486 = x2484 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      Fp x2487 = x2486 * x2470;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2488 = x2485 - x2487;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      args[2][201 * steps + cycle] = x2488;
      // loc("cirgen/components/u32.cpp":137:26)
      Fp x2489 = x2451 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      Fp x2490 = Fp(x2447) + Fp(x2489);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2491 = (x2490 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][202 * steps + cycle] = x2491;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2492 = inv(x2490);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][203 * steps + cycle] = x2492;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2493(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x2493 != Fp::invalid());
      if (x2493 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2490 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2494 = x95 - x2493;
      if (x2494 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2495(args[2][203 * steps + ((cycle - 0) & mask)]);
        assert(x2495 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x2496 = x2490 * x2495;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2497 = x2496 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      Fp x2498 = x2463 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x2499 = Fp(x2459) + Fp(x2498);
      // loc("cirgen/components/u32.cpp":138:47)
      Fp x2500 = x2494 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x2501 = Fp(x2499) + Fp(x2500);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2502 = (x2501 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][204 * steps + cycle] = x2502;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2503 = inv(x2501);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][205 * steps + cycle] = x2503;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2504(args[2][204 * steps + ((cycle - 0) & mask)]);
      assert(x2504 != Fp::invalid());
      if (x2504 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2501 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2505 = x95 - x2504;
      if (x2505 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2506(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x2506 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x2507 = x2501 * x2506;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2508 = x2507 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2508 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2509(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x2509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2510(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x2510 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2511 = x95 - x2510;
      host_args.at(0) = x2447;
      host_args.at(1) = x2451;
      host_args.at(2) = x2459;
      host_args.at(3) = x2463;
      host_args.at(4) = x2504;
      host_args.at(5) = x2509;
      host_args.at(6) = x2511;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x2512 = x2207 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      Fp x2513 = x2210 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x2514 = Fp(x2512) + Fp(x2513);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x2515 = Fp(x2514) + Fp(x2213);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2516 = (x2515 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][206 * steps + cycle] = x2516;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2517 = inv(x2515);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][207 * steps + cycle] = x2517;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2518(args[2][206 * steps + ((cycle - 0) & mask)]);
      assert(x2518 != Fp::invalid());
      if (x2518 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2515 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2519 = x95 - x2518;
      if (x2519 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2520(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x2520 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x2521 = x2515 * x2520;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2522 = x2521 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2522 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      Fp x2523 = Fp(x596) + Fp(x78);
      // loc("cirgen/components/u32.cpp":62:25)
      Fp x2524 = x2355 * x90;
      // loc("cirgen/components/u32.cpp":62:13)
      Fp x2525 = Fp(x2354) + Fp(x2524);
      // loc("cirgen/components/u32.cpp":62:49)
      Fp x2526 = x2356 * x80;
      // loc("cirgen/components/u32.cpp":62:13)
      Fp x2527 = Fp(x2525) + Fp(x2526);
      // loc("cirgen/components/u32.cpp":65:17)
      Fp x2528 = x2357 * x47;
      // loc("cirgen/components/u32.cpp":65:16)
      Fp x2529 = x2528 * x46;
      // loc("cirgen/components/u32.cpp":65:10)
      Fp x2530 = Fp(x2527) + Fp(x2529);
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      Fp x2531 = Fp(x596) + Fp(x2530);
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      Fp x2532 = x2459 * x80;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      Fp x2533 = Fp(x2490) + Fp(x2532);
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      Fp x2534 = x2463 * x79;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      Fp x2535 = Fp(x2533) + Fp(x2534);
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      Fp x2536 = x2509 * x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2537 = x95 - x2509;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      Fp x2538 = x2537 * x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      Fp x2539 = Fp(x2536) + Fp(x2538);
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      Fp x2540 = x2511 * x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2541 = x95 - x2511;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      Fp x2542 = x2541 * x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      Fp x2543 = Fp(x2540) + Fp(x2542);
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      Fp x2544 = x2511 * x2523;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      Fp x2545 = x2541 * x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      Fp x2546 = Fp(x2544) + Fp(x2545);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      Fp x2547(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x2547 != Fp::invalid());
      if (x2547 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2548 = x2215 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2548 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2549 = x2204 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2549 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2550 = x2175 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        Fp x2551 = x2178 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2552 = Fp(x2550) + Fp(x2551);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2553 = Fp(x2552) + Fp(x2512);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2554 = Fp(x2553) + Fp(x2513);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2555 = x2168 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        Fp x2556 = x2213 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2557 = Fp(x2555) + Fp(x2556);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        Fp x2558 = x2170 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2559 = Fp(x2557) + Fp(x2558);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2560 = Fp(x2559) + Fp(x2172);
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        Fp x2561 = x2168 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2554;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2560;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2561;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2561;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2562 = Fp(x2539) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2563 = Fp(x2562.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2563;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2564(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2564 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2565 = x2562 - x2564;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2566 = x2565 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2567 = Fp(x2566.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2567;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2568(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2568 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2569 = x2566 - x2568;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2570 = x2569 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2571 = Fp(x2570.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2571;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2572(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2572 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2573 = x2570 - x2572;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2574 = x2573 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2575 = Fp(x2574.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2575;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2576(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2577 = x2574 - x2576;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2578 = x2577 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2578;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2579(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2580 = x95 - x2579;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2581 = x2579 * x2580;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2581;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2582(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2583 = x92 - x2579;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2584 = x2582 * x2583;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2584 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2585(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2585 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        args[2][93 * steps + cycle] = x2585;
        if (x94 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          Fp x2586 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2447;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2451;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2459;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2463;
          {
            host_args.at(0) = x2586;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2587(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2587 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2588(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2588 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2589(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2589 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2590(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2590 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2586;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2587;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2588;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2589;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2590;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        Fp x2591 = Fp(x2518) + Fp(x95);
        if (x2591 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      Fp x2592(args[2][172 * steps + ((cycle - 0) & mask)]);
      assert(x2592 != Fp::invalid());
      if (x2592 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2593 = x2215 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2593 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2594 = x2204 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2594 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2595 = x2175 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        Fp x2596 = x2178 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2597 = Fp(x2595) + Fp(x2596);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2598 = Fp(x2597) + Fp(x2512);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2599 = Fp(x2598) + Fp(x2513);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2600 = x2168 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        Fp x2601 = x2213 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2602 = Fp(x2600) + Fp(x2601);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        Fp x2603 = x2170 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2604 = Fp(x2602) + Fp(x2603);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2605 = Fp(x2604) + Fp(x2172);
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        Fp x2606 = x2168 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2599;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2605;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2606;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2606;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2607 = Fp(x2543) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2608 = Fp(x2607.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2608;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2609(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2609 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2610 = x2607 - x2609;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2611 = x2610 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2612 = Fp(x2611.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2612;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2613(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2613 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2614 = x2611 - x2613;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2615 = x2614 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2616 = Fp(x2615.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2616;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2617(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2617 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2618 = x2615 - x2617;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2619 = x2618 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2620 = Fp(x2619.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2620;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2621(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2622 = x2619 - x2621;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2623 = x2622 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2623;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2624(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2625 = x95 - x2624;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2626 = x2624 * x2625;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2626;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2627(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2628 = x92 - x2624;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2629 = x2627 * x2628;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2629 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2630(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2630 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        args[2][93 * steps + cycle] = x2630;
        if (x94 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          Fp x2631 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2447;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2451;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2459;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2463;
          {
            host_args.at(0) = x2631;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2632(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2632 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2633(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2633 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2634(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2634 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2635(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2635 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2631;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2632;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2633;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2634;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2635;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        Fp x2636 = Fp(x2518) + Fp(x95);
        if (x2636 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      Fp x2637(args[2][173 * steps + ((cycle - 0) & mask)]);
      assert(x2637 != Fp::invalid());
      if (x2637 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2638 = x2215 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2638 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2639 = x2204 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2639 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2640 = x2175 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        Fp x2641 = x2178 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2642 = Fp(x2640) + Fp(x2641);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2643 = Fp(x2642) + Fp(x2512);
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        Fp x2644 = Fp(x2643) + Fp(x2513);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2645 = x2168 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        Fp x2646 = x2213 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2647 = Fp(x2645) + Fp(x2646);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        Fp x2648 = x2170 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2649 = Fp(x2647) + Fp(x2648);
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        Fp x2650 = Fp(x2649) + Fp(x2172);
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        Fp x2651 = x2168 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2644;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2650;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2651;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2651;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        args[2][186 * steps + cycle] = x51;
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2652 = Fp(x2546) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2653 = Fp(x2652.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2653;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2654(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2654 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2655 = x2652 - x2654;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2656 = x2655 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2657 = Fp(x2656.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2657;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2658(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2658 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2659 = x2656 - x2658;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2660 = x2659 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2661 = Fp(x2660.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2661;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2662(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2662 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2663 = x2660 - x2662;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2664 = x2663 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2665 = Fp(x2664.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2665;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2666(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2667 = x2664 - x2666;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2668 = x2667 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2668;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2669(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2670 = x95 - x2669;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2671 = x2669 * x2670;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2671;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2672(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2673 = x92 - x2669;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2674 = x2672 * x2673;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2674 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2675(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2675 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        args[2][93 * steps + cycle] = x2675;
        if (x94 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          Fp x2676 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2447;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2451;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2459;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2463;
          {
            host_args.at(0) = x2676;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2677(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2677 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2678(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2678 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2679(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2679 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2680(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2680 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2676;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2677;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2678;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2679;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2680;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        Fp x2681 = Fp(x2518) + Fp(x95);
        if (x2681 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      Fp x2682(args[2][174 * steps + ((cycle - 0) & mask)]);
      assert(x2682 != Fp::invalid());
      if (x2682 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2683 = x2215 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2683 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        Fp x2684 = x2175 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        Fp x2685 = x2178 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        Fp x2686 = Fp(x2684) + Fp(x2685);
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        Fp x2687 = Fp(x2686) + Fp(x2344);
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2688 = x2687 - x2190;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        Fp x2689 = x2190 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        Fp x2690 = Fp(x2206) + Fp(x2689);
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        Fp x2691 = x2170 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        Fp x2692 = Fp(x2690) + Fp(x2691);
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        Fp x2693 = Fp(x2692) + Fp(x2172);
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        Fp x2694 = x2168 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        Fp x2695 = Fp(x2694) + Fp(x2194);
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        Fp x2696 = Fp(x2695) + Fp(x2196);
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        Fp x2697 = x2168 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2688;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2693;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2696;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2697;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2698 = Fp(x2531) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2699 = Fp(x2698.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2699;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2700(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2700 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2701 = x2698 - x2700;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2702 = x2701 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2703 = Fp(x2702.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2703;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2704(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2704 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2705 = x2702 - x2704;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2706 = x2705 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2707 = Fp(x2706.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2707;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2708(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2708 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2709 = x2706 - x2708;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2710 = x2709 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2711 = Fp(x2710.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2711;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2712(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2712 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2713 = x2710 - x2712;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2714 = x2713 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2714;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2715(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2715 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2716 = x95 - x2715;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2717 = x2715 * x2716;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2717;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2718(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2718 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2719 = x92 - x2715;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2720 = x2718 * x2719;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2720 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2721(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2721 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        args[2][93 * steps + cycle] = x2721;
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x583;
          host_args.at(2) = x584;
          host_args.at(3) = x587;
          host_args.at(4) = x2365;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          Fp x2722 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x583;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x584;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x587;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2365;
          {
            host_args.at(0) = x2722;
            host_args.at(1) = x583;
            host_args.at(2) = x584;
            host_args.at(3) = x587;
            host_args.at(4) = x2365;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2723(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2723 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2724(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2724 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2725(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2725 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2726(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2726 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2722;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2723;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2724;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2725;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2726;
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      Fp x2727(args[2][175 * steps + ((cycle - 0) & mask)]);
      assert(x2727 != Fp::invalid());
      if (x2727 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2728 = x2215 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2728 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2204 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x2729 = x2175 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x2730 = x2178 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x2731 = Fp(x2729) + Fp(x2730);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x2732 = Fp(x2731) + Fp(x2344);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x2733 = x2168 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x2734 = x2170 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x2735 = Fp(x2733) + Fp(x2734);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x2736 = Fp(x2735) + Fp(x2172);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x2737 = x2168 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x2732;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2736;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2737;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2737;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2738 = Fp(x2535) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2739 = Fp(x2738.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2739;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2740(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2740 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2741 = x2738 - x2740;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2742 = x2741 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2743 = Fp(x2742.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2743;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2744(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2744 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2745 = x2742 - x2744;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2746 = x2745 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2747 = Fp(x2746.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2747;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2748(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2748 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2749 = x2746 - x2748;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2750 = x2749 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2751 = Fp(x2750.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2751;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2752(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2753 = x2750 - x2752;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2754 = x2753 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2754;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2755(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2755 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2756 = x95 - x2755;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2757 = x2755 * x2756;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2757;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2758(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2759 = x92 - x2755;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2760 = x2758 * x2759;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2760 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2761(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2761 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        args[2][93 * steps + cycle] = x2761;
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x583;
          host_args.at(2) = x584;
          host_args.at(3) = x587;
          host_args.at(4) = x2365;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          Fp x2762 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x583;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x584;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x587;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2365;
          {
            host_args.at(0) = x2762;
            host_args.at(1) = x583;
            host_args.at(2) = x584;
            host_args.at(3) = x587;
            host_args.at(4) = x2365;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2763(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2763 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2764(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2764 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2765(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2765 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2766(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2766 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2762;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2763;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2764;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2765;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2766;
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      Fp x2767(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x2767 != Fp::invalid());
      if (x2767 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2768 = x2215 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2768 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2206;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2197;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2183;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        args[2][185 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2769 = Fp(x2523) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2770 = Fp(x2769.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2770;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2771(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2771 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2772 = x2769 - x2771;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2773 = x2772 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2774 = Fp(x2773.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2774;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2775(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2775 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2776 = x2773 - x2775;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2777 = x2776 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2778 = Fp(x2777.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2778;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2779(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2779 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2780 = x2777 - x2779;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2781 = x2780 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2782 = Fp(x2781.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2782;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2783(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2783 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2784 = x2781 - x2783;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2785 = x2784 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2785;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2786(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2786 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2787 = x95 - x2786;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2788 = x2786 * x2787;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2788;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2789(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2790 = x92 - x2786;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2791 = x2789 * x2790;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2791 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2792(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2792 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        args[2][93 * steps + cycle] = x2792;
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          Fp x2793 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2447;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2451;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2459;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2463;
          {
            host_args.at(0) = x2793;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2794(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2794 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2795(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2795 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2796(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2796 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2797(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2797 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2793;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2794;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2795;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2796;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2797;
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      Fp x2798(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x2798 != Fp::invalid());
      if (x2798 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2799 = x2215 - x38;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2799 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][179 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][180 * steps + cycle] = x2206;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][181 * steps + cycle] = x2197;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][182 * steps + cycle] = x2183;
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        args[2][183 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        args[2][184 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        args[2][185 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        args[2][186 * steps + cycle] = x95;
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        args[2][187 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        args[2][188 * steps + cycle] = x75;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x2800 = Fp(x2523) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2801 = Fp(x2800.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x2801;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2802(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x2802 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2803 = x2800 - x2802;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2804 = x2803 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2805 = Fp(x2804.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x2805;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x2806(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x2806 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2807 = x2804 - x2806;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2808 = x2807 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2809 = Fp(x2808.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x2809;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x2810(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x2810 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2811 = x2808 - x2810;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x2812 = x2811 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2813 = Fp(x2812.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x2813;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2814(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x2814 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2815 = x2812 - x2814;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x2816 = x2815 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x2816;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2817(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x2817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2818 = x95 - x2817;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x2819 = x2817 * x2818;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x2819;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2820(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x2820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2821 = x92 - x2817;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x2822 = x2820 * x2821;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x2823(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x2823 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        args[2][93 * steps + cycle] = x2823;
        if (x2519 != 0) {
          host_args.at(0) = x2515;
          host_args.at(1) = x2447;
          host_args.at(2) = x2451;
          host_args.at(3) = x2459;
          host_args.at(4) = x2463;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          Fp x2824 = Fp(x2515) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2447;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2451;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2459;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2463;
          {
            host_args.at(0) = x2824;
            host_args.at(1) = x2447;
            host_args.at(2) = x2451;
            host_args.at(3) = x2459;
            host_args.at(4) = x2463;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2825(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x2825 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2826(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x2826 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2827(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x2827 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x2828(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x2828 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x2824;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x2126;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x2825;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x2826;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x2827;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x2828;
        }
        if (x2518 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
    Fp x2829(args[2][97 * steps + ((cycle - 0) & mask)]);
    assert(x2829 != Fp::invalid());
    if (x2829 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2830(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x2830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      Fp x2831 = x596 * x76;
      {
        host_args.at(0) = x2831;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x2832(host_outs.at(0));
        Fp x2833(host_outs.at(1));
        Fp x2834(host_outs.at(2));
        Fp x2835(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x2832;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x2833;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x2834;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x2835;
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2836(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x2836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2837(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x2837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2838(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x2838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2839(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x2839 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x2831;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x2830;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x2836;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x2837;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x2838;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x2839;
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2840 = Fp(x2839.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        Fp x2841 = x2840 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][178 * steps + cycle] = x2841;
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2842 = Fp(x2839.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        Fp x2843 = x2842 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x2843;
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2844 = Fp(x2839.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        Fp x2845 = x2844 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][177 * steps + cycle] = x2845;
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2846 = Fp(x2839.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        Fp x2847 = x2846 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][176 * steps + cycle] = x2847;
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2848 = Fp(x2839.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        Fp x2849 = x2848 * x56;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x2849;
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2850 = Fp(x2839.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][181 * steps + cycle] = x2850;
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2851 = Fp(x2838.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        Fp x2852 = x2851 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][180 * steps + cycle] = x2852;
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2853 = Fp(x2838.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        Fp x2854 = x2853 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x2854;
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2855 = Fp(x2838.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        Fp x2856 = x2855 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][179 * steps + cycle] = x2856;
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2857 = Fp(x2838.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        Fp x2858 = x2857 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][83 * steps + cycle] = x2858;
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2859 = Fp(x2838.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][82 * steps + cycle] = x2859;
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2860 = Fp(x2837.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        Fp x2861 = x2860 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][182 * steps + cycle] = x2861;
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2862 = Fp(x2837.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        Fp x2863 = x2862 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][183 * steps + cycle] = x2863;
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2864 = Fp(x2837.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        Fp x2865 = x2864 * x58;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][84 * steps + cycle] = x2865;
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2866 = Fp(x2837.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        Fp x2867 = x2866 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][86 * steps + cycle] = x2867;
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2868 = Fp(x2837.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][85 * steps + cycle] = x2868;
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2869 = Fp(x2836.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        Fp x2870 = x2869 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][184 * steps + cycle] = x2870;
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2871 = Fp(x2836.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        args[2][185 * steps + cycle] = x2871;
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2872(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x2872 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x2873 = x2872 * x55;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2874(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x2874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2875 = x2874 * x59;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2876(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x2876 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      Fp x2877 = x2876 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2878 = Fp(x2875) + Fp(x2877);
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2879(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x2879 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      Fp x2880 = x2879 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2881 = Fp(x2878) + Fp(x2880);
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2882(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x2882 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x2883 = Fp(x2881) + Fp(x2882);
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x2884 = Fp(x2873) + Fp(x2883);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x2885 = x2884 * x92;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2886(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x2886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x2887 = Fp(x2885) + Fp(x2886);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2888 = x2839 - x2887;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2888 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2889(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x2889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x2890 = x2889 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2891(args[2][81 * steps + ((cycle - 0) & mask)]);
      assert(x2891 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      Fp x2892 = x2891 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x2893 = Fp(x2890) + Fp(x2892);
      // loc("Top/Mux/4/Mux/3/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2894(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x2894 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x2895 = Fp(x2893) + Fp(x2894);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x2896 = x2895 * x59;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2897(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x2897 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      Fp x2898 = x2897 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x2899 = Fp(x2896) + Fp(x2898);
      // loc("Top/Mux/4/Mux/3/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2900(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x2900 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x2901 = Fp(x2899) + Fp(x2900);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2902 = x2838 - x2901;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2902 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2903(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x2903 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2904 = x2903 * x64;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2905(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x2905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x2906 = x2905 * x78;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2907(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x2907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x2908 = Fp(x2906) + Fp(x2907);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      Fp x2909 = x2908 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2910 = Fp(x2904) + Fp(x2909);
      // loc("Top/Mux/4/Mux/3/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2911(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x2911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      Fp x2912 = x2911 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2913 = Fp(x2910) + Fp(x2912);
      // loc("Top/Mux/4/Mux/3/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2914(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x2914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x2915 = Fp(x2913) + Fp(x2914);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2916 = x2837 - x2915;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2916 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x2917(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x2917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x2918 = x2917 * x64;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x2919(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x2919 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x2920 = Fp(x2918) + Fp(x2919);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2921 = x2836 - x2920;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2921 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2836;
        host_args.at(1) = x2837;
        host_args.at(2) = x2838;
        host_args.at(3) = x2839;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        Fp x2922(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2923 = (x2922 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][190 * steps + cycle] = x2923;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2924 = x2922 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2925 = (x2924 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][191 * steps + cycle] = x2925;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2926 = x2922 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2927 = (x2926 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][192 * steps + cycle] = x2927;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2928 = x2922 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2929 = (x2928 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][193 * steps + cycle] = x2929;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2930 = x2922 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2931 = (x2930 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][194 * steps + cycle] = x2931;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2932 = x2922 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2933 = (x2932 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][195 * steps + cycle] = x2933;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2934 = x2922 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2935 = (x2934 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][196 * steps + cycle] = x2935;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2936 = x2922 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2937 = (x2936 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][197 * steps + cycle] = x2937;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2938(args[2][191 * steps + ((cycle - 0) & mask)]);
        assert(x2938 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2939(args[2][192 * steps + ((cycle - 0) & mask)]);
        assert(x2939 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2940 = x2939 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2941 = Fp(x2938) + Fp(x2940);
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2942(args[2][193 * steps + ((cycle - 0) & mask)]);
        assert(x2942 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2943 = x2942 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2944 = Fp(x2941) + Fp(x2943);
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2945(args[2][194 * steps + ((cycle - 0) & mask)]);
        assert(x2945 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2946 = x2945 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2947 = Fp(x2944) + Fp(x2946);
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2948(args[2][195 * steps + ((cycle - 0) & mask)]);
        assert(x2948 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2949 = x2948 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2950 = Fp(x2947) + Fp(x2949);
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2951(args[2][196 * steps + ((cycle - 0) & mask)]);
        assert(x2951 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2952 = x2951 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2953 = Fp(x2950) + Fp(x2952);
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x2954(args[2][197 * steps + ((cycle - 0) & mask)]);
        assert(x2954 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x2955 = x2954 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x2956 = Fp(x2953) + Fp(x2955);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2957 = x2956 - x2922;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2957 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        Fp x2958(args[2][190 * steps + ((cycle - 0) & mask)]);
        assert(x2958 != Fp::invalid());
        if (x2958 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2959 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x2960 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2961 = Fp(x2959) + Fp(x2960);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2962 = x2886 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2963 = Fp(x2962) + Fp(x2895);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2964 = Fp(x2961) + Fp(x2963);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2965 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x2966 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2967 = Fp(x2965) + Fp(x2966);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2968 = Fp(x2967) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x2969 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x2964;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x2968;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x2969;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x2969;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        Fp x2970(args[2][191 * steps + ((cycle - 0) & mask)]);
        assert(x2970 != Fp::invalid());
        if (x2970 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2971 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x2972 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2973 = Fp(x2971) + Fp(x2972);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2974 = x2886 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2975 = Fp(x2974) + Fp(x2895);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2976 = Fp(x2973) + Fp(x2975);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2977 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x2978 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2979 = Fp(x2977) + Fp(x2978);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2980 = Fp(x2979) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x2981 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x2976;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x2980;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x2981;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x2981;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        Fp x2982(args[2][192 * steps + ((cycle - 0) & mask)]);
        assert(x2982 != Fp::invalid());
        if (x2982 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2983 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x2984 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2985 = Fp(x2983) + Fp(x2984);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2986 = x2886 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2987 = Fp(x2986) + Fp(x2895);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2988 = Fp(x2985) + Fp(x2987);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2989 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x2990 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2991 = Fp(x2989) + Fp(x2990);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x2992 = Fp(x2991) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x2993 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x2988;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x2992;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x2993;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x2993;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        Fp x2994(args[2][193 * steps + ((cycle - 0) & mask)]);
        assert(x2994 != Fp::invalid());
        if (x2994 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2995 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x2996 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x2997 = Fp(x2995) + Fp(x2996);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2998 = x2886 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x2999 = Fp(x2998) + Fp(x2895);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x3000 = Fp(x2997) + Fp(x2999);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x3001 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x3002 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x3003 = Fp(x3001) + Fp(x3002);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x3004 = Fp(x3003) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x3005 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x3000;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x3004;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x3005;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x3005;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        Fp x3006(args[2][194 * steps + ((cycle - 0) & mask)]);
        assert(x3006 != Fp::invalid());
        if (x3006 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x3007 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          Fp x3008 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x3009 = Fp(x3007) + Fp(x3008);
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x3010 = x2886 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          Fp x3011 = Fp(x3010) + Fp(x2895);
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          Fp x3012 = Fp(x3009) + Fp(x3011);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x3013 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          Fp x3014 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x3015 = Fp(x3013) + Fp(x3014);
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          Fp x3016 = Fp(x3015) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          Fp x3017 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x3012;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x3016;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x3017;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x3017;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        Fp x3018(args[2][195 * steps + ((cycle - 0) & mask)]);
        assert(x3018 != Fp::invalid());
        if (x3018 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3019 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          Fp x3020 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3021 = Fp(x3019) + Fp(x3020);
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3022 = x2911 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          Fp x3023 = x2914 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3024 = Fp(x3022) + Fp(x3023);
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3025 = Fp(x3024) + Fp(x2917);
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3026 = Fp(x3021) + Fp(x3025);
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3027 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          Fp x3028 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3029 = Fp(x3027) + Fp(x3028);
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3030 = Fp(x3029) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          Fp x3031 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x3026;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x3030;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x3031;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x3031;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        Fp x3032(args[2][196 * steps + ((cycle - 0) & mask)]);
        assert(x3032 != Fp::invalid());
        if (x3032 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3033 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          Fp x3034 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3035 = Fp(x3033) + Fp(x3034);
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3036 = x2911 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          Fp x3037 = x2914 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3038 = Fp(x3036) + Fp(x3037);
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3039 = Fp(x3038) + Fp(x2917);
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3040 = Fp(x3035) + Fp(x3039);
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3041 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          Fp x3042 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3043 = Fp(x3041) + Fp(x3042);
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3044 = Fp(x3043) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          Fp x3045 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x3040;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x3044;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x3045;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x3045;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        Fp x3046(args[2][197 * steps + ((cycle - 0) & mask)]);
        assert(x3046 != Fp::invalid());
        if (x3046 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3047 = x2879 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          Fp x3048 = x2882 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3049 = Fp(x3047) + Fp(x3048);
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3050 = x2911 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          Fp x3051 = x2914 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3052 = Fp(x3050) + Fp(x3051);
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          Fp x3053 = Fp(x3052) + Fp(x2917);
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          Fp x3054 = Fp(x3049) + Fp(x3053);
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3055 = x2872 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          Fp x3056 = x2874 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3057 = Fp(x3055) + Fp(x3056);
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          Fp x3058 = Fp(x3057) + Fp(x2876);
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          Fp x3059 = x2872 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x3054;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x3058;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x3059;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][189 * steps + cycle] = x3059;
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x3060 = x2897 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      Fp x3061 = x2900 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x3062 = Fp(x3060) + Fp(x3061);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x3063 = Fp(x3062) + Fp(x2903);
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      Fp x3064 = Fp(x3063) + Fp(x48);
      {
        host_args.at(0) = x3064;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x3065(host_outs.at(0));
        Fp x3066(host_outs.at(1));
        Fp x3067(host_outs.at(2));
        Fp x3068(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x3065;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x3066;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x3067;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x3068;
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3069(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x3069 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3070(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x3070 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3071(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x3071 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3072(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x3072 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x3064;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x2830;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x3069;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x3070;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x3071;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x3072;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x3073 = x2886 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x3074 = Fp(x3073) + Fp(x2895);
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      Fp x3075 = Fp(x3074) + Fp(x48);
      {
        host_args.at(0) = x3075;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x3076(host_outs.at(0));
        Fp x3077(host_outs.at(1));
        Fp x3078(host_outs.at(2));
        Fp x3079(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][125 * steps + cycle] = x3076;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][126 * steps + cycle] = x3077;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][127 * steps + cycle] = x3078;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][128 * steps + cycle] = x3079;
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3080(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x3080 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3081(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x3081 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3082(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x3082 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3083(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x3083 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][122 * steps + cycle] = x3075;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][123 * steps + cycle] = x2830;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][124 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][125 * steps + cycle] = x3080;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][126 * steps + cycle] = x3081;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][127 * steps + cycle] = x3082;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][128 * steps + cycle] = x3083;
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3084(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x3084 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3085(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x3085 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3086(args[2][188 * steps + ((cycle - 0) & mask)]);
      assert(x3086 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3087(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x3087 != Fp::invalid());
      host_args.at(0) = x3084;
      host_args.at(1) = x3085;
      host_args.at(2) = x3086;
      host_args.at(3) = x3087;
      host_args.at(4) = x3063;
      host_args.at(5) = x3069;
      host_args.at(6) = x3070;
      host_args.at(7) = x3071;
      host_args.at(8) = x3072;
      host_args.at(9) = x3074;
      host_args.at(10) = x3080;
      host_args.at(11) = x3081;
      host_args.at(12) = x3082;
      host_args.at(13) = x3083;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x3088 = x2911 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      Fp x3089 = x2914 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x3090 = Fp(x3088) + Fp(x3089);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x3091 = Fp(x3090) + Fp(x2917);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3092 = (x3091 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][198 * steps + cycle] = x3092;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3093 = inv(x3091);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][199 * steps + cycle] = x3093;
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3094(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x3094 != Fp::invalid());
      if (x3094 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3091 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3095 = x95 - x3094;
      if (x3095 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3096(args[2][199 * steps + ((cycle - 0) & mask)]);
        assert(x3096 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x3097 = x3091 * x3096;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3098 = x3097 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3098 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        Fp x3099 = Fp(x3069) + Fp(x3084);
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3100 = Fp(x3099.asUInt32() & x77.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3101 = (x3100 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][200 * steps + cycle] = x3101;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3102 = x3100 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3103 = (x3102 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][201 * steps + cycle] = x3103;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3104 = x3100 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3105 = (x3104 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][202 * steps + cycle] = x3105;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3106 = x3100 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3107 = (x3106 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][203 * steps + cycle] = x3107;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3108(args[2][201 * steps + ((cycle - 0) & mask)]);
        assert(x3108 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3109(args[2][202 * steps + ((cycle - 0) & mask)]);
        assert(x3109 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x3110 = x3109 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x3111 = Fp(x3108) + Fp(x3110);
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3112(args[2][203 * steps + ((cycle - 0) & mask)]);
        assert(x3112 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x3113 = x3112 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x3114 = Fp(x3111) + Fp(x3113);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3115 = x3114 - x3100;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3115 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3116 = Fp(x3099.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        Fp x3117 = x3116 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3118 = Fp(x3117.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][28 * steps + cycle] = x3118;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3119 = x3099 - x3114;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3120(args[2][28 * steps + ((cycle - 0) & mask)]);
        assert(x3120 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        Fp x3121 = x3120 * x90;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3122 = x3119 - x3121;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][32 * steps + cycle] = x3122;
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        Fp x3123 = x3122 * x76;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][35 * steps + cycle] = x3123;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        Fp x3124 = Fp(x3070) + Fp(x3085);
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        Fp x3125 = Fp(x3124) + Fp(x3120);
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3126 = Fp(x3125.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][33 * steps + cycle] = x3126;
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3127 = Fp(x3125.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        Fp x3128 = x3127 * x89;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][29 * steps + cycle] = x3128;
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        Fp x3129 = Fp(x3071) + Fp(x3086);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x3130(args[2][29 * steps + ((cycle - 0) & mask)]);
        assert(x3130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        Fp x3131 = Fp(x3129) + Fp(x3130);
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3132 = Fp(x3131.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][34 * steps + cycle] = x3132;
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3133 = Fp(x3131.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        Fp x3134 = x3133 * x89;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][30 * steps + cycle] = x3134;
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        Fp x3135 = Fp(x3072) + Fp(x3087);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3136(args[2][30 * steps + ((cycle - 0) & mask)]);
        assert(x3136 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        Fp x3137 = Fp(x3135) + Fp(x3136);
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3138 = Fp(x3137.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][87 * steps + cycle] = x3138;
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3139 = Fp(x3137.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        Fp x3140 = x3139 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][88 * steps + cycle] = x3140;
        // loc("cirgen/circuit/rv32im/memio.cpp":63:20)
        auto x3141 = Fp(x3137.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":63:19)
        Fp x3142 = x3141 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3143 = Fp(x3142.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][31 * steps + cycle] = x3143;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x3144(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x3144 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x3145(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x3145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      Fp x3146 = x3145 * x78;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3147 = x3144 - x3146;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3147 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      Fp x3148 = Fp(x3069) + Fp(x3084);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x3149(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x3149 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      Fp x3150 = x3149 * x90;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      Fp x3151 = Fp(x3150) + Fp(x3144);
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3152(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x3152 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3153(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x3153 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x3154 = x3153 * x92;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x3155 = Fp(x3152) + Fp(x3154);
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3156(args[2][203 * steps + ((cycle - 0) & mask)]);
      assert(x3156 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x3157 = x3156 * x77;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x3158 = Fp(x3155) + Fp(x3157);
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      Fp x3159 = Fp(x3151) + Fp(x3158);
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3160 = x3148 - x3159;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3160 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      Fp x3161 = Fp(x3070) + Fp(x3085);
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      Fp x3162 = Fp(x3161) + Fp(x3149);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x3163(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x3163 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      Fp x3164 = x3163 * x90;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x3165(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x3165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      Fp x3166 = Fp(x3164) + Fp(x3165);
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3167 = x3162 - x3166;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3167 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      Fp x3168 = Fp(x3071) + Fp(x3086);
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      Fp x3169 = Fp(x3168) + Fp(x3163);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x3170(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x3170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      Fp x3171 = x3170 * x90;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x3172(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x3172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      Fp x3173 = Fp(x3171) + Fp(x3172);
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3174 = x3169 - x3173;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      Fp x3175 = Fp(x3072) + Fp(x3087);
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      Fp x3176 = Fp(x3175) + Fp(x3170);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x3177(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x3177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      Fp x3178 = x3177 * x90;
      // loc("Top/Mux/4/Mux/3/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3179(args[2][88 * steps + ((cycle - 0) & mask)]);
      assert(x3179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      Fp x3180 = x3179 * x78;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      Fp x3181 = Fp(x3178) + Fp(x3180);
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3182(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x3182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      Fp x3183 = Fp(x3181) + Fp(x3182);
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3184 = x3176 - x3183;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3185 = x95 - x3179;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      Fp x3186 = x3179 * x3185;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3187 = x92 - x3179;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      Fp x3188 = x3186 * x3187;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3188 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      Fp x3189 = x3179 * x79;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      Fp x3190 = x3182 * x37;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      Fp x3191 = Fp(x3189) + Fp(x3190);
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      Fp x3192 = x3172 * x36;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      Fp x3193 = Fp(x3191) + Fp(x3192);
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      Fp x3194 = x3165 * x55;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      Fp x3195 = Fp(x3193) + Fp(x3194);
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      Fp x3196 = Fp(x3195) + Fp(x3145);
      {
        host_args.at(0) = x3196;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x3197(host_outs.at(0));
        Fp x3198(host_outs.at(1));
        Fp x3199(host_outs.at(2));
        Fp x3200(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][132 * steps + cycle] = x3197;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][133 * steps + cycle] = x3198;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][134 * steps + cycle] = x3199;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][135 * steps + cycle] = x3200;
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3201(args[2][132 * steps + ((cycle - 0) & mask)]);
      assert(x3201 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3202(args[2][133 * steps + ((cycle - 0) & mask)]);
      assert(x3202 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3203(args[2][134 * steps + ((cycle - 0) & mask)]);
      assert(x3203 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3204(args[2][135 * steps + ((cycle - 0) & mask)]);
      assert(x3204 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][129 * steps + cycle] = x3196;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][130 * steps + cycle] = x2830;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][131 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][132 * steps + cycle] = x3201;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][133 * steps + cycle] = x3202;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][134 * steps + cycle] = x3203;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][135 * steps + cycle] = x3204;
      host_args.at(0) = x3196;
      host_args.at(1) = x3158;
      host_args.at(2) = x3201;
      host_args.at(3) = x3202;
      host_args.at(4) = x3203;
      host_args.at(5) = x3204;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      Fp x3205 = Fp(x596) + Fp(x78);
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x3206 = Fp(x3205) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3207 = Fp(x3206.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x3207;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3208(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x3208 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3209 = x3206 - x3208;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3210 = x3209 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3211 = Fp(x3210.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x3211;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3212(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x3212 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3213 = x3210 - x3212;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3214 = x3213 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3215 = Fp(x3214.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x3215;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3216(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x3216 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3217 = x3214 - x3216;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3218 = x3217 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3219 = Fp(x3218.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x3219;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3220(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x3220 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3221 = x3218 - x3220;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x3222 = x3221 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x3222;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3223(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x3223 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3224 = x95 - x3223;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x3225 = x3223 * x3224;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x3225;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3226(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x3226 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3227 = x92 - x3223;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x3228 = x3226 * x3227;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3228 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      args[2][93 * steps + cycle] = x75;
      // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      Fp x3229(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x3229 != Fp::invalid());
      if (x3229 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          Fp x3230(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3230 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3231 = x3230 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3231 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          Fp x3232(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3232 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          Fp x3233 = Fp(x3232) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3234 = x3233 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3234 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        Fp x3235(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3235 != Fp::invalid());
        if (x3235 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3236 = Fp(x3201.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3236;
          }
        }
        if (x3152 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3237 = Fp(x3202.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3237;
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3238 = Fp(x3203.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3238;
          }
        }
        if (x3156 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3239 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3239;
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
          Fp x3240(args[2][36 * steps + ((cycle - 0) & mask)]);
          assert(x3240 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3241 = Fp(x3240.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          Fp x3242 = x3241 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][37 * steps + cycle] = x3242;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3243 = Fp(x3240.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          Fp x3244 = x3243 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][38 * steps + cycle] = x3244;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x3245(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x3245 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3246 = x95 - x3245;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3247 = x3245 * x3246;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3247 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3248(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x3248 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3249 = x3245 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3250(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x3250 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3251 = x3250 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3252 = Fp(x3249) + Fp(x3251);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3253 = x3248 - x3252;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3253 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3254 = x3245 * x91;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3255 = x3235 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3256 = x3152 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3257 = Fp(x3255) + Fp(x3256);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3258 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3259 = Fp(x3257) + Fp(x3258);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3260 = x3156 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        Fp x3261 = Fp(x3259) + Fp(x3260);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][204 * steps + cycle] = x3261;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][205 * steps + cycle] = x3254;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][206 * steps + cycle] = x3254;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][207 * steps + cycle] = x3254;
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3262(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x3262 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3263(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x3263 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3264(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x3264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3265(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x3265 != Fp::invalid());
        host_args.at(0) = x3254;
        host_args.at(1) = x3262;
        host_args.at(2) = x3263;
        host_args.at(3) = x3264;
        host_args.at(4) = x3265;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          Fp x3266 = Fp(x3091) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3262;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3263;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3264;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3265;
          {
            host_args.at(0) = x3266;
            host_args.at(1) = x3262;
            host_args.at(2) = x3263;
            host_args.at(3) = x3264;
            host_args.at(4) = x3265;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3267(args[2][139 * steps + ((cycle - 0) & mask)]);
          assert(x3267 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3268(args[2][140 * steps + ((cycle - 0) & mask)]);
          assert(x3268 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3269(args[2][141 * steps + ((cycle - 0) & mask)]);
          assert(x3269 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3270(args[2][142 * steps + ((cycle - 0) & mask)]);
          assert(x3270 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][136 * steps + cycle] = x3266;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][137 * steps + cycle] = x2830;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][138 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3267;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3268;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3269;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3270;
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3271 = x2919 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3271 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x2908 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3272 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x3273 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3274 = Fp(x3272) + Fp(x3273);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3275 = Fp(x3274) + Fp(x3074);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3276 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x3277 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3278 = Fp(x3276) + Fp(x3277);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3279 = Fp(x3278) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x3280 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3275;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3279;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3280;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3280;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      Fp x3281(args[2][191 * steps + ((cycle - 0) & mask)]);
      assert(x3281 != Fp::invalid());
      if (x3281 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          Fp x3282(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3282 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3283 = x3282 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3283 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          Fp x3284(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3284 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          Fp x3285 = Fp(x3284) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3286 = x3285 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3286 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        Fp x3287(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3287 != Fp::invalid());
        if (x3287 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3288 = Fp(x3202.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3288;
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3289 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3289;
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
          Fp x3290(args[2][36 * steps + ((cycle - 0) & mask)]);
          assert(x3290 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3291 = Fp(x3290.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          Fp x3292 = x3291 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][37 * steps + cycle] = x3292;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3293 = Fp(x3290.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          Fp x3294 = x3293 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][38 * steps + cycle] = x3294;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x3295(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x3295 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3296 = x95 - x3295;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3297 = x3295 * x3296;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3297 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3298(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x3298 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3299 = x3295 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3300(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x3300 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3301 = x3300 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3302 = Fp(x3299) + Fp(x3301);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3303 = x3298 - x3302;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3303 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3304 = x3295 * x91;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3305 = x3287 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3306 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3307 = Fp(x3305) + Fp(x3306);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3308 = x3287 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3309 = x3153 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        Fp x3310 = Fp(x3308) + Fp(x3309);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][204 * steps + cycle] = x3307;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][205 * steps + cycle] = x3310;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][206 * steps + cycle] = x3304;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][207 * steps + cycle] = x3304;
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3311(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x3311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3312(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x3312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3313(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x3313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3314(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x3314 != Fp::invalid());
        host_args.at(0) = x3304;
        host_args.at(1) = x3311;
        host_args.at(2) = x3312;
        host_args.at(3) = x3313;
        host_args.at(4) = x3314;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          Fp x3315 = Fp(x3091) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3311;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3312;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3313;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3314;
          {
            host_args.at(0) = x3315;
            host_args.at(1) = x3311;
            host_args.at(2) = x3312;
            host_args.at(3) = x3313;
            host_args.at(4) = x3314;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3316(args[2][139 * steps + ((cycle - 0) & mask)]);
          assert(x3316 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3317(args[2][140 * steps + ((cycle - 0) & mask)]);
          assert(x3317 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3318(args[2][141 * steps + ((cycle - 0) & mask)]);
          assert(x3318 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3319(args[2][142 * steps + ((cycle - 0) & mask)]);
          assert(x3319 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][136 * steps + cycle] = x3315;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][137 * steps + cycle] = x2830;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][138 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3316;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3317;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3318;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3319;
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3320 = x2919 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3320 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3321 = x2908 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3321 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3322 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x3323 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3324 = Fp(x3322) + Fp(x3323);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3325 = Fp(x3324) + Fp(x3074);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3326 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x3327 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3328 = Fp(x3326) + Fp(x3327);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3329 = Fp(x3328) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x3330 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3325;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3329;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3330;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3330;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      Fp x3331(args[2][192 * steps + ((cycle - 0) & mask)]);
      assert(x3331 != Fp::invalid());
      if (x3331 != 0) {
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          Fp x3332(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3332 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3333 = x3332 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3333 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          Fp x3334(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3334 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          Fp x3335 = Fp(x3334) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3336 = x3335 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3336 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        Fp x3337(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3337 != Fp::invalid());
        if (x3337 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3338 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3338;
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
          Fp x3339(args[2][36 * steps + ((cycle - 0) & mask)]);
          assert(x3339 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3340 = Fp(x3339.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          Fp x3341 = x3340 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][37 * steps + cycle] = x3341;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3342 = Fp(x3339.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          Fp x3343 = x3342 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][38 * steps + cycle] = x3343;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x3344(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x3344 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3345 = x95 - x3344;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3346 = x3344 * x3345;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3346 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3347(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x3347 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3348 = x3344 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3349(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x3349 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3350 = x3349 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3351 = Fp(x3348) + Fp(x3350);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3352 = x3347 - x3351;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3352 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3353 = x3337 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3354 = x3337 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3355 = x3337 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        Fp x3356 = x3337 * x3204;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][204 * steps + cycle] = x3353;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][205 * steps + cycle] = x3354;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][206 * steps + cycle] = x3355;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][207 * steps + cycle] = x3356;
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3357(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x3357 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3358(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x3358 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3359(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x3359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3360(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x3360 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3357;
        host_args.at(2) = x3358;
        host_args.at(3) = x3359;
        host_args.at(4) = x3360;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          Fp x3361 = Fp(x3091) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3357;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3358;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3359;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3360;
          {
            host_args.at(0) = x3361;
            host_args.at(1) = x3357;
            host_args.at(2) = x3358;
            host_args.at(3) = x3359;
            host_args.at(4) = x3360;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3362(args[2][139 * steps + ((cycle - 0) & mask)]);
          assert(x3362 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3363(args[2][140 * steps + ((cycle - 0) & mask)]);
          assert(x3363 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3364(args[2][141 * steps + ((cycle - 0) & mask)]);
          assert(x3364 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3365(args[2][142 * steps + ((cycle - 0) & mask)]);
          assert(x3365 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][136 * steps + cycle] = x3361;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][137 * steps + cycle] = x2830;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][138 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3362;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3363;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3364;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3365;
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3366 = x2919 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3366 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3367 = x2908 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3367 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3368 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x3369 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3370 = Fp(x3368) + Fp(x3369);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3371 = Fp(x3370) + Fp(x3074);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3372 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x3373 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3374 = Fp(x3372) + Fp(x3373);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3375 = Fp(x3374) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x3376 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3371;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3375;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3376;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3376;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      Fp x3377(args[2][193 * steps + ((cycle - 0) & mask)]);
      assert(x3377 != Fp::invalid());
      if (x3377 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          Fp x3378(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3378 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3379 = x3378 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3379 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          Fp x3380(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3380 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          Fp x3381 = Fp(x3380) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3382 = x3381 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        Fp x3383(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3383 != Fp::invalid());
        if (x3383 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3384 = Fp(x3201.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3384;
          }
        }
        if (x3152 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3385 = Fp(x3202.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3385;
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3386 = Fp(x3203.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3386;
          }
        }
        if (x3156 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3387 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3387;
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
          Fp x3388(args[2][36 * steps + ((cycle - 0) & mask)]);
          assert(x3388 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3389 = Fp(x3388.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          Fp x3390 = x3389 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][37 * steps + cycle] = x3390;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3391 = Fp(x3388.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          Fp x3392 = x3391 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][38 * steps + cycle] = x3392;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x3393(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x3393 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3394 = x95 - x3393;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3395 = x3393 * x3394;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3396(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x3396 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3397 = x3393 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3398(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x3398 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3399 = x3398 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3400 = Fp(x3397) + Fp(x3399);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3401 = x3396 - x3400;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3401 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3402 = x3383 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3403 = x3152 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3404 = Fp(x3402) + Fp(x3403);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3405 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3406 = Fp(x3404) + Fp(x3405);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3407 = x3156 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        Fp x3408 = Fp(x3406) + Fp(x3407);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][204 * steps + cycle] = x3408;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][205 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][206 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][207 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3409(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x3409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3410(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x3410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3411(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x3411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3412(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x3412 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3409;
        host_args.at(2) = x3410;
        host_args.at(3) = x3411;
        host_args.at(4) = x3412;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          Fp x3413 = Fp(x3091) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3409;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3410;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3411;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3412;
          {
            host_args.at(0) = x3413;
            host_args.at(1) = x3409;
            host_args.at(2) = x3410;
            host_args.at(3) = x3411;
            host_args.at(4) = x3412;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3414(args[2][139 * steps + ((cycle - 0) & mask)]);
          assert(x3414 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3415(args[2][140 * steps + ((cycle - 0) & mask)]);
          assert(x3415 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3416(args[2][141 * steps + ((cycle - 0) & mask)]);
          assert(x3416 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3417(args[2][142 * steps + ((cycle - 0) & mask)]);
          assert(x3417 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][136 * steps + cycle] = x3413;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][137 * steps + cycle] = x2830;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][138 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3414;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3417;
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3418 = x2919 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3418 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3419 = x2908 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3419 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3420 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x3421 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3422 = Fp(x3420) + Fp(x3421);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3423 = Fp(x3422) + Fp(x3074);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3424 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x3425 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3426 = Fp(x3424) + Fp(x3425);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3427 = Fp(x3426) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x3428 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3423;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3427;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3428;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3428;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      Fp x3429(args[2][194 * steps + ((cycle - 0) & mask)]);
      assert(x3429 != Fp::invalid());
      if (x3429 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          Fp x3430(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3430 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3431 = x3430 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3431 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          Fp x3432(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3432 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          Fp x3433 = Fp(x3432) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3434 = x3433 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3434 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        Fp x3435(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3435 != Fp::invalid());
        if (x3435 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3436 = Fp(x3202.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3436;
          }
        }
        if (x3153 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3437 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            args[2][36 * steps + cycle] = x3437;
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
          Fp x3438(args[2][36 * steps + ((cycle - 0) & mask)]);
          assert(x3438 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3439 = Fp(x3438.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          Fp x3440 = x3439 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][37 * steps + cycle] = x3440;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3441 = Fp(x3438.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          Fp x3442 = x3441 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          args[2][38 * steps + cycle] = x3442;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x3443(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x3443 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3444 = x95 - x3443;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3445 = x3443 * x3444;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3445 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3446(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x3446 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3447 = x3443 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x3448(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x3448 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3449 = x3448 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3450 = Fp(x3447) + Fp(x3449);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3451 = x3446 - x3450;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3451 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3452 = x3435 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3453 = x3153 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3454 = Fp(x3452) + Fp(x3453);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3455 = x3435 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3456 = x3153 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        Fp x3457 = Fp(x3455) + Fp(x3456);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][204 * steps + cycle] = x3454;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][205 * steps + cycle] = x3457;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][206 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][207 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3458(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x3458 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3459(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x3459 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3460(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x3460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3461(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x3461 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3458;
        host_args.at(2) = x3459;
        host_args.at(3) = x3460;
        host_args.at(4) = x3461;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3095 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          Fp x3462 = Fp(x3091) + Fp(x48);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3458;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3459;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3460;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3461;
          {
            host_args.at(0) = x3462;
            host_args.at(1) = x3458;
            host_args.at(2) = x3459;
            host_args.at(3) = x3460;
            host_args.at(4) = x3461;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3463(args[2][139 * steps + ((cycle - 0) & mask)]);
          assert(x3463 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3464(args[2][140 * steps + ((cycle - 0) & mask)]);
          assert(x3464 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3465(args[2][141 * steps + ((cycle - 0) & mask)]);
          assert(x3465 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3466(args[2][142 * steps + ((cycle - 0) & mask)]);
          assert(x3466 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][136 * steps + cycle] = x3462;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][137 * steps + cycle] = x2830;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][138 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x3463;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x3464;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][141 * steps + cycle] = x3465;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][142 * steps + cycle] = x3466;
        }
        if (x3094 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3467 = x2919 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3467 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3468 = x2908 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3468 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3469 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        Fp x3470 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3471 = Fp(x3469) + Fp(x3470);
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        Fp x3472 = Fp(x3471) + Fp(x3074);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3473 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        Fp x3474 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3475 = Fp(x3473) + Fp(x3474);
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        Fp x3476 = Fp(x3475) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        Fp x3477 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3472;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3476;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3477;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3477;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      Fp x3478(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x3478 != Fp::invalid());
      if (x3478 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          Fp x3479(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3479 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3480 = x3479 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3480 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          Fp x3481(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3481 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          Fp x3482 = Fp(x3481) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3483 = x3482 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3483 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][36 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][37 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][38 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        Fp x3484(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3484 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3485 = x3484 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3486 = x95 - x3484;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3487 = x3486 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3488 = Fp(x3485) + Fp(x3487);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3489 = x3152 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3490 = x95 - x3152;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3491 = x3490 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3492 = Fp(x3489) + Fp(x3491);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3493 = x3153 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3494 = x95 - x3153;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3495 = x3494 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3496 = Fp(x3493) + Fp(x3495);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3497 = x3156 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3498 = x95 - x3156;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3499 = x3498 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        Fp x3500 = Fp(x3497) + Fp(x3499);
        host_args.at(0) = x3488;
        host_args.at(1) = x3492;
        host_args.at(2) = x3496;
        host_args.at(3) = x3500;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x3488;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x3492;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x3496;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x3500;
        {
          host_args.at(0) = x3196;
          host_args.at(1) = x3488;
          host_args.at(2) = x3492;
          host_args.at(3) = x3496;
          host_args.at(4) = x3500;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3501(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x3501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3502(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x3502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3503(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x3503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3504(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x3504 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][136 * steps + cycle] = x3196;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][137 * steps + cycle] = x2830;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][138 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x3501;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x3502;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x3503;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x3504;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3505 = x2919 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3505 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x2908 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3506 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        Fp x3507 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3508 = Fp(x3506) + Fp(x3507);
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3509 = Fp(x3508) + Fp(x3091);
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3510 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        Fp x3511 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3512 = Fp(x3510) + Fp(x3511);
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3513 = Fp(x3512) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        Fp x3514 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3509;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3513;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3514;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3514;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      Fp x3515(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x3515 != Fp::invalid());
      if (x3515 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          Fp x3516(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3516 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3517 = x3516 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3517 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          Fp x3518(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3518 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          Fp x3519 = Fp(x3518) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3520 = x3519 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3520 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][36 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][37 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][38 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        Fp x3521(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3521 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3522 = x3521 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3523 = x95 - x3521;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3524 = x3523 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3525 = Fp(x3522) + Fp(x3524);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3526 = x3153 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x95 - x3153;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3528 = x3527 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3529 = Fp(x3526) + Fp(x3528);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3530 = x3521 * x3081;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3531 = x3523 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3532 = Fp(x3530) + Fp(x3531);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3533 = x3153 * x3081;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3534 = x3527 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        Fp x3535 = Fp(x3533) + Fp(x3534);
        host_args.at(0) = x3525;
        host_args.at(1) = x3532;
        host_args.at(2) = x3529;
        host_args.at(3) = x3535;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x3525;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x3532;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x3529;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x3535;
        {
          host_args.at(0) = x3196;
          host_args.at(1) = x3525;
          host_args.at(2) = x3532;
          host_args.at(3) = x3529;
          host_args.at(4) = x3535;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3536(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x3536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3537(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x3537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3538(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x3538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3539(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x3539 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][136 * steps + cycle] = x3196;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][137 * steps + cycle] = x2830;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][138 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x3536;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x3537;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x3538;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x3539;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3540 = x2919 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3540 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3541 = x2908 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3541 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3542 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        Fp x3543 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3544 = Fp(x3542) + Fp(x3543);
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3545 = Fp(x3544) + Fp(x3091);
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3546 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        Fp x3547 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3548 = Fp(x3546) + Fp(x3547);
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3549 = Fp(x3548) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        Fp x3550 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3545;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3549;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3550;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3550;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      Fp x3551(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x3551 != Fp::invalid());
      if (x3551 != 0) {
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          Fp x3552(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3552 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3553 = x3552 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3553 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          Fp x3554(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x3554 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          Fp x3555 = Fp(x3554) + Fp(x3153);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3556 = x3555 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3556 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][36 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][37 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][38 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        Fp x3557(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x3557 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3558 = x3557 * x3080;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3559 = x95 - x3557;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3560 = x3559 * x3201;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3561 = Fp(x3558) + Fp(x3560);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3562 = x3557 * x3081;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3563 = x3559 * x3202;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3564 = Fp(x3562) + Fp(x3563);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3565 = x3557 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3566 = x3559 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3567 = Fp(x3565) + Fp(x3566);
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3568 = x3557 * x3083;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3569 = x3559 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        Fp x3570 = Fp(x3568) + Fp(x3569);
        host_args.at(0) = x3561;
        host_args.at(1) = x3564;
        host_args.at(2) = x3567;
        host_args.at(3) = x3570;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x3561;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x3564;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x3567;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x3570;
        {
          host_args.at(0) = x3196;
          host_args.at(1) = x3561;
          host_args.at(2) = x3564;
          host_args.at(3) = x3567;
          host_args.at(4) = x3570;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3571(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x3571 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3572(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x3572 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3573(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x3573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3574(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x3574 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][136 * steps + cycle] = x3196;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][137 * steps + cycle] = x2830;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][138 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x3571;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x3572;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x3573;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x3574;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3575 = x2919 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3575 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3576 = x2908 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3576 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3577 = x2879 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        Fp x3578 = x2882 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3579 = Fp(x3577) + Fp(x3578);
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        Fp x3580 = Fp(x3579) + Fp(x3091);
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3581 = x2872 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        Fp x3582 = x2874 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3583 = Fp(x3581) + Fp(x3582);
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        Fp x3584 = Fp(x3583) + Fp(x2876);
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        Fp x3585 = x2872 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][186 * steps + cycle] = x3580;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][187 * steps + cycle] = x3584;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][188 * steps + cycle] = x3585;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][189 * steps + cycle] = x3585;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
    Fp x3586(args[2][98 * steps + ((cycle - 0) & mask)]);
    assert(x3586 != Fp::invalid());
    if (x3586 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3587(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x3587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      Fp x3588 = x596 * x76;
      {
        host_args.at(0) = x3588;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x3589(host_outs.at(0));
        Fp x3590(host_outs.at(1));
        Fp x3591(host_outs.at(2));
        Fp x3592(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x3589;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x3590;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x3591;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x3592;
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3593(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x3593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3594(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x3594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3595(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x3595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3596(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x3596 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x3588;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x3587;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x3593;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x3594;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x3595;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x3596;
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3597 = Fp(x3596.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        Fp x3598 = x3597 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][178 * steps + cycle] = x3598;
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3599 = Fp(x3596.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        Fp x3600 = x3599 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x3600;
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3601 = Fp(x3596.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        Fp x3602 = x3601 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][177 * steps + cycle] = x3602;
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3603 = Fp(x3596.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        Fp x3604 = x3603 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][176 * steps + cycle] = x3604;
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3605 = Fp(x3596.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        Fp x3606 = x3605 * x56;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x3606;
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3607 = Fp(x3596.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][181 * steps + cycle] = x3607;
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3608 = Fp(x3595.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        Fp x3609 = x3608 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][180 * steps + cycle] = x3609;
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3610 = Fp(x3595.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        Fp x3611 = x3610 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x3611;
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3612 = Fp(x3595.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        Fp x3613 = x3612 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][179 * steps + cycle] = x3613;
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3614 = Fp(x3595.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        Fp x3615 = x3614 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][83 * steps + cycle] = x3615;
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3616 = Fp(x3595.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][82 * steps + cycle] = x3616;
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3617 = Fp(x3594.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        Fp x3618 = x3617 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][182 * steps + cycle] = x3618;
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3619 = Fp(x3594.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        Fp x3620 = x3619 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][183 * steps + cycle] = x3620;
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3621 = Fp(x3594.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        Fp x3622 = x3621 * x58;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][84 * steps + cycle] = x3622;
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3623 = Fp(x3594.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        Fp x3624 = x3623 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][86 * steps + cycle] = x3624;
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3625 = Fp(x3594.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][85 * steps + cycle] = x3625;
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3626 = Fp(x3593.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        Fp x3627 = x3626 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][184 * steps + cycle] = x3627;
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3628 = Fp(x3593.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        args[2][185 * steps + cycle] = x3628;
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3629(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x3629 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x3630 = x3629 * x55;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3631(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x3631 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x3632 = x3631 * x59;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3633(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x3633 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      Fp x3634 = x3633 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x3635 = Fp(x3632) + Fp(x3634);
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3636(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x3636 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      Fp x3637 = x3636 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x3638 = Fp(x3635) + Fp(x3637);
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3639(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x3639 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x3640 = Fp(x3638) + Fp(x3639);
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x3641 = Fp(x3630) + Fp(x3640);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x3642 = x3641 * x92;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3643(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x3643 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x3644 = Fp(x3642) + Fp(x3643);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3645 = x3596 - x3644;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3645 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3646(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x3646 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x3647 = x3646 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3648(args[2][81 * steps + ((cycle - 0) & mask)]);
      assert(x3648 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      Fp x3649 = x3648 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x3650 = Fp(x3647) + Fp(x3649);
      // loc("Top/Mux/4/Mux/4/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3651(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x3651 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x3652 = Fp(x3650) + Fp(x3651);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x3653 = x3652 * x59;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3654(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x3654 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      Fp x3655 = x3654 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x3656 = Fp(x3653) + Fp(x3655);
      // loc("Top/Mux/4/Mux/4/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3657(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x3657 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x3658 = Fp(x3656) + Fp(x3657);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3659 = x3595 - x3658;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3659 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3660(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x3660 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x3661 = x3660 * x64;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3662(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x3662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x3663 = x3662 * x78;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3664(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x3664 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x3665 = Fp(x3663) + Fp(x3664);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      Fp x3666 = x3665 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x3667 = Fp(x3661) + Fp(x3666);
      // loc("Top/Mux/4/Mux/4/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3668(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x3668 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      Fp x3669 = x3668 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x3670 = Fp(x3667) + Fp(x3669);
      // loc("Top/Mux/4/Mux/4/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3671(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x3671 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x3672 = Fp(x3670) + Fp(x3671);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3673 = x3594 - x3672;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3673 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3674(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x3674 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x3675 = x3674 * x64;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3676(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x3676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x3677 = Fp(x3675) + Fp(x3676);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3678 = x3593 - x3677;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3678 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3593;
        host_args.at(1) = x3594;
        host_args.at(2) = x3595;
        host_args.at(3) = x3596;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        Fp x3679(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3680 = (x3679 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][186 * steps + cycle] = x3680;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3681 = x3679 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3682 = (x3681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][187 * steps + cycle] = x3682;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3683 = x3679 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3684 = (x3683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][188 * steps + cycle] = x3684;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3685 = x3679 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3686 = (x3685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][189 * steps + cycle] = x3686;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3687 = x3679 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3688 = (x3687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][190 * steps + cycle] = x3688;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3689 = x3679 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3690 = (x3689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][191 * steps + cycle] = x3690;
        }
        // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3691(args[2][187 * steps + ((cycle - 0) & mask)]);
        assert(x3691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3692(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x3692 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x3693 = x3692 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x3694 = Fp(x3691) + Fp(x3693);
        // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3695(args[2][189 * steps + ((cycle - 0) & mask)]);
        assert(x3695 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x3696 = x3695 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x3697 = Fp(x3694) + Fp(x3696);
        // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3698(args[2][190 * steps + ((cycle - 0) & mask)]);
        assert(x3698 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x3699 = x3698 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x3700 = Fp(x3697) + Fp(x3699);
        // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3701(args[2][191 * steps + ((cycle - 0) & mask)]);
        assert(x3701 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x3702 = x3701 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x3703 = Fp(x3700) + Fp(x3702);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3704 = x3703 - x3679;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3704 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      host_args.at(0) = x94;
      host_args.at(1) = x94;
      host_args.at(2) = x94;
      host_args.at(3) = x94;
      host_args.at(4) = x94;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      Fp x3705(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x3705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      Fp x3706(args[2][188 * steps + ((cycle - 0) & mask)]);
      assert(x3706 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      Fp x3707 = Fp(x3705) + Fp(x3706);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      Fp x3708(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x3708 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      Fp x3709 = Fp(x3707) + Fp(x3708);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      Fp x3710(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x3710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      Fp x3711(args[2][191 * steps + ((cycle - 0) & mask)]);
      assert(x3711 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      Fp x3712 = Fp(x3710) + Fp(x3711);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x3713 = x3654 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      Fp x3714 = x3657 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x3715 = Fp(x3713) + Fp(x3714);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x3716 = Fp(x3715) + Fp(x3660);
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      Fp x3717 = Fp(x3716) + Fp(x48);
      {
        host_args.at(0) = x3717;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x3718(host_outs.at(0));
        Fp x3719(host_outs.at(1));
        Fp x3720(host_outs.at(2));
        Fp x3721(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x3718;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x3719;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x3720;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x3721;
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3722(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x3722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3723(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x3723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3724(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x3724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3725(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x3725 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x3717;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x3587;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x3722;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x3723;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x3724;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x3725;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x3726 = x3643 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x3727 = Fp(x3726) + Fp(x3652);
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      Fp x3728 = Fp(x3727) + Fp(x48);
      {
        host_args.at(0) = x3728;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x3729(host_outs.at(0));
        Fp x3730(host_outs.at(1));
        Fp x3731(host_outs.at(2));
        Fp x3732(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][125 * steps + cycle] = x3729;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][126 * steps + cycle] = x3730;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][127 * steps + cycle] = x3731;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][128 * steps + cycle] = x3732;
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3733(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x3733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3734(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x3734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3735(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x3735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3736(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x3736 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][122 * steps + cycle] = x3728;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][123 * steps + cycle] = x3587;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][124 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][125 * steps + cycle] = x3733;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][126 * steps + cycle] = x3734;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][127 * steps + cycle] = x3735;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][128 * steps + cycle] = x3736;
      host_args.at(0) = x3716;
      host_args.at(1) = x3722;
      host_args.at(2) = x3723;
      host_args.at(3) = x3724;
      host_args.at(4) = x3725;
      host_args.at(5) = x3727;
      host_args.at(6) = x3733;
      host_args.at(7) = x3734;
      host_args.at(8) = x3735;
      host_args.at(9) = x3736;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      Fp x3737 = x3636 * x64;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      Fp x3738 = x3639 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      Fp x3739 = Fp(x3737) + Fp(x3738);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      Fp x3740 = Fp(x3739) + Fp(x3727);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3741 = x3711 * x3740;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3742 = x95 - x3711;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3743 = x3742 * x3733;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x3744 = Fp(x3741) + Fp(x3743);
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3745 = Fp(x3744.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        Fp x3746 = x3745 * x54;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][87 * steps + cycle] = x3746;
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3747 = Fp(x3744.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        Fp x3748 = x3747 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][192 * steps + cycle] = x3748;
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3749 = Fp(x3744.asUInt32() & x33.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3750 = Fp(x3749.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][193 * steps + cycle] = x3750;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3751 = Fp(x3749.asUInt32() & x92.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x3752 = x3751 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][194 * steps + cycle] = x3752;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3753 = Fp(x3749.asUInt32() & x78.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x3754 = x3753 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][195 * steps + cycle] = x3754;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3755 = Fp(x3749.asUInt32() & x70.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x3756 = x3755 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][196 * steps + cycle] = x3756;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3757 = Fp(x3749.asUInt32() & x59.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x3758 = x3757 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][197 * steps + cycle] = x3758;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3759(args[2][195 * steps + ((cycle - 0) & mask)]);
          assert(x3759 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          Fp x3760 = x3759 * x32;
          // loc("cirgen/components/u32.cpp":189:17)
          Fp x3761 = Fp(x3760) + Fp(x95);
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3762(args[2][194 * steps + ((cycle - 0) & mask)]);
          assert(x3762 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          Fp x3763 = x3762 * x77;
          // loc("cirgen/components/u32.cpp":189:38)
          Fp x3764 = Fp(x3763) + Fp(x95);
          // loc("cirgen/components/u32.cpp":189:16)
          Fp x3765 = x3761 * x3764;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3766(args[2][193 * steps + ((cycle - 0) & mask)]);
          assert(x3766 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          Fp x3767 = Fp(x3766) + Fp(x95);
          // loc("cirgen/components/u32.cpp":189:16)
          Fp x3768 = x3765 * x3767;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3769(args[2][197 * steps + ((cycle - 0) & mask)]);
          assert(x3769 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          Fp x3770 = x3769 * x92;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x3771(args[2][196 * steps + ((cycle - 0) & mask)]);
          assert(x3771 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          Fp x3772 = Fp(x3770) + Fp(x3771);
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3773 = (x3772 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          Fp x3774 = x3773 * x3768;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3775 = x3772 - x95;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3776 = (x3775 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          Fp x3777 = x3776 * x3768;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3778 = x3772 - x92;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3779 = (x3778 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          Fp x3780 = x3779 * x3768;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3781 = x3772 - x77;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3782 = (x3781 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          Fp x3783 = x3782 * x3768;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][198 * steps + cycle] = x3774;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][199 * steps + cycle] = x3777;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][200 * steps + cycle] = x3780;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][201 * steps + cycle] = x3783;
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3784(args[2][193 * steps + ((cycle - 0) & mask)]);
        assert(x3784 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3785(args[2][194 * steps + ((cycle - 0) & mask)]);
        assert(x3785 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x3786 = x3785 * x92;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x3787 = Fp(x3784) + Fp(x3786);
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3788(args[2][195 * steps + ((cycle - 0) & mask)]);
        assert(x3788 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x3789 = x3788 * x78;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x3790 = Fp(x3787) + Fp(x3789);
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3791(args[2][196 * steps + ((cycle - 0) & mask)]);
        assert(x3791 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x3792 = x3791 * x70;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x3793 = Fp(x3790) + Fp(x3792);
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x3794(args[2][197 * steps + ((cycle - 0) & mask)]);
        assert(x3794 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x3795 = x3794 * x59;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x3796 = Fp(x3793) + Fp(x3795);
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3797 = x3796 - x3749;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3797 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3798(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x3798 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      Fp x3799 = x3798 * x55;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3800(args[2][192 * steps + ((cycle - 0) & mask)]);
      assert(x3800 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      Fp x3801 = x3800 * x61;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      Fp x3802 = Fp(x3799) + Fp(x3801);
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3803(args[2][193 * steps + ((cycle - 0) & mask)]);
      assert(x3803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3804(args[2][194 * steps + ((cycle - 0) & mask)]);
      assert(x3804 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x3805 = x3804 * x92;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x3806 = Fp(x3803) + Fp(x3805);
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3807(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x3807 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x3808 = x3807 * x78;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x3809 = Fp(x3806) + Fp(x3808);
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3810(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x3810 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x3811 = x3810 * x70;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x3812 = Fp(x3809) + Fp(x3811);
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3813(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x3813 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x3814 = x3813 * x59;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x3815 = Fp(x3812) + Fp(x3814);
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      Fp x3816 = Fp(x3802) + Fp(x3815);
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3817 = x3744 - x3816;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3817 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3818(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x3818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3819(args[2][199 * steps + ((cycle - 0) & mask)]);
      assert(x3819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3820(args[2][200 * steps + ((cycle - 0) & mask)]);
      assert(x3820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3821(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x3821 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3822 = x3712 * x3818;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3823 = x3712 * x3819;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3824 = x3712 * x3820;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3825 = x3712 * x3821;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3826 = x95 - x3712;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3827 = x3826 * x3733;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3828 = x3826 * x3734;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3829 = x3826 * x3735;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x3830 = x3826 * x3736;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x3831 = Fp(x3822) + Fp(x3827);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x3832 = Fp(x3823) + Fp(x3828);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x3833 = Fp(x3824) + Fp(x3829);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x3834 = Fp(x3825) + Fp(x3830);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3835 = Fp(x3725.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x3836 = x3835 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][202 * steps + cycle] = x3836;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3837 = Fp(x3725.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x3838 = x3837 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][28 * steps + cycle] = x3838;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3839(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x3839 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x3840 = x3839 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x3841(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x3841 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x3842 = x3841 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x3843 = Fp(x3840) + Fp(x3842);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3844 = x3725 - x3843;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3844 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3845 = Fp(x3834.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x3846 = x3845 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][203 * steps + cycle] = x3846;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3847 = Fp(x3834.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x3848 = x3847 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][29 * steps + cycle] = x3848;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3849(args[2][203 * steps + ((cycle - 0) & mask)]);
      assert(x3849 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x3850 = x3849 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x3851(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x3851 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x3852 = x3851 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x3853 = Fp(x3850) + Fp(x3852);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3854 = x3834 - x3853;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3854 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      Fp x3855 = x3705 * x3849;
      // loc("cirgen/components/u32.cpp":213:3)
      args[2][204 * steps + cycle] = x3855;
      // loc("cirgen/components/u32.cpp":214:13)
      Fp x3856 = x3707 * x3839;
      // loc("cirgen/components/u32.cpp":214:3)
      args[2][205 * steps + cycle] = x3856;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3857 = x3722 * x3831;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3858 = x3723 * x3831;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3859 = x3722 * x3832;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3860 = Fp(x3858) + Fp(x3859);
      // loc("cirgen/components/u32.cpp":231:19)
      Fp x3861 = x3860 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      Fp x3862 = Fp(x3857) + Fp(x3861);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3863 = Fp(x3862.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][30 * steps + cycle] = x3863;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3864(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x3864 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3865 = x3862 - x3864;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3866 = x3865 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3867 = Fp(x3866.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][31 * steps + cycle] = x3867;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3868(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x3868 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3869 = x3866 - x3868;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3870 = x3869 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3871 = Fp(x3870.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][32 * steps + cycle] = x3871;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3872(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x3872 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3873 = x3870 - x3872;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3874 = x3873 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][88 * steps + cycle] = x3874;
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3875(args[2][88 * steps + ((cycle - 0) & mask)]);
      assert(x3875 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      Fp x3876 = x3875 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      Fp x3877 = Fp(x3872) + Fp(x3876);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3878 = x3724 * x3831;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3879 = x3723 * x3832;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3880 = Fp(x3878) + Fp(x3879);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3881 = x3722 * x3833;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3882 = Fp(x3880) + Fp(x3881);
      // loc("cirgen/components/u32.cpp":231:13)
      Fp x3883 = Fp(x3877) + Fp(x3882);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3884 = x3725 * x3831;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3885 = x3724 * x3832;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3886 = Fp(x3884) + Fp(x3885);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3887 = x3723 * x3833;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3888 = Fp(x3886) + Fp(x3887);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3889 = x3722 * x3834;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3890 = Fp(x3888) + Fp(x3889);
      // loc("cirgen/components/u32.cpp":231:19)
      Fp x3891 = x3890 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      Fp x3892 = Fp(x3883) + Fp(x3891);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3893 = Fp(x3892.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][33 * steps + cycle] = x3893;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3894(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x3894 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3895 = x3892 - x3894;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3896 = x3895 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3897 = Fp(x3896.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][34 * steps + cycle] = x3897;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3898(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x3898 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3899 = x3896 - x3898;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3900 = x3899 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3901 = Fp(x3900.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][35 * steps + cycle] = x3901;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3902(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x3902 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3903 = x3900 - x3902;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3904 = x3903 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][89 * steps + cycle] = x3904;
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3905(args[2][89 * steps + ((cycle - 0) & mask)]);
      assert(x3905 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      Fp x3906 = x3905 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      Fp x3907 = Fp(x3902) + Fp(x3906);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3908 = x3725 * x3832;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3909 = x3724 * x3833;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3910 = Fp(x3908) + Fp(x3909);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3911 = x3723 * x3834;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3912 = Fp(x3910) + Fp(x3911);
      // loc("cirgen/components/u32.cpp":231:13)
      Fp x3913 = Fp(x3907) + Fp(x3912);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3914 = x3725 * x3833;
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3915 = x3724 * x3834;
      // loc("cirgen/components/u32.cpp":229:20)
      Fp x3916 = Fp(x3914) + Fp(x3915);
      // loc("cirgen/components/u32.cpp":231:19)
      Fp x3917 = x3916 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      Fp x3918 = Fp(x3913) + Fp(x3917);
      // loc("cirgen/components/u32.cpp":234:13)
      Fp x3919 = Fp(x3918) + Fp(x31);
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3920(args[2][204 * steps + ((cycle - 0) & mask)]);
      assert(x3920 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      Fp x3921 = x3723 * x90;
      // loc("cirgen/components/u32.cpp":234:38)
      Fp x3922 = Fp(x3722) + Fp(x3921);
      // loc("cirgen/components/u32.cpp":234:30)
      Fp x3923 = x3920 * x3922;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3924 = x3919 - x3923;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3925(args[2][205 * steps + ((cycle - 0) & mask)]);
      assert(x3925 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      Fp x3926 = x3832 * x90;
      // loc("cirgen/components/u32.cpp":235:22)
      Fp x3927 = Fp(x3831) + Fp(x3926);
      // loc("cirgen/components/u32.cpp":235:14)
      Fp x3928 = x3925 * x3927;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3929 = x3924 - x3928;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3930 = Fp(x3929.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][36 * steps + cycle] = x3930;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3931(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x3931 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3932 = x3929 - x3931;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3933 = x3932 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3934 = Fp(x3933.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][37 * steps + cycle] = x3934;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3935(args[2][37 * steps + ((cycle - 0) & mask)]);
      assert(x3935 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3936 = x3933 - x3935;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3937 = x3936 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3938 = Fp(x3937.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][38 * steps + cycle] = x3938;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3939(args[2][38 * steps + ((cycle - 0) & mask)]);
      assert(x3939 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3940 = x3937 - x3939;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3941 = x3940 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][90 * steps + cycle] = x3941;
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3942(args[2][90 * steps + ((cycle - 0) & mask)]);
      assert(x3942 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      Fp x3943 = x3942 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      Fp x3944 = Fp(x3939) + Fp(x3943);
      // loc("cirgen/components/u32.cpp":229:31)
      Fp x3945 = x3725 * x3834;
      // loc("cirgen/components/u32.cpp":231:13)
      Fp x3946 = Fp(x3944) + Fp(x3945);
      // loc("cirgen/components/u32.cpp":238:13)
      Fp x3947 = Fp(x3946) + Fp(x30);
      // loc("cirgen/components/u32.cpp":238:53)
      Fp x3948 = x3725 * x90;
      // loc("cirgen/components/u32.cpp":238:38)
      Fp x3949 = Fp(x3724) + Fp(x3948);
      // loc("cirgen/components/u32.cpp":238:30)
      Fp x3950 = x3920 * x3949;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3951 = x3947 - x3950;
      // loc("cirgen/components/u32.cpp":239:37)
      Fp x3952 = x3834 * x90;
      // loc("cirgen/components/u32.cpp":239:22)
      Fp x3953 = Fp(x3833) + Fp(x3952);
      // loc("cirgen/components/u32.cpp":239:14)
      Fp x3954 = x3925 * x3953;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3955 = x3951 - x3954;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3956 = Fp(x3955.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][39 * steps + cycle] = x3956;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3957(args[2][39 * steps + ((cycle - 0) & mask)]);
      assert(x3957 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3958 = x3955 - x3957;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3959 = x3958 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3960 = Fp(x3959.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][40 * steps + cycle] = x3960;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3961(args[2][40 * steps + ((cycle - 0) & mask)]);
      assert(x3961 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3962 = x3959 - x3961;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3963 = x3962 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][91 * steps + cycle] = x3963;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x3964 = x3668 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      Fp x3965 = x3671 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x3966 = Fp(x3964) + Fp(x3965);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x3967 = Fp(x3966) + Fp(x3674);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3968 = (x3967 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][206 * steps + cycle] = x3968;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3969 = inv(x3967);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][207 * steps + cycle] = x3969;
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3970(args[2][206 * steps + ((cycle - 0) & mask)]);
      assert(x3970 != Fp::invalid());
      if (x3970 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3967 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3971 = x95 - x3970;
      if (x3971 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x3972(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x3972 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x3973 = x3967 * x3972;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3974 = x3973 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3974 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      Fp x3975 = Fp(x596) + Fp(x78);
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x3976 = Fp(x3975) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3977 = Fp(x3976.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x3977;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3978(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x3978 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3979 = x3976 - x3978;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3980 = x3979 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3981 = Fp(x3980.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x3981;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x3982(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x3982 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3983 = x3980 - x3982;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3984 = x3983 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3985 = Fp(x3984.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x3985;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x3986(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x3986 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3987 = x3984 - x3986;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x3988 = x3987 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3989 = Fp(x3988.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x3989;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3990(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x3990 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3991 = x3988 - x3990;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x3992 = x3991 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x3992;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x3993(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x3993 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3994 = x95 - x3993;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x3995 = x3993 * x3994;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x3995;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x3996(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x3996 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3997 = x92 - x3993;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x3998 = x3996 * x3997;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3998 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      args[2][93 * steps + cycle] = x75;
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      Fp x3999 = x3709 * x3971;
      if (x3999 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        Fp x4000 = Fp(x3967) + Fp(x48);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x3931;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x3935;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x3957;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x3961;
        {
          host_args.at(0) = x4000;
          host_args.at(1) = x3931;
          host_args.at(2) = x3935;
          host_args.at(3) = x3957;
          host_args.at(4) = x3961;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4001(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x4001 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4002(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x4002 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4003(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x4003 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4004(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x4004 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x4000;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x3587;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x4001;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x4002;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x4003;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x4004;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4005 = x95 - x3709;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      Fp x4006 = x4005 * x3971;
      if (x4006 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        Fp x4007 = Fp(x3967) + Fp(x48);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x3864;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x3868;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x3894;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x3898;
        {
          host_args.at(0) = x4007;
          host_args.at(1) = x3864;
          host_args.at(2) = x3868;
          host_args.at(3) = x3894;
          host_args.at(4) = x3898;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4008(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x4008 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4009(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x4009 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4010(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x4010 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4011(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x4011 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x4007;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x3587;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x4008;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x4009;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x4010;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x4011;
      }
      if (x3970 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        args[2][129 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":44:3)
        args[2][130 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":45:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][132 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][133 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][134 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][135 * steps + cycle] = x94;
      }
      // loc("Top/Mux/4/Mux/4/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      Fp x4012(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x4012 != Fp::invalid());
      if (x4012 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4013 = x3676 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4013 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3665 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4014 = x3641 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4014 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3705 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4015 = x3676 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4015 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4016 = x3665 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4016 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4017 = x3641 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4017 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3706 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4018 = x3676 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4018 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4019 = x3665 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4019 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4020 = x3641 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4020 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3708 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4021 = x3676 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4021 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4022 = x3665 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4022 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4023 = x3641 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4023 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3710 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4024 = x3676 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4024 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4025 = x3665 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4025 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3641 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3711 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4026 = x3676 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4026 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4027 = x3665 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3641 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
    Fp x4028(args[2][99 * steps + ((cycle - 0) & mask)]);
    assert(x4028 != Fp::invalid());
    if (x4028 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4029(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x4029 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      Fp x4030 = x596 * x76;
      {
        host_args.at(0) = x4030;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x4031(host_outs.at(0));
        Fp x4032(host_outs.at(1));
        Fp x4033(host_outs.at(2));
        Fp x4034(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x4031;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x4032;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x4033;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x4034;
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4035(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x4035 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4036(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x4036 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4037(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x4037 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4038(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x4038 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x4030;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x4029;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x4035;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x4036;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x4037;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x4038;
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4039 = Fp(x4038.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        Fp x4040 = x4039 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x4040;
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4041 = Fp(x4038.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        Fp x4042 = x4041 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x4042;
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4043 = Fp(x4038.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        Fp x4044 = x4043 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x4044;
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4045 = Fp(x4038.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        Fp x4046 = x4045 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x4046;
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4047 = Fp(x4038.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        Fp x4048 = x4047 * x56;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][78 * steps + cycle] = x4048;
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4049 = Fp(x4038.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x4049;
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4050 = Fp(x4037.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        Fp x4051 = x4050 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x4051;
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4052 = Fp(x4037.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        Fp x4053 = x4052 * x60;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x4053;
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4054 = Fp(x4037.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        Fp x4055 = x4054 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x4055;
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4056 = Fp(x4037.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        Fp x4057 = x4056 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][82 * steps + cycle] = x4057;
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4058 = Fp(x4037.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x4058;
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4059 = Fp(x4036.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        Fp x4060 = x4059 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x4060;
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4061 = Fp(x4036.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        Fp x4062 = x4061 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x4062;
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4063 = Fp(x4036.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        Fp x4064 = x4063 * x58;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][83 * steps + cycle] = x4064;
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4065 = Fp(x4036.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        Fp x4066 = x4065 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][85 * steps + cycle] = x4066;
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4067 = Fp(x4036.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][84 * steps + cycle] = x4067;
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4068 = Fp(x4035.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        Fp x4069 = x4068 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x4069;
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4070 = Fp(x4035.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        args[2][170 * steps + cycle] = x4070;
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4071(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x4071 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x4072 = x4071 * x55;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4073(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x4073 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x4074 = x4073 * x59;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4075(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x4075 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      Fp x4076 = x4075 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x4077 = Fp(x4074) + Fp(x4076);
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4078(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x4078 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      Fp x4079 = x4078 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x4080 = Fp(x4077) + Fp(x4079);
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4081(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x4081 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      Fp x4082 = Fp(x4080) + Fp(x4081);
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      Fp x4083 = Fp(x4072) + Fp(x4082);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x4084 = x4083 * x92;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4085(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x4085 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      Fp x4086 = Fp(x4084) + Fp(x4085);
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4087 = x4038 - x4086;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4087 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4088(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x4088 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x4089 = x4088 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4090(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x4090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      Fp x4091 = x4090 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x4092 = Fp(x4089) + Fp(x4091);
      // loc("Top/Mux/4/Mux/5/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4093(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x4093 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      Fp x4094 = Fp(x4092) + Fp(x4093);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x4095 = x4094 * x59;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4096(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x4096 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      Fp x4097 = x4096 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x4098 = Fp(x4095) + Fp(x4097);
      // loc("Top/Mux/4/Mux/5/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4099(args[2][81 * steps + ((cycle - 0) & mask)]);
      assert(x4099 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      Fp x4100 = Fp(x4098) + Fp(x4099);
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4101 = x4037 - x4100;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4101 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4102(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x4102 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x4103 = x4102 * x64;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4104(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x4104 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x4105 = x4104 * x78;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4106(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x4106 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      Fp x4107 = Fp(x4105) + Fp(x4106);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      Fp x4108 = x4107 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x4109 = Fp(x4103) + Fp(x4108);
      // loc("Top/Mux/4/Mux/5/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4110(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x4110 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      Fp x4111 = x4110 * x78;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x4112 = Fp(x4109) + Fp(x4111);
      // loc("Top/Mux/4/Mux/5/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4113(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x4113 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      Fp x4114 = Fp(x4112) + Fp(x4113);
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4115 = x4036 - x4114;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4115 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4116(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x4116 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x4117 = x4116 * x64;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x4118(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x4118 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      Fp x4119 = Fp(x4117) + Fp(x4118);
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4120 = x4035 - x4119;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4120 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4035;
        host_args.at(1) = x4036;
        host_args.at(2) = x4037;
        host_args.at(3) = x4038;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        Fp x4121(host_outs.at(0));
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4122 = (x4121 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][171 * steps + cycle] = x4122;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4123 = x4121 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4124 = (x4123 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][172 * steps + cycle] = x4124;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4125 = x4121 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4126 = (x4125 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][173 * steps + cycle] = x4126;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4127 = x4121 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4128 = (x4127 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][174 * steps + cycle] = x4128;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4129 = x4121 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4130 = (x4129 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][175 * steps + cycle] = x4130;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4131 = x4121 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4132 = (x4131 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][176 * steps + cycle] = x4132;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4133 = x4121 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4134 = (x4133 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][177 * steps + cycle] = x4134;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4135 = x4121 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4136 = (x4135 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][178 * steps + cycle] = x4136;
        }
        // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4137(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x4137 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4138(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x4138 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x4139 = x4138 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x4140 = Fp(x4137) + Fp(x4139);
        // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4141(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x4141 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x4142 = x4141 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x4143 = Fp(x4140) + Fp(x4142);
        // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4144(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x4144 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x4145 = x4144 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x4146 = Fp(x4143) + Fp(x4145);
        // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4147(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x4147 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x4148 = x4147 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x4149 = Fp(x4146) + Fp(x4148);
        // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4150(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x4150 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x4151 = x4150 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x4152 = Fp(x4149) + Fp(x4151);
        // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4153(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x4153 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x4154 = x4153 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x4155 = Fp(x4152) + Fp(x4154);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x4156 = x4155 - x4121;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x4156 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      Fp x4157(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x4157 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      Fp x4158(args[2][173 * steps + ((cycle - 0) & mask)]);
      assert(x4158 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      Fp x4159 = Fp(x4157) + Fp(x4158);
      // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      Fp x4160(args[2][174 * steps + ((cycle - 0) & mask)]);
      assert(x4160 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      Fp x4161 = Fp(x4158) + Fp(x4160);
      // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      Fp x4162(args[2][175 * steps + ((cycle - 0) & mask)]);
      assert(x4162 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      Fp x4163(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x4163 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      Fp x4164 = Fp(x4162) + Fp(x4163);
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      Fp x4165 = Fp(x4159) + Fp(x4163);
      // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      Fp x4166(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x4166 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      Fp x4167 = Fp(x4164) + Fp(x4166);
      // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      Fp x4168(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x4168 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      Fp x4169 = Fp(x4166) + Fp(x4168);
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      Fp x4170 = Fp(x4167) + Fp(x4168);
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      Fp x4171 = Fp(x4165) + Fp(x4168);
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      Fp x4172 = Fp(x4163) + Fp(x4168);
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      args[2][189 * steps + cycle] = x4171;
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      args[2][190 * steps + cycle] = x4172;
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      Fp x4173(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x4173 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":52:8))
      Fp x4174(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x4174 != Fp::invalid());
      host_args.at(0) = x4169;
      host_args.at(1) = x4170;
      host_args.at(2) = x4173;
      host_args.at(3) = x4174;
      host_args.at(4) = x4161;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x4175 = x4096 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      Fp x4176 = x4099 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x4177 = Fp(x4175) + Fp(x4176);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      Fp x4178 = Fp(x4177) + Fp(x4102);
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      Fp x4179 = Fp(x4178) + Fp(x48);
      {
        host_args.at(0) = x4179;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x4180(host_outs.at(0));
        Fp x4181(host_outs.at(1));
        Fp x4182(host_outs.at(2));
        Fp x4183(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x4180;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x4181;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x4182;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x4183;
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4184(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x4184 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4185(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x4185 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4186(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x4186 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4187(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x4187 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x4179;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x4029;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x4184;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x4185;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x4186;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x4187;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x4188 = x4085 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      Fp x4189 = Fp(x4188) + Fp(x4094);
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      Fp x4190 = Fp(x4189) + Fp(x48);
      {
        host_args.at(0) = x4190;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x4191(host_outs.at(0));
        Fp x4192(host_outs.at(1));
        Fp x4193(host_outs.at(2));
        Fp x4194(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][125 * steps + cycle] = x4191;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][126 * steps + cycle] = x4192;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][127 * steps + cycle] = x4193;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][128 * steps + cycle] = x4194;
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4195(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x4195 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4196(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x4196 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4197(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x4197 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4198(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x4198 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][122 * steps + cycle] = x4190;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][123 * steps + cycle] = x4029;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][124 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][125 * steps + cycle] = x4195;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][126 * steps + cycle] = x4196;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][127 * steps + cycle] = x4197;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][128 * steps + cycle] = x4198;
      host_args.at(0) = x4178;
      host_args.at(1) = x4184;
      host_args.at(2) = x4185;
      host_args.at(3) = x4186;
      host_args.at(4) = x4187;
      host_args.at(5) = x4189;
      host_args.at(6) = x4195;
      host_args.at(7) = x4196;
      host_args.at(8) = x4197;
      host_args.at(9) = x4198;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      Fp x4199 = x4078 * x64;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      Fp x4200 = x4081 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      Fp x4201 = Fp(x4199) + Fp(x4200);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      Fp x4202 = Fp(x4201) + Fp(x4189);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4203 = x4169 * x4202;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4204 = x95 - x4169;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4205 = x4204 * x4195;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4206 = Fp(x4203) + Fp(x4205);
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4207 = Fp(x4206.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        Fp x4208 = x4207 * x54;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][86 * steps + cycle] = x4208;
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4209 = Fp(x4206.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        Fp x4210 = x4209 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][179 * steps + cycle] = x4210;
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4211 = Fp(x4206.asUInt32() & x33.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4212 = Fp(x4211.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][180 * steps + cycle] = x4212;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4213 = Fp(x4211.asUInt32() & x92.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x4214 = x4213 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][181 * steps + cycle] = x4214;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4215 = Fp(x4211.asUInt32() & x78.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x4216 = x4215 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][182 * steps + cycle] = x4216;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4217 = Fp(x4211.asUInt32() & x70.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x4218 = x4217 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][183 * steps + cycle] = x4218;
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4219 = Fp(x4211.asUInt32() & x59.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          Fp x4220 = x4219 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][184 * steps + cycle] = x4220;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x4221(args[2][182 * steps + ((cycle - 0) & mask)]);
          assert(x4221 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          Fp x4222 = x4221 * x32;
          // loc("cirgen/components/u32.cpp":189:17)
          Fp x4223 = Fp(x4222) + Fp(x95);
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x4224(args[2][181 * steps + ((cycle - 0) & mask)]);
          assert(x4224 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          Fp x4225 = x4224 * x77;
          // loc("cirgen/components/u32.cpp":189:38)
          Fp x4226 = Fp(x4225) + Fp(x95);
          // loc("cirgen/components/u32.cpp":189:16)
          Fp x4227 = x4223 * x4226;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x4228(args[2][180 * steps + ((cycle - 0) & mask)]);
          assert(x4228 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          Fp x4229 = Fp(x4228) + Fp(x95);
          // loc("cirgen/components/u32.cpp":189:16)
          Fp x4230 = x4227 * x4229;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x4231(args[2][184 * steps + ((cycle - 0) & mask)]);
          assert(x4231 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          Fp x4232 = x4231 * x92;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x4233(args[2][183 * steps + ((cycle - 0) & mask)]);
          assert(x4233 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          Fp x4234 = Fp(x4232) + Fp(x4233);
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4235 = (x4234 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          Fp x4236 = x4235 * x4230;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4237 = x4234 - x95;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4238 = (x4237 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          Fp x4239 = x4238 * x4230;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4240 = x4234 - x92;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4241 = (x4240 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          Fp x4242 = x4241 * x4230;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4243 = x4234 - x77;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4244 = (x4243 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          Fp x4245 = x4244 * x4230;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][185 * steps + cycle] = x4236;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][186 * steps + cycle] = x4239;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][187 * steps + cycle] = x4242;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][188 * steps + cycle] = x4245;
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4246(args[2][180 * steps + ((cycle - 0) & mask)]);
        assert(x4246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4247(args[2][181 * steps + ((cycle - 0) & mask)]);
        assert(x4247 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x4248 = x4247 * x92;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x4249 = Fp(x4246) + Fp(x4248);
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4250(args[2][182 * steps + ((cycle - 0) & mask)]);
        assert(x4250 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x4251 = x4250 * x78;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x4252 = Fp(x4249) + Fp(x4251);
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4253(args[2][183 * steps + ((cycle - 0) & mask)]);
        assert(x4253 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x4254 = x4253 * x70;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x4255 = Fp(x4252) + Fp(x4254);
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4256(args[2][184 * steps + ((cycle - 0) & mask)]);
        assert(x4256 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        Fp x4257 = x4256 * x59;
        // loc("cirgen/components/u32.cpp":201:11)
        Fp x4258 = Fp(x4255) + Fp(x4257);
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4259 = x4258 - x4211;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4259 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4260(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x4260 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      Fp x4261 = x4260 * x55;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4262(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x4262 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      Fp x4263 = x4262 * x61;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      Fp x4264 = Fp(x4261) + Fp(x4263);
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4265(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x4265 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4266(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x4266 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x4267 = x4266 * x92;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x4268 = Fp(x4265) + Fp(x4267);
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4269(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x4269 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x4270 = x4269 * x78;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x4271 = Fp(x4268) + Fp(x4270);
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4272(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x4272 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x4273 = x4272 * x70;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x4274 = Fp(x4271) + Fp(x4273);
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4275(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x4275 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      Fp x4276 = x4275 * x59;
      // loc("cirgen/components/u32.cpp":201:11)
      Fp x4277 = Fp(x4274) + Fp(x4276);
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      Fp x4278 = Fp(x4264) + Fp(x4277);
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4279 = x4206 - x4278;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4279 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4280(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x4280 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4281(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x4281 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4282(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x4282 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4283(args[2][188 * steps + ((cycle - 0) & mask)]);
      assert(x4283 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4284 = x4170 * x4280;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4285 = x4170 * x4281;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4286 = x4170 * x4282;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4287 = x4170 * x4283;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4288 = x95 - x4170;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4289 = x4288 * x4195;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4290 = x4288 * x4196;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4291 = x4288 * x4197;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4292 = x4288 * x4198;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4293 = Fp(x4284) + Fp(x4289);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4294 = Fp(x4285) + Fp(x4290);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4295 = Fp(x4286) + Fp(x4291);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4296 = Fp(x4287) + Fp(x4292);
      // loc("cirgen/components/bytes.cpp":94:3)
      args[2][25 * steps + cycle] = x4293;
      // loc("cirgen/components/bytes.cpp":94:3)
      args[2][26 * steps + cycle] = x4294;
      // loc("cirgen/components/bytes.cpp":94:3)
      args[2][27 * steps + cycle] = x4295;
      // loc("cirgen/components/bytes.cpp":94:3)
      args[2][28 * steps + cycle] = x4296;
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x4297(args[2][25 * steps + ((cycle - 0) & mask)]);
        assert(x4297 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x4298(args[2][26 * steps + ((cycle - 0) & mask)]);
        assert(x4298 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":85:10))
        Fp x4299(args[2][27 * steps + ((cycle - 0) & mask)]);
        assert(x4299 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
        Fp x4300(args[2][28 * steps + ((cycle - 0) & mask)]);
        assert(x4300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        Fp x4301 = Fp(x4173) + Fp(x4174);
        host_args.at(0) = x4184;
        host_args.at(1) = x4185;
        host_args.at(2) = x4186;
        host_args.at(3) = x4187;
        host_args.at(4) = x4297;
        host_args.at(5) = x4298;
        host_args.at(6) = x4299;
        host_args.at(7) = x4300;
        host_args.at(8) = x4301;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        Fp x4302(host_outs.at(0));
        Fp x4303(host_outs.at(1));
        Fp x4304(host_outs.at(2));
        Fp x4305(host_outs.at(3));
        Fp x4306(host_outs.at(4));
        Fp x4307(host_outs.at(5));
        Fp x4308(host_outs.at(6));
        Fp x4309(host_outs.at(7));
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][29 * steps + cycle] = x4302;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][33 * steps + cycle] = x4306;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][30 * steps + cycle] = x4303;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][34 * steps + cycle] = x4307;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][31 * steps + cycle] = x4304;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][35 * steps + cycle] = x4308;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][32 * steps + cycle] = x4305;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][36 * steps + cycle] = x4309;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4310(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x4310 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4311(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x4311 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4312(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x4312 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4313(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x4313 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4314(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x4314 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4315(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x4315 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4316(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x4316 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4317(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x4317 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4318(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x4318 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4319(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x4319 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4320(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x4320 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4321(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x4321 != Fp::invalid());
      host_args.at(0) = x4184;
      host_args.at(1) = x4185;
      host_args.at(2) = x4186;
      host_args.at(3) = x4187;
      host_args.at(4) = x4310;
      host_args.at(5) = x4311;
      host_args.at(6) = x4312;
      host_args.at(7) = x4313;
      host_args.at(8) = x4314;
      host_args.at(9) = x4315;
      host_args.at(10) = x4316;
      host_args.at(11) = x4317;
      host_args.at(12) = x4318;
      host_args.at(13) = x4319;
      host_args.at(14) = x4320;
      host_args.at(15) = x4321;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x4322 = x4110 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      Fp x4323 = x4113 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x4324 = Fp(x4322) + Fp(x4323);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      Fp x4325 = Fp(x4324) + Fp(x4116);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4326 = (x4325 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][191 * steps + cycle] = x4326;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4327 = inv(x4325);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][192 * steps + cycle] = x4327;
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4328(args[2][191 * steps + ((cycle - 0) & mask)]);
      assert(x4328 != Fp::invalid());
      if (x4328 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4325 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4329 = x95 - x4328;
      if (x4329 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4330(args[2][192 * steps + ((cycle - 0) & mask)]);
        assert(x4330 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x4331 = x4325 * x4330;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4332 = x4331 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4332 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      Fp x4333 = x4161 * x4329;
      if (x4333 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        Fp x4334 = Fp(x4325) + Fp(x48);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x4318;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x4319;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x4320;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x4321;
        {
          host_args.at(0) = x4334;
          host_args.at(1) = x4318;
          host_args.at(2) = x4319;
          host_args.at(3) = x4320;
          host_args.at(4) = x4321;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4335(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x4335 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4336(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x4336 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4337(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x4337 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4338(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x4338 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x4334;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x4029;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x4335;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x4336;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x4337;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x4338;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4339 = x95 - x4161;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      Fp x4340 = x4339 * x4329;
      if (x4340 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        Fp x4341 = Fp(x4325) + Fp(x48);
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x4314;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x4315;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x4316;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x4317;
        {
          host_args.at(0) = x4341;
          host_args.at(1) = x4314;
          host_args.at(2) = x4315;
          host_args.at(3) = x4316;
          host_args.at(4) = x4317;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4342(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x4342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4343(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x4343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4344(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x4344 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x4345(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x4345 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x4341;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x4029;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x92;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x4342;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x4343;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x4344;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x4345;
      }
      if (x4328 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        args[2][129 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":44:3)
        args[2][130 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":45:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][132 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][133 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][134 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][135 * steps + cycle] = x94;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      Fp x4346 = Fp(x596) + Fp(x78);
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x4347 = Fp(x4346) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4348 = Fp(x4347.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x4348;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4349(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x4349 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4350 = x4347 - x4349;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4351 = x4350 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4352 = Fp(x4351.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x4352;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x4353(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x4353 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4354 = x4351 - x4353;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4355 = x4354 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4356 = Fp(x4355.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x4356;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4357(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x4357 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4358 = x4355 - x4357;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4359 = x4358 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4360 = Fp(x4359.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x4360;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4361(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x4361 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4362 = x4359 - x4361;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x4363 = x4362 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x4363;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4364(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x4364 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4365 = x95 - x4364;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x4366 = x4364 * x4365;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x4366;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x4367(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x4367 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4368 = x92 - x4364;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x4369 = x4367 * x4368;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4369 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      args[2][93 * steps + cycle] = x71;
      if (x4157 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4370 = x4118 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4370 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4371 = x4107 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4371 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4372 = x4083 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4372 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      Fp x4373(args[2][172 * steps + ((cycle - 0) & mask)]);
      assert(x4373 != Fp::invalid());
      if (x4373 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4374 = x4118 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4374 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4375 = x4107 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4375 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4376 = x4083 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4376 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4158 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4377 = x4118 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4377 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4378 = x4107 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4378 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4379 = x4083 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4379 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4160 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4380 = x4118 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4380 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4381 = x4107 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4381 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4382 = x4083 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4162 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4383 = x4118 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4383 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4384 = x4107 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4083 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4163 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4385 = x4118 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4385 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4386 = x4107 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4387 = x4083 - x61;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4387 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4166 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4388 = x4118 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4388 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4389 = x4107 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4389 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4083 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4168 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4390 = x4118 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4390 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4391 = x4107 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4391 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4392 = x4083 - x61;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4392 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
    Fp x4393(args[2][100 * steps + ((cycle - 0) & mask)]);
    assert(x4393 != Fp::invalid());
    if (x4393 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4394(args[2][118 * steps + ((cycle - 1) & mask)]);
      assert(x4394 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4395(args[2][119 * steps + ((cycle - 1) & mask)]);
      assert(x4395 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4396(args[2][120 * steps + ((cycle - 1) & mask)]);
      assert(x4396 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4397(args[2][121 * steps + ((cycle - 1) & mask)]);
      assert(x4397 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4398(args[2][191 * steps + ((cycle - 1) & mask)]);
      assert(x4398 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4399(args[2][192 * steps + ((cycle - 1) & mask)]);
      assert(x4399 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4400(args[2][193 * steps + ((cycle - 1) & mask)]);
      assert(x4400 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4401(args[2][194 * steps + ((cycle - 1) & mask)]);
      assert(x4401 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4402(args[2][195 * steps + ((cycle - 1) & mask)]);
      assert(x4402 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4403(args[2][196 * steps + ((cycle - 1) & mask)]);
      assert(x4403 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4404(args[2][197 * steps + ((cycle - 1) & mask)]);
      assert(x4404 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4405(args[2][198 * steps + ((cycle - 1) & mask)]);
      assert(x4405 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4406 = Fp(x4394.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][108 * steps + cycle] = x4406;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4407 = Fp(x4398.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][140 * steps + cycle] = x4407;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4408 = Fp(x4394.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4409 = x4408 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][109 * steps + cycle] = x4409;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4410 = Fp(x4398.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4411 = x4410 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][141 * steps + cycle] = x4411;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4412 = Fp(x4394.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4413 = x4412 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][110 * steps + cycle] = x4413;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4414 = Fp(x4398.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4415 = x4414 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][142 * steps + cycle] = x4415;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4416 = Fp(x4394.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4417 = x4416 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][111 * steps + cycle] = x4417;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4418 = Fp(x4398.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4419 = x4418 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][143 * steps + cycle] = x4419;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4420 = Fp(x4394.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4421 = x4420 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][112 * steps + cycle] = x4421;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4422 = Fp(x4398.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4423 = x4422 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][144 * steps + cycle] = x4423;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4424 = Fp(x4394.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4425 = x4424 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][113 * steps + cycle] = x4425;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4426 = Fp(x4398.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4427 = x4426 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][145 * steps + cycle] = x4427;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4428 = Fp(x4394.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4429 = x4428 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][114 * steps + cycle] = x4429;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4430 = Fp(x4398.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4431 = x4430 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][146 * steps + cycle] = x4431;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4432 = Fp(x4394.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4433 = x4432 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][115 * steps + cycle] = x4433;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4434 = Fp(x4398.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4435 = x4434 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][147 * steps + cycle] = x4435;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4436 = Fp(x4395.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][116 * steps + cycle] = x4436;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4437 = Fp(x4399.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][148 * steps + cycle] = x4437;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4438 = Fp(x4395.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4439 = x4438 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][117 * steps + cycle] = x4439;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4440 = Fp(x4399.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4441 = x4440 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][149 * steps + cycle] = x4441;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4442 = Fp(x4395.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4443 = x4442 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][118 * steps + cycle] = x4443;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4444 = Fp(x4399.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4445 = x4444 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][150 * steps + cycle] = x4445;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4446 = Fp(x4395.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4447 = x4446 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][119 * steps + cycle] = x4447;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4448 = Fp(x4399.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4449 = x4448 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][151 * steps + cycle] = x4449;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4450 = Fp(x4395.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4451 = x4450 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][120 * steps + cycle] = x4451;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4452 = Fp(x4399.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4453 = x4452 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][152 * steps + cycle] = x4453;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4454 = Fp(x4395.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4455 = x4454 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][121 * steps + cycle] = x4455;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4456 = Fp(x4399.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4457 = x4456 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][153 * steps + cycle] = x4457;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4458 = Fp(x4395.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4459 = x4458 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][122 * steps + cycle] = x4459;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4460 = Fp(x4399.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4461 = x4460 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][154 * steps + cycle] = x4461;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4462 = Fp(x4395.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4463 = x4462 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][123 * steps + cycle] = x4463;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4464 = Fp(x4399.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4465 = x4464 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][155 * steps + cycle] = x4465;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4466 = Fp(x4396.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][124 * steps + cycle] = x4466;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4467 = Fp(x4400.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][156 * steps + cycle] = x4467;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4468 = Fp(x4396.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4469 = x4468 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][125 * steps + cycle] = x4469;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4470 = Fp(x4400.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4471 = x4470 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][157 * steps + cycle] = x4471;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4472 = Fp(x4396.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4473 = x4472 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][126 * steps + cycle] = x4473;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4474 = Fp(x4400.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4475 = x4474 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][158 * steps + cycle] = x4475;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4476 = Fp(x4396.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4477 = x4476 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][127 * steps + cycle] = x4477;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4478 = Fp(x4400.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4479 = x4478 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][159 * steps + cycle] = x4479;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4480 = Fp(x4396.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4481 = x4480 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][128 * steps + cycle] = x4481;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4482 = Fp(x4400.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4483 = x4482 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][160 * steps + cycle] = x4483;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4484 = Fp(x4396.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4485 = x4484 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][129 * steps + cycle] = x4485;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4486 = Fp(x4400.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4487 = x4486 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x4487;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4488 = Fp(x4396.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4489 = x4488 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][130 * steps + cycle] = x4489;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4490 = Fp(x4400.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4491 = x4490 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x4491;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4492 = Fp(x4396.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4493 = x4492 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][131 * steps + cycle] = x4493;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4494 = Fp(x4400.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4495 = x4494 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x4495;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4496 = Fp(x4397.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][132 * steps + cycle] = x4496;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4497 = Fp(x4401.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x4497;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4498 = Fp(x4397.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4499 = x4498 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][133 * steps + cycle] = x4499;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4500 = Fp(x4401.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4501 = x4500 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x4501;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4502 = Fp(x4397.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4503 = x4502 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][134 * steps + cycle] = x4503;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4504 = Fp(x4401.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4505 = x4504 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x4505;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4506 = Fp(x4397.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4507 = x4506 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][135 * steps + cycle] = x4507;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4508 = Fp(x4401.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4509 = x4508 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x4509;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4510 = Fp(x4397.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4511 = x4510 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][136 * steps + cycle] = x4511;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4512 = Fp(x4401.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4513 = x4512 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x4513;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4514 = Fp(x4397.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4515 = x4514 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][137 * steps + cycle] = x4515;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4516 = Fp(x4401.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4517 = x4516 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x4517;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4518 = Fp(x4397.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4519 = x4518 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][138 * steps + cycle] = x4519;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4520 = Fp(x4401.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4521 = x4520 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][170 * steps + cycle] = x4521;
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4522 = Fp(x4397.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        Fp x4523 = x4522 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][139 * steps + cycle] = x4523;
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4524 = Fp(x4401.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        Fp x4525 = x4524 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][171 * steps + cycle] = x4525;
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4526(args[2][108 * steps + ((cycle - 0) & mask)]);
      assert(x4526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4527(args[2][140 * steps + ((cycle - 0) & mask)]);
      assert(x4527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4528 = x4526 * x4527;
      // loc("Top/Mux/4/Mux/6/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4529(args[2][109 * steps + ((cycle - 0) & mask)]);
      assert(x4529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4530(args[2][141 * steps + ((cycle - 0) & mask)]);
      assert(x4530 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4531 = x4529 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4532 = Fp(x4526) + Fp(x4531);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4533 = x4530 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4534 = Fp(x4527) + Fp(x4533);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4535 = x4529 * x4530;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4536 = x4535 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4537 = Fp(x4528) + Fp(x4536);
      // loc("Top/Mux/4/Mux/6/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4538(args[2][110 * steps + ((cycle - 0) & mask)]);
      assert(x4538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4539(args[2][142 * steps + ((cycle - 0) & mask)]);
      assert(x4539 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4540 = x4538 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4541 = Fp(x4532) + Fp(x4540);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4542 = x4539 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4543 = Fp(x4534) + Fp(x4542);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4544 = x4538 * x4539;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4545 = x4544 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4546 = Fp(x4537) + Fp(x4545);
      // loc("Top/Mux/4/Mux/6/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4547(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x4547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4548(args[2][143 * steps + ((cycle - 0) & mask)]);
      assert(x4548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4549 = x4547 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4550 = Fp(x4541) + Fp(x4549);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4551 = x4548 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4552 = Fp(x4543) + Fp(x4551);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4553 = x4547 * x4548;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4554 = x4553 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4555 = Fp(x4546) + Fp(x4554);
      // loc("Top/Mux/4/Mux/6/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4556(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x4556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4557(args[2][144 * steps + ((cycle - 0) & mask)]);
      assert(x4557 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4558 = x4556 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4559 = Fp(x4550) + Fp(x4558);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4560 = x4557 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4561 = Fp(x4552) + Fp(x4560);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4562 = x4556 * x4557;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4563 = x4562 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4564 = Fp(x4555) + Fp(x4563);
      // loc("Top/Mux/4/Mux/6/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4565(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x4565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4566(args[2][145 * steps + ((cycle - 0) & mask)]);
      assert(x4566 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4567 = x4565 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4568 = Fp(x4559) + Fp(x4567);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4569 = x4566 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4570 = Fp(x4561) + Fp(x4569);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4571 = x4565 * x4566;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4572 = x4571 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4573 = Fp(x4564) + Fp(x4572);
      // loc("Top/Mux/4/Mux/6/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4574(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x4574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4575(args[2][146 * steps + ((cycle - 0) & mask)]);
      assert(x4575 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4576 = x4574 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4577 = Fp(x4568) + Fp(x4576);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4578 = x4575 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4579 = Fp(x4570) + Fp(x4578);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4580 = x4574 * x4575;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4581 = x4580 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4582 = Fp(x4573) + Fp(x4581);
      // loc("Top/Mux/4/Mux/6/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4583(args[2][115 * steps + ((cycle - 0) & mask)]);
      assert(x4583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4584(args[2][147 * steps + ((cycle - 0) & mask)]);
      assert(x4584 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4585 = x4583 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4586 = Fp(x4577) + Fp(x4585);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4587 = x4584 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4588 = Fp(x4579) + Fp(x4587);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4589 = x4583 * x4584;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4590 = x4589 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4591 = Fp(x4582) + Fp(x4590);
      // loc("Top/Mux/4/Mux/6/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4592(args[2][116 * steps + ((cycle - 0) & mask)]);
      assert(x4592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4593(args[2][148 * steps + ((cycle - 0) & mask)]);
      assert(x4593 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4594 = x4592 * x4593;
      // loc("Top/Mux/4/Mux/6/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4595(args[2][117 * steps + ((cycle - 0) & mask)]);
      assert(x4595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4596(args[2][149 * steps + ((cycle - 0) & mask)]);
      assert(x4596 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4597 = x4595 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4598 = Fp(x4592) + Fp(x4597);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4599 = x4596 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4600 = Fp(x4593) + Fp(x4599);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4601 = x4595 * x4596;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4602 = x4601 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4603 = Fp(x4594) + Fp(x4602);
      // loc("Top/Mux/4/Mux/6/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4604(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x4604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4605(args[2][150 * steps + ((cycle - 0) & mask)]);
      assert(x4605 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4606 = x4604 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4607 = Fp(x4598) + Fp(x4606);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4608 = x4605 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4609 = Fp(x4600) + Fp(x4608);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4610 = x4604 * x4605;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4611 = x4610 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4612 = Fp(x4603) + Fp(x4611);
      // loc("Top/Mux/4/Mux/6/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4613(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x4613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4614(args[2][151 * steps + ((cycle - 0) & mask)]);
      assert(x4614 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4615 = x4613 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4616 = Fp(x4607) + Fp(x4615);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4617 = x4614 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4618 = Fp(x4609) + Fp(x4617);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4619 = x4613 * x4614;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4620 = x4619 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4621 = Fp(x4612) + Fp(x4620);
      // loc("Top/Mux/4/Mux/6/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4622(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x4622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4623(args[2][152 * steps + ((cycle - 0) & mask)]);
      assert(x4623 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4624 = x4622 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4625 = Fp(x4616) + Fp(x4624);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4626 = x4623 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4627 = Fp(x4618) + Fp(x4626);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4628 = x4622 * x4623;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4629 = x4628 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4630 = Fp(x4621) + Fp(x4629);
      // loc("Top/Mux/4/Mux/6/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4631(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x4631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4632(args[2][153 * steps + ((cycle - 0) & mask)]);
      assert(x4632 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4633 = x4631 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4634 = Fp(x4625) + Fp(x4633);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4635 = x4632 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4636 = Fp(x4627) + Fp(x4635);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4637 = x4631 * x4632;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4638 = x4637 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4639 = Fp(x4630) + Fp(x4638);
      // loc("Top/Mux/4/Mux/6/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4640(args[2][122 * steps + ((cycle - 0) & mask)]);
      assert(x4640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4641(args[2][154 * steps + ((cycle - 0) & mask)]);
      assert(x4641 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4642 = x4640 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4643 = Fp(x4634) + Fp(x4642);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4644 = x4641 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4645 = Fp(x4636) + Fp(x4644);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4646 = x4640 * x4641;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4647 = x4646 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4648 = Fp(x4639) + Fp(x4647);
      // loc("Top/Mux/4/Mux/6/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4649(args[2][123 * steps + ((cycle - 0) & mask)]);
      assert(x4649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4650(args[2][155 * steps + ((cycle - 0) & mask)]);
      assert(x4650 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4651 = x4649 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4652 = Fp(x4643) + Fp(x4651);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4653 = x4650 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4654 = Fp(x4645) + Fp(x4653);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4655 = x4649 * x4650;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4656 = x4655 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4657 = Fp(x4648) + Fp(x4656);
      // loc("Top/Mux/4/Mux/6/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4658(args[2][124 * steps + ((cycle - 0) & mask)]);
      assert(x4658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4659(args[2][156 * steps + ((cycle - 0) & mask)]);
      assert(x4659 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4660 = x4658 * x4659;
      // loc("Top/Mux/4/Mux/6/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4661(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x4661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4662(args[2][157 * steps + ((cycle - 0) & mask)]);
      assert(x4662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4663 = x4661 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4664 = Fp(x4658) + Fp(x4663);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4665 = x4662 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4666 = Fp(x4659) + Fp(x4665);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4667 = x4661 * x4662;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4668 = x4667 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4669 = Fp(x4660) + Fp(x4668);
      // loc("Top/Mux/4/Mux/6/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4670(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x4670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4671(args[2][158 * steps + ((cycle - 0) & mask)]);
      assert(x4671 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4672 = x4670 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4673 = Fp(x4664) + Fp(x4672);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4674 = x4671 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4675 = Fp(x4666) + Fp(x4674);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4676 = x4670 * x4671;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4677 = x4676 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4678 = Fp(x4669) + Fp(x4677);
      // loc("Top/Mux/4/Mux/6/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4679(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x4679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4680(args[2][159 * steps + ((cycle - 0) & mask)]);
      assert(x4680 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4681 = x4679 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4682 = Fp(x4673) + Fp(x4681);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4683 = x4680 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4684 = Fp(x4675) + Fp(x4683);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4685 = x4679 * x4680;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4686 = x4685 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4687 = Fp(x4678) + Fp(x4686);
      // loc("Top/Mux/4/Mux/6/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4688(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x4688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4689(args[2][160 * steps + ((cycle - 0) & mask)]);
      assert(x4689 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4690 = x4688 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4691 = Fp(x4682) + Fp(x4690);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4692 = x4689 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4693 = Fp(x4684) + Fp(x4692);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4694 = x4688 * x4689;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4695 = x4694 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4696 = Fp(x4687) + Fp(x4695);
      // loc("Top/Mux/4/Mux/6/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4697(args[2][129 * steps + ((cycle - 0) & mask)]);
      assert(x4697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4698(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x4698 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4699 = x4697 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4700 = Fp(x4691) + Fp(x4699);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4701 = x4698 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4702 = Fp(x4693) + Fp(x4701);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4703 = x4697 * x4698;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4704 = x4703 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4705 = Fp(x4696) + Fp(x4704);
      // loc("Top/Mux/4/Mux/6/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4706(args[2][130 * steps + ((cycle - 0) & mask)]);
      assert(x4706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4707(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x4707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4708 = x4706 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4709 = Fp(x4700) + Fp(x4708);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4710 = x4707 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4711 = Fp(x4702) + Fp(x4710);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4712 = x4706 * x4707;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4713 = x4712 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4714 = Fp(x4705) + Fp(x4713);
      // loc("Top/Mux/4/Mux/6/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4715(args[2][131 * steps + ((cycle - 0) & mask)]);
      assert(x4715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4716(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x4716 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4717 = x4715 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4718 = Fp(x4709) + Fp(x4717);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4719 = x4716 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4720 = Fp(x4711) + Fp(x4719);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4721 = x4715 * x4716;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4722 = x4721 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4723 = Fp(x4714) + Fp(x4722);
      // loc("Top/Mux/4/Mux/6/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4724(args[2][132 * steps + ((cycle - 0) & mask)]);
      assert(x4724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4725(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x4725 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4726 = x4724 * x4725;
      // loc("Top/Mux/4/Mux/6/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4727(args[2][133 * steps + ((cycle - 0) & mask)]);
      assert(x4727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4728(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x4728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4729 = x4727 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4730 = Fp(x4724) + Fp(x4729);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4731 = x4728 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4732 = Fp(x4725) + Fp(x4731);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4733 = x4727 * x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4734 = x4733 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4735 = Fp(x4726) + Fp(x4734);
      // loc("Top/Mux/4/Mux/6/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4736(args[2][134 * steps + ((cycle - 0) & mask)]);
      assert(x4736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4737(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x4737 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4738 = x4736 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4739 = Fp(x4730) + Fp(x4738);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4740 = x4737 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4741 = Fp(x4732) + Fp(x4740);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4742 = x4736 * x4737;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4743 = x4742 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4744 = Fp(x4735) + Fp(x4743);
      // loc("Top/Mux/4/Mux/6/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4745(args[2][135 * steps + ((cycle - 0) & mask)]);
      assert(x4745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4746(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x4746 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4747 = x4745 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4748 = Fp(x4739) + Fp(x4747);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4749 = x4746 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4750 = Fp(x4741) + Fp(x4749);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4751 = x4745 * x4746;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4752 = x4751 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4753 = Fp(x4744) + Fp(x4752);
      // loc("Top/Mux/4/Mux/6/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4754(args[2][136 * steps + ((cycle - 0) & mask)]);
      assert(x4754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4755(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x4755 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4756 = x4754 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4757 = Fp(x4748) + Fp(x4756);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4758 = x4755 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4759 = Fp(x4750) + Fp(x4758);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4760 = x4754 * x4755;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4761 = x4760 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4762 = Fp(x4753) + Fp(x4761);
      // loc("Top/Mux/4/Mux/6/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4763(args[2][137 * steps + ((cycle - 0) & mask)]);
      assert(x4763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4764(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x4764 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4765 = x4763 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4766 = Fp(x4757) + Fp(x4765);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4767 = x4764 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4768 = Fp(x4759) + Fp(x4767);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4769 = x4763 * x4764;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4770 = x4769 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4771 = Fp(x4762) + Fp(x4770);
      // loc("Top/Mux/4/Mux/6/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4772(args[2][138 * steps + ((cycle - 0) & mask)]);
      assert(x4772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4773(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x4773 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4774 = x4772 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4775 = Fp(x4766) + Fp(x4774);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4776 = x4773 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4777 = Fp(x4768) + Fp(x4776);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4778 = x4772 * x4773;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4779 = x4778 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4780 = Fp(x4771) + Fp(x4779);
      // loc("Top/Mux/4/Mux/6/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4781(args[2][139 * steps + ((cycle - 0) & mask)]);
      assert(x4781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4782(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x4782 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      Fp x4783 = x4781 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      Fp x4784 = Fp(x4775) + Fp(x4783);
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      Fp x4785 = x4782 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      Fp x4786 = Fp(x4777) + Fp(x4785);
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4787 = x4781 * x4782;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      Fp x4788 = x4787 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      Fp x4789 = Fp(x4780) + Fp(x4788);
      host_args.at(0) = x4394;
      host_args.at(1) = x4395;
      host_args.at(2) = x4396;
      host_args.at(3) = x4397;
      host_args.at(4) = x4586;
      host_args.at(5) = x4652;
      host_args.at(6) = x4718;
      host_args.at(7) = x4784;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4398;
      host_args.at(1) = x4399;
      host_args.at(2) = x4400;
      host_args.at(3) = x4401;
      host_args.at(4) = x4588;
      host_args.at(5) = x4654;
      host_args.at(6) = x4720;
      host_args.at(7) = x4786;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4402;
      host_args.at(1) = x4403;
      host_args.at(2) = x4404;
      host_args.at(3) = x4405;
      host_args.at(4) = x4591;
      host_args.at(5) = x4657;
      host_args.at(6) = x4723;
      host_args.at(7) = x4789;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4790 = x4394 - x4586;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4790 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4791 = x4395 - x4652;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4791 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4792 = x4396 - x4718;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4792 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4793 = x4397 - x4784;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4793 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4794 = x4398 - x4588;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4794 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4795 = x4399 - x4654;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4795 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4796 = x4400 - x4720;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4796 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4797 = x4401 - x4786;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4797 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4798 = x4402 - x4591;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4798 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4799 = x4403 - x4657;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4799 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4800 = x4404 - x4723;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4800 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4801 = x4405 - x4789;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x4802 = Fp(x596) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4803 = Fp(x4802.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x4803;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4804(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x4804 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4805 = x4802 - x4804;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4806 = x4805 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4807 = Fp(x4806.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x4807;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x4808(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x4808 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4809 = x4806 - x4808;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4810 = x4809 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4811 = Fp(x4810.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x4811;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4812(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x4812 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4813 = x4810 - x4812;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4814 = x4813 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4815 = Fp(x4814.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x4815;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4816(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x4816 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4817 = x4814 - x4816;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x4818 = x4817 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x4818;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4819(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x4819 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4820 = x95 - x4819;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x4821 = x4819 * x4820;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x4821;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x4822(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x4822 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4823 = x92 - x4819;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x4824 = x4822 * x4823;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4824 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      args[2][93 * steps + cycle] = x75;
    }
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/components/mux.h":37:25))
    Fp x4825(args[2][101 * steps + ((cycle - 0) & mask)]);
    assert(x4825 != Fp::invalid());
    if (x4825 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4826(args[2][118 * steps + ((cycle - 1) & mask)]);
      assert(x4826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4827(args[2][119 * steps + ((cycle - 1) & mask)]);
      assert(x4827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4828(args[2][120 * steps + ((cycle - 1) & mask)]);
      assert(x4828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4829(args[2][121 * steps + ((cycle - 1) & mask)]);
      assert(x4829 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4830(args[2][25 * steps + ((cycle - 1) & mask)]);
      assert(x4830 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4831(args[2][26 * steps + ((cycle - 1) & mask)]);
      assert(x4831 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4832(args[2][27 * steps + ((cycle - 1) & mask)]);
      assert(x4832 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4833(args[2][28 * steps + ((cycle - 1) & mask)]);
      assert(x4833 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4834(args[2][29 * steps + ((cycle - 1) & mask)]);
      assert(x4834 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4835(args[2][30 * steps + ((cycle - 1) & mask)]);
      assert(x4835 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4836(args[2][31 * steps + ((cycle - 1) & mask)]);
      assert(x4836 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4837(args[2][32 * steps + ((cycle - 1) & mask)]);
      assert(x4837 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4838(args[2][33 * steps + ((cycle - 1) & mask)]);
      assert(x4838 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4839(args[2][34 * steps + ((cycle - 1) & mask)]);
      assert(x4839 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4840(args[2][35 * steps + ((cycle - 1) & mask)]);
      assert(x4840 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4841(args[2][36 * steps + ((cycle - 1) & mask)]);
      assert(x4841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      Fp x4842(args[2][189 * steps + ((cycle - 1) & mask)]);
      assert(x4842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":136:51))
      Fp x4843(args[2][190 * steps + ((cycle - 1) & mask)]);
      assert(x4843 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4844 = Fp(x4829.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x4845 = x4844 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][108 * steps + cycle] = x4845;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4846 = Fp(x4829.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x4847 = x4846 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][13 * steps + cycle] = x4847;
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4848(args[2][108 * steps + ((cycle - 0) & mask)]);
      assert(x4848 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x4849 = x4848 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":85:10))
      Fp x4850(args[2][13 * steps + ((cycle - 0) & mask)]);
      assert(x4850 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x4851 = x4850 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x4852 = Fp(x4849) + Fp(x4851);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4853 = x4829 - x4852;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4853 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4854 = Fp(x4833.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        Fp x4855 = x4854 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][109 * steps + cycle] = x4855;
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4856 = Fp(x4833.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        Fp x4857 = x4856 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][14 * steps + cycle] = x4857;
      }
      // loc("Top/Mux/4/Mux/7/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4858(args[2][109 * steps + ((cycle - 0) & mask)]);
      assert(x4858 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x4859 = x4858 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x4860(args[2][14 * steps + ((cycle - 0) & mask)]);
      assert(x4860 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      Fp x4861 = x4860 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      Fp x4862 = Fp(x4859) + Fp(x4861);
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4863 = x4833 - x4862;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4863 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      Fp x4864 = x4842 * x4848;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      args[2][110 * steps + cycle] = x4864;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4865 = x95 - x4843;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      Fp x4866 = x4842 * x4865;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      Fp x4867 = x4866 * x4858;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      args[2][111 * steps + cycle] = x4867;
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x4868(args[2][110 * steps + ((cycle - 0) & mask)]);
      assert(x4868 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4869 = x95 - x4868;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4870 = x4869 * x4826;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4871 = x4869 * x4827;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4872 = x4869 * x4828;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4873 = x4869 * x4829;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4874 = Fp(x4870) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4875 = Fp(x4871) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4876 = Fp(x4872) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4877 = Fp(x4873) + Fp(x91);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4878 = x4868 * x4826;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4879 = x4868 * x4827;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4880 = x4868 * x4828;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4881 = x4868 * x4829;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4882 = x4874 - x4878;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4883 = x4875 - x4879;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4884 = x4876 - x4880;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4885 = x4877 - x4881;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      Fp x4886 = x4868 * x4843;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4887 = x4882 - x4886;
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x4888 = x4883 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x4889 = Fp(x4887) + Fp(x4888);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4890 = Fp(x4889.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][15 * steps + cycle] = x4890;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x4891(args[2][15 * steps + ((cycle - 0) & mask)]);
      assert(x4891 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4892 = x4889 - x4891;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4893 = x4892 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4894 = Fp(x4893.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][16 * steps + cycle] = x4894;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4895(args[2][16 * steps + ((cycle - 0) & mask)]);
      assert(x4895 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4896 = x4893 - x4895;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4897 = x4896 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][74 * steps + cycle] = x4897;
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4898(args[2][74 * steps + ((cycle - 0) & mask)]);
      assert(x4898 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x4899 = Fp(x4898) + Fp(x4884);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x4900 = x4885 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x4901 = Fp(x4899) + Fp(x4900);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4902 = Fp(x4901.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][17 * steps + cycle] = x4902;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x4903(args[2][17 * steps + ((cycle - 0) & mask)]);
      assert(x4903 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4904 = x4901 - x4903;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4905 = x4904 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4906 = Fp(x4905.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][18 * steps + cycle] = x4906;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4907(args[2][18 * steps + ((cycle - 0) & mask)]);
      assert(x4907 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4908 = x4905 - x4907;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4909 = x4908 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][75 * steps + cycle] = x4909;
      host_args.at(0) = x4826;
      host_args.at(1) = x4827;
      host_args.at(2) = x4828;
      host_args.at(3) = x4829;
      host_args.at(4) = x4891;
      host_args.at(5) = x4895;
      host_args.at(6) = x4903;
      host_args.at(7) = x4907;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x4910(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x4910 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4911 = x95 - x4910;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4912 = x4911 * x4830;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4913 = x4911 * x4831;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4914 = x4911 * x4832;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4915 = x4911 * x4833;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4916 = Fp(x4912) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4917 = Fp(x4913) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4918 = Fp(x4914) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4919 = Fp(x4915) + Fp(x91);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4920 = x4910 * x4830;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4921 = x4910 * x4831;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4922 = x4910 * x4832;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4923 = x4910 * x4833;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4924 = x4916 - x4920;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4925 = x4917 - x4921;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4926 = x4918 - x4922;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4927 = x4919 - x4923;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      Fp x4928 = x4910 * x4843;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4929 = x4924 - x4928;
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x4930 = x4925 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x4931 = Fp(x4929) + Fp(x4930);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4932 = Fp(x4931.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][19 * steps + cycle] = x4932;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x4933(args[2][19 * steps + ((cycle - 0) & mask)]);
      assert(x4933 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4934 = x4931 - x4933;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4935 = x4934 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4936 = Fp(x4935.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][20 * steps + cycle] = x4936;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4937(args[2][20 * steps + ((cycle - 0) & mask)]);
      assert(x4937 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4938 = x4935 - x4937;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4939 = x4938 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][76 * steps + cycle] = x4939;
      // loc("Top/Mux/4/Mux/7/U32Normalize1/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4940(args[2][76 * steps + ((cycle - 0) & mask)]);
      assert(x4940 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x4941 = Fp(x4940) + Fp(x4926);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x4942 = x4927 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x4943 = Fp(x4941) + Fp(x4942);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4944 = Fp(x4943.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][21 * steps + cycle] = x4944;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x4945(args[2][21 * steps + ((cycle - 0) & mask)]);
      assert(x4945 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4946 = x4943 - x4945;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4947 = x4946 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4948 = Fp(x4947.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][22 * steps + cycle] = x4948;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x4949(args[2][22 * steps + ((cycle - 0) & mask)]);
      assert(x4949 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4950 = x4947 - x4949;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x4951 = x4950 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][77 * steps + cycle] = x4951;
      host_args.at(0) = x4830;
      host_args.at(1) = x4831;
      host_args.at(2) = x4832;
      host_args.at(3) = x4833;
      host_args.at(4) = x4933;
      host_args.at(5) = x4937;
      host_args.at(6) = x4945;
      host_args.at(7) = x4949;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      Fp x4952 = x4937 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      Fp x4953 = Fp(x4933) + Fp(x4952);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4954 = (x4953 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][113 * steps + cycle] = x4954;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4955 = inv(x4953);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][114 * steps + cycle] = x4955;
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4956(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x4956 != Fp::invalid());
      if (x4956 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4953 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4957 = x95 - x4956;
      if (x4957 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4958(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x4958 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x4959 = x4953 * x4958;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4960 = x4959 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4960 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      Fp x4961 = x4949 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x4962 = Fp(x4945) + Fp(x4961);
      // loc("cirgen/components/u32.cpp":138:47)
      Fp x4963 = x4957 * x80;
      // loc("cirgen/components/u32.cpp":138:13)
      Fp x4964 = Fp(x4962) + Fp(x4963);
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4965 = (x4964 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][115 * steps + cycle] = x4965;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4966 = inv(x4964);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][116 * steps + cycle] = x4966;
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x4967(args[2][115 * steps + ((cycle - 0) & mask)]);
      assert(x4967 != Fp::invalid());
      if (x4967 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4964 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4968 = x95 - x4967;
      if (x4968 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x4969(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x4969 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x4970 = x4964 * x4969;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4971 = x4970 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4971 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      Fp x4972 = Fp(x4868) + Fp(x4910);
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      Fp x4973 = x4868 * x92;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      Fp x4974 = x4973 * x4910;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4975 = x4972 - x4974;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      Fp x4976 = x4967 * x4868;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4977 = x4975 - x4976;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      args[2][112 * steps + cycle] = x4977;
      // loc("Top/Mux/4/Mux/7/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x4978(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x4978 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x4979 = x95 - x4978;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4980 = x4979 * x4834;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4981 = x4979 * x4835;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4982 = x4979 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4983 = x4979 * x4837;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4984 = Fp(x4980) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4985 = Fp(x4981) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4986 = Fp(x4982) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x4987 = Fp(x4983) + Fp(x91);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4988 = x4978 * x4834;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4989 = x4978 * x4835;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4990 = x4978 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x4991 = x4978 * x4837;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4992 = x4984 - x4988;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4993 = x4985 - x4989;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4994 = x4986 - x4990;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4995 = x4987 - x4991;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      Fp x4996 = x4978 * x4843;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4997 = x4992 - x4996;
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x4998 = x4993 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x4999 = Fp(x4997) + Fp(x4998);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5000 = Fp(x4999.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][23 * steps + cycle] = x5000;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5001(args[2][23 * steps + ((cycle - 0) & mask)]);
      assert(x5001 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5002 = x4999 - x5001;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5003 = x5002 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5004 = Fp(x5003.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][24 * steps + cycle] = x5004;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5005(args[2][24 * steps + ((cycle - 0) & mask)]);
      assert(x5005 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5006 = x5003 - x5005;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5007 = x5006 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][78 * steps + cycle] = x5007;
      // loc("Top/Mux/4/Mux/7/U32Normalize2/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5008(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x5008 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x5009 = Fp(x5008) + Fp(x4994);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x5010 = x4995 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x5011 = Fp(x5009) + Fp(x5010);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5012 = Fp(x5011.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][25 * steps + cycle] = x5012;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5013(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x5013 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5014 = x5011 - x5013;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5015 = x5014 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5016 = Fp(x5015.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][26 * steps + cycle] = x5016;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5017(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x5017 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5018 = x5015 - x5017;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5019 = x5018 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][79 * steps + cycle] = x5019;
      host_args.at(0) = x4834;
      host_args.at(1) = x4835;
      host_args.at(2) = x4836;
      host_args.at(3) = x4837;
      host_args.at(4) = x5001;
      host_args.at(5) = x5005;
      host_args.at(6) = x5013;
      host_args.at(7) = x5017;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5020 = x4869 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5021 = x4869 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5022 = x4869 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5023 = x4869 * x4841;
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5024 = Fp(x5020) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5025 = Fp(x5021) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5026 = Fp(x5022) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5027 = Fp(x5023) + Fp(x91);
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5028 = x4868 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5029 = x4868 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5030 = x4868 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      Fp x5031 = x4868 * x4841;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5032 = x5024 - x5028;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5033 = x5025 - x5029;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5034 = x5026 - x5030;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5035 = x5027 - x5031;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5036 = x5032 - x4886;
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x5037 = x5033 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x5038 = Fp(x5036) + Fp(x5037);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5039 = Fp(x5038.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][27 * steps + cycle] = x5039;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5040(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x5040 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5041 = x5038 - x5040;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5042 = x5041 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5043 = Fp(x5042.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][28 * steps + cycle] = x5043;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5044(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x5044 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5045 = x5042 - x5044;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5046 = x5045 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][80 * steps + cycle] = x5046;
      // loc("Top/Mux/4/Mux/7/U32Normalize3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5047(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x5047 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x5048 = Fp(x5047) + Fp(x5034);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x5049 = x5035 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x5050 = Fp(x5048) + Fp(x5049);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5051 = Fp(x5050.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][29 * steps + cycle] = x5051;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5052(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x5052 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5053 = x5050 - x5052;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5054 = x5053 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5055 = Fp(x5054.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][30 * steps + cycle] = x5055;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5056(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x5056 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5057 = x5054 - x5056;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5058 = x5057 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][81 * steps + cycle] = x5058;
      host_args.at(0) = x4838;
      host_args.at(1) = x4839;
      host_args.at(2) = x4840;
      host_args.at(3) = x4841;
      host_args.at(4) = x5040;
      host_args.at(5) = x5044;
      host_args.at(6) = x5052;
      host_args.at(7) = x5056;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5059 = Fp(x4933) + Fp(x90);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5060 = Fp(x4937) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5061 = Fp(x4945) + Fp(x91);
      // loc("cirgen/components/u32.cpp":89:20)
      Fp x5062 = Fp(x4949) + Fp(x91);
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5063 = x5059 - x95;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5064 = x5063 - x5040;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5065 = x5060 - x5044;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5066 = x5061 - x5052;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5067 = x5062 - x5056;
      // loc("cirgen/components/u32.cpp":146:29)
      Fp x5068 = x5065 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      Fp x5069 = Fp(x5064) + Fp(x5068);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5070 = Fp(x5069.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][31 * steps + cycle] = x5070;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5071(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x5071 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5072 = x5069 - x5071;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5073 = x5072 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5074 = Fp(x5073.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][32 * steps + cycle] = x5074;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5075(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x5075 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5076 = x5073 - x5075;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5077 = x5076 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][82 * steps + cycle] = x5077;
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5078(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x5078 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x5079 = Fp(x5078) + Fp(x5066);
      // loc("cirgen/components/u32.cpp":148:41)
      Fp x5080 = x5067 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      Fp x5081 = Fp(x5079) + Fp(x5080);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5082 = Fp(x5081.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][33 * steps + cycle] = x5082;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5083(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x5083 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5084 = x5081 - x5083;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5085 = x5084 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5086 = Fp(x5085.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][34 * steps + cycle] = x5086;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5087(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x5087 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5088 = x5085 - x5087;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5089 = x5088 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][83 * steps + cycle] = x5089;
      // loc("cirgen/components/u32.cpp":260:14)
      Fp x5090 = x5001 * x4933;
      // loc("cirgen/components/u32.cpp":260:14)
      Fp x5091 = Fp(x5090) + Fp(x5040);
      // loc("cirgen/components/u32.cpp":261:21)
      Fp x5092 = x5001 * x4937;
      // loc("cirgen/components/u32.cpp":261:51)
      Fp x5093 = x5005 * x4933;
      // loc("cirgen/components/u32.cpp":261:21)
      Fp x5094 = Fp(x5092) + Fp(x5093);
      // loc("cirgen/components/u32.cpp":261:21)
      Fp x5095 = Fp(x5094) + Fp(x5044);
      // loc("cirgen/components/u32.cpp":261:14)
      Fp x5096 = x5095 * x90;
      // loc("cirgen/components/u32.cpp":260:14)
      Fp x5097 = Fp(x5091) + Fp(x5096);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5098 = Fp(x5097.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][35 * steps + cycle] = x5098;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5099(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x5099 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5100 = x5097 - x5099;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5101 = x5100 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5102 = Fp(x5101.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][36 * steps + cycle] = x5102;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5103(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x5103 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5104 = x5101 - x5103;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5105 = x5104 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5106 = Fp(x5105.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][39 * steps + cycle] = x5106;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5107(args[2][39 * steps + ((cycle - 0) & mask)]);
      assert(x5107 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5108 = x5105 - x5107;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5109 = x5108 * x89;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][84 * steps + cycle] = x5109;
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5110(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x5110 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      Fp x5111 = x5110 * x90;
      // loc("cirgen/components/u32.cpp":264:15)
      Fp x5112 = Fp(x5111) + Fp(x5107);
      // loc("cirgen/components/u32.cpp":266:7)
      Fp x5113 = x5005 * x4949;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5113 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      Fp x5114 = x5013 * x4945;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5114 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      Fp x5115 = x5017 * x4937;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5115 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      Fp x5116 = x5013 * x4949;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5116 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      Fp x5117 = x5017 * x4945;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5117 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      Fp x5118 = x5017 * x4949;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5118 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      Fp x5119 = x5013 * x4933;
      // loc("cirgen/components/u32.cpp":273:45)
      Fp x5120 = x5005 * x4937;
      // loc("cirgen/components/u32.cpp":273:15)
      Fp x5121 = Fp(x5119) + Fp(x5120);
      // loc("cirgen/components/u32.cpp":274:15)
      Fp x5122 = x5001 * x4945;
      // loc("cirgen/components/u32.cpp":273:15)
      Fp x5123 = Fp(x5121) + Fp(x5122);
      // loc("cirgen/components/u32.cpp":273:15)
      Fp x5124 = Fp(x5123) + Fp(x5052);
      // loc("cirgen/components/u32.cpp":273:15)
      Fp x5125 = Fp(x5124) + Fp(x5112);
      // loc("cirgen/components/u32.cpp":275:22)
      Fp x5126 = x5017 * x4933;
      // loc("cirgen/components/u32.cpp":275:52)
      Fp x5127 = x5013 * x4937;
      // loc("cirgen/components/u32.cpp":275:22)
      Fp x5128 = Fp(x5126) + Fp(x5127);
      // loc("cirgen/components/u32.cpp":276:22)
      Fp x5129 = x5005 * x4945;
      // loc("cirgen/components/u32.cpp":275:22)
      Fp x5130 = Fp(x5128) + Fp(x5129);
      // loc("cirgen/components/u32.cpp":276:52)
      Fp x5131 = x5001 * x4949;
      // loc("cirgen/components/u32.cpp":275:22)
      Fp x5132 = Fp(x5130) + Fp(x5131);
      // loc("cirgen/components/u32.cpp":275:22)
      Fp x5133 = Fp(x5132) + Fp(x5056);
      // loc("cirgen/components/u32.cpp":275:15)
      Fp x5134 = x5133 * x90;
      // loc("cirgen/components/u32.cpp":273:15)
      Fp x5135 = Fp(x5125) + Fp(x5134);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5136 = Fp(x5135.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][37 * steps + cycle] = x5136;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5137(args[2][37 * steps + ((cycle - 0) & mask)]);
      assert(x5137 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5138 = x5135 - x5137;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5139 = x5138 * x89;
      // loc("cirgen/components/bytes.cpp":94:3)
      args[2][38 * steps + cycle] = x5139;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":85:10))
      Fp x5140(args[2][38 * steps + ((cycle - 0) & mask)]);
      assert(x5140 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5141(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x5141 != Fp::invalid());
      host_args.at(0) = x5099;
      host_args.at(1) = x5103;
      host_args.at(2) = x5137;
      host_args.at(3) = x5140;
      host_args.at(4) = x5141;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5142 = x5099 - x4891;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5142 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5143 = x5103 - x4895;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5143 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5144 = x5137 - x4903;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5144 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5145 = x5140 - x4907;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5145 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x4968 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5146 = x5141 - x95;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5146 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x5147 = Fp(x596) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5148 = Fp(x5147.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x5148;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5149(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x5149 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5150 = x5147 - x5149;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5151 = x5150 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5152 = Fp(x5151.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x5152;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5153(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x5153 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5154 = x5151 - x5153;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5155 = x5154 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5156 = Fp(x5155.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x5156;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5157(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x5157 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5158 = x5155 - x5157;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5159 = x5158 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5160 = Fp(x5159.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x5160;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5161(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x5161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5162 = x5159 - x5161;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x5163 = x5162 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x5163;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5164(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x5164 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5165 = x95 - x5164;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x5166 = x5164 * x5165;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x5166;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x5167(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x5167 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5168 = x92 - x5164;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x5169 = x5167 * x5168;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5169 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      args[2][93 * steps + cycle] = x75;
    }
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/components/mux.h":37:25))
    Fp x5170(args[2][102 * steps + ((cycle - 0) & mask)]);
    assert(x5170 != Fp::invalid());
    if (x5170 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5171(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x5171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":122:41)
      Fp x5172 = x596 * x76;
      {
        host_args.at(0) = x5172;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x5173(host_outs.at(0));
        Fp x5174(host_outs.at(1));
        Fp x5175(host_outs.at(2));
        Fp x5176(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x5173;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x5174;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x5175;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x5176;
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5177(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x5177 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5178(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x5178 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5179(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x5179 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5180(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x5180 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x5172;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x5171;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x5177;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x5178;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x5179;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x5180;
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      auto x5181 = x5177 - x29;
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      if (x5181 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:124");
      // loc("cirgen/circuit/rv32im/ecall.cpp":125:7)
      if (x5178 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:125");
      // loc("cirgen/circuit/rv32im/ecall.cpp":126:7)
      if (x5179 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:126");
      // loc("cirgen/circuit/rv32im/ecall.cpp":127:7)
      if (x5180 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:127");
      {
        host_args.at(0) = x28;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x5182(host_outs.at(0));
        Fp x5183(host_outs.at(1));
        Fp x5184(host_outs.at(2));
        Fp x5185(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x5182;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x5183;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x5184;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x5185;
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5186(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x5186 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5187(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x5187 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5188(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x5188 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5189(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x5189 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x28;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x5171;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x5186;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x5187;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x5188;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x5189;
      {
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5190 = (x5186 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][176 * steps + cycle] = x5190;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5191 = x5186 - x95;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5192 = (x5191 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][177 * steps + cycle] = x5192;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5193 = x5186 - x92;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5194 = (x5193 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][178 * steps + cycle] = x5194;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5195 = x5186 - x77;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5196 = (x5195 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][179 * steps + cycle] = x5196;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5197 = x5186 - x78;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5198 = (x5197 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][180 * steps + cycle] = x5198;
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x5199(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x5199 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x5200(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x5200 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x5201 = x5200 * x92;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x5202 = Fp(x5199) + Fp(x5201);
      // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x5203(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x5203 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x5204 = x5203 * x77;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x5205 = Fp(x5202) + Fp(x5204);
      // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x5206(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x5206 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x5207 = x5206 * x78;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x5208 = Fp(x5205) + Fp(x5207);
      // loc("./cirgen/components/onehot.h":38:8)
      auto x5209 = x5208 - x5186;
      // loc("./cirgen/components/onehot.h":38:8)
      if (x5209 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x5210 = (x5208 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x5211 = x95 - x5210;
        if (x5211 != 0) {
          host_args.at(0) = x5186;
          host_args.at(1) = x5187;
          host_args.at(2) = x5188;
          host_args.at(3) = x5189;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("./cirgen/components/mux.h":37:25))
      Fp x5212(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x5212 != Fp::invalid());
      if (x5212 != 0) {
        {
          host_args.at(0) = x5186;
          host_args.at(1) = x5187;
          host_args.at(2) = x5188;
          host_args.at(3) = x5189;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x5213 = Fp(x596) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5214 = Fp(x5213.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x5214;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5215(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x5215 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5216 = x5213 - x5215;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5217 = x5216 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5218 = Fp(x5217.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x5218;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x5219(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x5219 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5220 = x5217 - x5219;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5221 = x5220 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5222 = Fp(x5221.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x5222;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5223(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x5223 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5224 = x5221 - x5223;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5225 = x5224 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5226 = Fp(x5225.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x5226;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5227(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x5227 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5228 = x5225 - x5227;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x5229 = x5228 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x5229;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5230(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x5230 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5231 = x95 - x5230;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x5232 = x5230 * x5231;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x5232;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5233(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x5233 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5234 = x92 - x5230;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x5235 = x5233 * x5234;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5235 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        args[2][93 * steps + cycle] = x70;
      }
      if (x5199 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5236(host_outs.at(0));
          Fp x5237(host_outs.at(1));
          Fp x5238(host_outs.at(2));
          Fp x5239(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x5236;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x5237;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][127 * steps + cycle] = x5238;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][128 * steps + cycle] = x5239;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5240(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x5240 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5241(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x5241 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5242(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x5242 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5243(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x5243 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][122 * steps + cycle] = x27;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][123 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][124 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x5240;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x5241;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][127 * steps + cycle] = x5242;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][128 * steps + cycle] = x5243;
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5244(host_outs.at(0));
          Fp x5245(host_outs.at(1));
          Fp x5246(host_outs.at(2));
          Fp x5247(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x5244;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x5245;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][134 * steps + cycle] = x5246;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][135 * steps + cycle] = x5247;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5248(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x5248 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5249(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x5249 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5250(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x5250 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5251(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x5251 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x26;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x5248;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x5249;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x5250;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x5251;
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5252 = (x5240 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][181 * steps + cycle] = x5252;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5253 = x5240 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5254 = (x5253 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][182 * steps + cycle] = x5254;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5255 = x5240 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5256 = (x5255 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][183 * steps + cycle] = x5256;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5257 = x5240 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5258 = (x5257 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][184 * steps + cycle] = x5258;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5259 = x5240 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5260 = (x5259 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][185 * steps + cycle] = x5260;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5261 = x5240 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5262 = (x5261 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][186 * steps + cycle] = x5262;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5263 = x5240 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5264 = (x5263 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][187 * steps + cycle] = x5264;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5265 = x5240 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5266 = (x5265 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][188 * steps + cycle] = x5266;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5267 = x5240 - x70;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5268 = (x5267 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][189 * steps + cycle] = x5268;
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5269(args[2][182 * steps + ((cycle - 0) & mask)]);
        assert(x5269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5270(args[2][183 * steps + ((cycle - 0) & mask)]);
        assert(x5270 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5271 = x5270 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5272 = Fp(x5269) + Fp(x5271);
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5273(args[2][184 * steps + ((cycle - 0) & mask)]);
        assert(x5273 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5274 = x5273 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5275 = Fp(x5272) + Fp(x5274);
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5276(args[2][185 * steps + ((cycle - 0) & mask)]);
        assert(x5276 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5277 = x5276 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5278 = Fp(x5275) + Fp(x5277);
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5279(args[2][186 * steps + ((cycle - 0) & mask)]);
        assert(x5279 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5280 = x5279 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5281 = Fp(x5278) + Fp(x5280);
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5282(args[2][187 * steps + ((cycle - 0) & mask)]);
        assert(x5282 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5283 = x5282 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5284 = Fp(x5281) + Fp(x5283);
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5285(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x5285 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5286 = x5285 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5287 = Fp(x5284) + Fp(x5286);
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5288(args[2][189 * steps + ((cycle - 0) & mask)]);
        assert(x5288 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5289 = x5288 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5290 = Fp(x5287) + Fp(x5289);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x5291 = x5290 - x5240;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x5291 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        Fp x5292(args[2][181 * steps + ((cycle - 0) & mask)]);
        assert(x5292 != Fp::invalid());
        if (x5292 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5293 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5294 = Fp(x5293) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x5294;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5295 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5296 = Fp(x5295) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x5296;
        }
        if (x5269 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5297 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5298 = Fp(x5297) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x5298;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5299 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5300 = Fp(x5299) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x5300;
        }
        if (x5270 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5301 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5302 = Fp(x5301) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x5302;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5303 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5304 = Fp(x5303) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x5304;
        }
        if (x5273 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5305 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5306 = Fp(x5305) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x5306;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5307 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5308 = Fp(x5307) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x5308;
        }
        if (x5276 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5309 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5310 = Fp(x5309) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x5310;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5311 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5312 = Fp(x5311) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x5312;
        }
        if (x5279 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5313 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5314 = Fp(x5313) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5315 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5316 = Fp(x5315) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x5316;
        }
        if (x5282 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5317 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5318 = Fp(x5317) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x5318;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5319 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5320 = Fp(x5319) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x5320;
        }
        if (x5285 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5321 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5322 = Fp(x5321) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x5322;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5323 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5324 = Fp(x5323) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x5324;
        }
        if (x5288 != 0) {
          host_args.at(0) = x5290;
          host_args.at(1) = x5248;
          host_args.at(2) = x5249;
          host_args.at(3) = x5250;
          host_args.at(4) = x5251;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5325 = x5249 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x5326 = Fp(x5325) + Fp(x5248);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x5326;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5327 = x5251 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x5328 = Fp(x5327) + Fp(x5250);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x5328;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        Fp x5329 = Fp(x596) + Fp(x78);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x5330 = Fp(x5329) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5331 = Fp(x5330.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x5331;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5332(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x5332 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5333 = x5330 - x5332;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5334 = x5333 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5335 = Fp(x5334.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x5335;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x5336(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x5336 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5337 = x5334 - x5336;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5338 = x5337 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5339 = Fp(x5338.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x5339;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5340(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x5340 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5341 = x5338 - x5340;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5342 = x5341 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5343 = Fp(x5342.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x5343;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5344(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x5344 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5345 = x5342 - x5344;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x5346 = x5345 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x5346;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5347(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x5347 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5348 = x95 - x5347;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x5349 = x5347 * x5348;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x5349;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5350(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x5350 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5351 = x92 - x5347;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x5352 = x5350 * x5351;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5352 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        args[2][93 * steps + cycle] = x75;
      }
      if (x5200 != 0) {
        {
          host_args.at(0) = x5186;
          host_args.at(1) = x5187;
          host_args.at(2) = x5188;
          host_args.at(3) = x5189;
          host(ctx, "log", "  Doing syscall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
          host(ctx, "syscall", "", host_args.data(), 0, host_outs.data(), 8);
          Fp x5353(host_outs.at(0));
          Fp x5354(host_outs.at(1));
          Fp x5355(host_outs.at(2));
          Fp x5356(host_outs.at(3));
          Fp x5357(host_outs.at(4));
          Fp x5358(host_outs.at(5));
          Fp x5359(host_outs.at(6));
          Fp x5360(host_outs.at(7));
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][125 * steps + cycle] = x5353;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][126 * steps + cycle] = x5354;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][127 * steps + cycle] = x5355;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][128 * steps + cycle] = x5356;
          {
            host_args.at(0) = x27;
            host_args.at(1) = x5353;
            host_args.at(2) = x5354;
            host_args.at(3) = x5355;
            host_args.at(4) = x5356;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5361(args[2][125 * steps + ((cycle - 0) & mask)]);
          assert(x5361 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5362(args[2][126 * steps + ((cycle - 0) & mask)]);
          assert(x5362 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5363(args[2][127 * steps + ((cycle - 0) & mask)]);
          assert(x5363 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5364(args[2][128 * steps + ((cycle - 0) & mask)]);
          assert(x5364 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][122 * steps + cycle] = x27;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][123 * steps + cycle] = x5171;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][124 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][125 * steps + cycle] = x5361;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][126 * steps + cycle] = x5362;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][127 * steps + cycle] = x5363;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][128 * steps + cycle] = x5364;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x5357;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x5358;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x5359;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x5360;
          {
            host_args.at(0) = x26;
            host_args.at(1) = x5357;
            host_args.at(2) = x5358;
            host_args.at(3) = x5359;
            host_args.at(4) = x5360;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5365(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x5365 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5366(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x5366 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5367(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x5367 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x5368(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x5368 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x26;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x5171;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x5365;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x5366;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x5367;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x5368;
          host_args.at(0) = x5361;
          host_args.at(1) = x5362;
          host_args.at(2) = x5363;
          host_args.at(3) = x5364;
          host(ctx, "log", "  A0 = %w", host_args.data(), 4, host_outs.data(), 0);
          host_args.at(0) = x5365;
          host_args.at(1) = x5366;
          host_args.at(2) = x5367;
          host_args.at(3) = x5368;
          host(ctx, "log", "  A1 = %w", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":141:10))
        Fp x5369(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x5369 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        auto x5370 = x5369 - x5171;
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        if (x5370 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:71");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("cirgen/components/ram.cpp":141:10))
        Fp x5371(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x5371 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        auto x5372 = x5371 - x5171;
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        if (x5372 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:72");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":137:10))
        Fp x5373(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x5373 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        auto x5374 = x5373 - x27;
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        if (x5374 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:73");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("cirgen/components/ram.cpp":137:10))
        Fp x5375(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x5375 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        auto x5376 = x5375 - x26;
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        if (x5376 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:74");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("cirgen/components/ram.cpp":145:10))
        Fp x5377(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x5377 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        auto x5378 = x5377 - x92;
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        if (x5378 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:75");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("cirgen/components/ram.cpp":145:10))
        Fp x5379(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x5379 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        auto x5380 = x5379 - x92;
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        if (x5380 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:76");
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:17)
        Fp x5381 = Fp(x596) + Fp(x78);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x5382 = Fp(x5381) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5383 = Fp(x5382.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x5383;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5384(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x5384 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5385 = x5382 - x5384;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5386 = x5385 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5387 = Fp(x5386.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x5387;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x5388(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x5388 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5389 = x5386 - x5388;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5390 = x5389 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5391 = Fp(x5390.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x5391;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5392(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x5392 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5393 = x5390 - x5392;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5394 = x5393 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5395 = Fp(x5394.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x5395;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5396(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x5396 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5397 = x5394 - x5396;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x5398 = x5397 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x5398;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5399(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x5399 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5400 = x95 - x5399;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x5401 = x5399 * x5400;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x5401;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5402(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x5402 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5403 = x92 - x5399;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x5404 = x5402 * x5403;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5404 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:3)
        args[2][93 * steps + cycle] = x75;
      }
      if (x5203 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5405(host_outs.at(0));
          Fp x5406(host_outs.at(1));
          Fp x5407(host_outs.at(2));
          Fp x5408(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x5405;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x5406;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][127 * steps + cycle] = x5407;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][128 * steps + cycle] = x5408;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5409(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x5409 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5410(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x5410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5411(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x5411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5412(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x5412 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][122 * steps + cycle] = x27;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][123 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][124 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x5409;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x5410;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][127 * steps + cycle] = x5411;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][128 * steps + cycle] = x5412;
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5413(host_outs.at(0));
          Fp x5414(host_outs.at(1));
          Fp x5415(host_outs.at(2));
          Fp x5416(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x5413;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x5414;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][134 * steps + cycle] = x5415;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][135 * steps + cycle] = x5416;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5417(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x5417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5418(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x5418 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5419(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x5419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5420(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x5420 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x26;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x5417;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x5418;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x5419;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x5420;
        {
          host_args.at(0) = x25;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5421(host_outs.at(0));
          Fp x5422(host_outs.at(1));
          Fp x5423(host_outs.at(2));
          Fp x5424(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][139 * steps + cycle] = x5421;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][140 * steps + cycle] = x5422;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][141 * steps + cycle] = x5423;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][142 * steps + cycle] = x5424;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5425(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x5425 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5426(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x5426 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5427(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x5427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5428(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x5428 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][136 * steps + cycle] = x25;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][137 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][138 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x5425;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x5426;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x5427;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x5428;
        // loc("cirgen/circuit/rv32im/ecall.cpp":92:17)
        Fp x5429 = Fp(x596) + Fp(x78);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x5430 = Fp(x5429) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5431 = Fp(x5430.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x5431;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5432(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x5432 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5433 = x5430 - x5432;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5434 = x5433 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5435 = Fp(x5434.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x5435;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x5436(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x5436 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5437 = x5434 - x5436;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5438 = x5437 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5439 = Fp(x5438.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x5439;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5440(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x5440 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5441 = x5438 - x5440;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5442 = x5441 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5443 = Fp(x5442.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x5443;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5444(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x5444 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5445 = x5442 - x5444;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x5446 = x5445 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x5446;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5447(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x5447 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5448 = x95 - x5447;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x5449 = x5447 * x5448;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x5449;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5450(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x5450 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5451 = x92 - x5447;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x5452 = x5450 * x5451;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5452 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:3)
        args[2][93 * steps + cycle] = x69;
      }
      if (x5206 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":102:3)
        args[2][181 * steps + cycle] = x596;
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5453(host_outs.at(0));
          Fp x5454(host_outs.at(1));
          Fp x5455(host_outs.at(2));
          Fp x5456(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x5453;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x5454;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][127 * steps + cycle] = x5455;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][128 * steps + cycle] = x5456;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5457(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x5457 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5458(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x5458 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5459(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x5459 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5460(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x5460 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][122 * steps + cycle] = x27;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][123 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][124 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x5457;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x5458;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][127 * steps + cycle] = x5459;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][128 * steps + cycle] = x5460;
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5461(host_outs.at(0));
          Fp x5462(host_outs.at(1));
          Fp x5463(host_outs.at(2));
          Fp x5464(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x5461;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x5462;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][134 * steps + cycle] = x5463;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][135 * steps + cycle] = x5464;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5465(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x5465 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5466(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x5466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5467(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x5467 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5468(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x5468 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x26;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x5171;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x5465;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x5466;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x5467;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x5468;
        // loc("./cirgen/components/u32.h":25:12)
        Fp x5469 = x5458 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5470 = Fp(x5457) + Fp(x5469);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x5471 = x5459 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5472 = Fp(x5470) + Fp(x5471);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x5473 = x5460 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5474 = Fp(x5472) + Fp(x5473);
        // loc("cirgen/circuit/rv32im/ecall.cpp":111:17)
        auto x5475 = x5474 - x78;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x5476 = Fp(x5475) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5477 = Fp(x5476.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x5477;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5478(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x5478 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5479 = x5476 - x5478;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5480 = x5479 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5481 = Fp(x5480.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x5481;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x5482(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x5482 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5483 = x5480 - x5482;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5484 = x5483 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5485 = Fp(x5484.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x5485;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x5486(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x5486 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5487 = x5484 - x5486;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x5488 = x5487 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5489 = Fp(x5488.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x5489;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5490(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x5490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5491 = x5488 - x5490;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x5492 = x5491 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x5492;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5493(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x5493 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5494 = x95 - x5493;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x5495 = x5493 * x5494;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x5495;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5496(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x5496 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5497 = x92 - x5493;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x5498 = x5496 * x5497;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5498 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":112:3)
        args[2][93 * steps + cycle] = x66;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/components/mux.h":37:25))
    Fp x5499(args[2][103 * steps + ((cycle - 0) & mask)]);
    assert(x5499 != Fp::invalid());
    if (x5499 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5500(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x5500 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":174:69))
      Fp x5501(args[2][102 * steps + ((cycle - 1) & mask)]);
      assert(x5501 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg13"("cirgen/circuit/rv32im/sha.cpp":175:77))
      Fp x5502(args[2][107 * steps + ((cycle - 1) & mask)]);
      assert(x5502 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      Fp x5503 = Fp(x5501) + Fp(x5502);
      if (x5503 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        args[2][141 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        args[2][135 * steps + cycle] = x78;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5504 = x95 - x5501;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5505 = x5504 - x5502;
      if (x5505 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5506(args[2][141 * steps + ((cycle - 1) & mask)]);
        assert(x5506 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][141 * steps + cycle] = x5506;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":183:40))
        Fp x5507(args[2][135 * steps + ((cycle - 1) & mask)]);
        assert(x5507 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5508 = x5507 - x95;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        args[2][135 * steps + cycle] = x5508;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5509(args[2][135 * steps + ((cycle - 0) & mask)]);
      assert(x5509 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5510 = (x5509 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][136 * steps + cycle] = x5510;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5511 = inv(x5509);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][137 * steps + cycle] = x5511;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5512(args[2][136 * steps + ((cycle - 0) & mask)]);
      assert(x5512 != Fp::invalid());
      if (x5512 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5509 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5513 = x95 - x5512;
      if (x5513 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5514(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x5514 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x5515 = x5509 * x5514;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5516 = x5515 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5516 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x5512 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        args[2][93 * steps + cycle] = x68;
      }
      if (x5513 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5517 = x2125 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5518 = Fp(x1340) + Fp(x5517);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5519 = x2829 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5520 = Fp(x5518) + Fp(x5519);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5521 = x3586 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5522 = Fp(x5520) + Fp(x5521);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5523 = x4028 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5524 = Fp(x5522) + Fp(x5523);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5525 = x4393 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5526 = Fp(x5524) + Fp(x5525);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5527 = x4825 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5528 = Fp(x5526) + Fp(x5527);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5529 = x5170 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5530 = Fp(x5528) + Fp(x5529);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5531 = x5499 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5532 = Fp(x5530) + Fp(x5531);
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5533(args[2][104 * steps + ((cycle - 0) & mask)]);
        assert(x5533 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5534 = x5533 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5535 = Fp(x5532) + Fp(x5534);
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5536(args[2][105 * steps + ((cycle - 0) & mask)]);
        assert(x5536 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5537 = x5536 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5538 = Fp(x5535) + Fp(x5537);
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5539(args[2][106 * steps + ((cycle - 0) & mask)]);
        assert(x5539 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5540 = x5539 * x66;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5541 = Fp(x5538) + Fp(x5540);
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5542(args[2][107 * steps + ((cycle - 0) & mask)]);
        assert(x5542 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x5543 = x5542 * x65;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x5544 = Fp(x5541) + Fp(x5543);
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        args[2][93 * steps + cycle] = x5544;
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x5545 = Fp(x596) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5546 = Fp(x5545.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x5546;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5547(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x5547 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5548 = x5545 - x5547;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5549 = x5548 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5550 = Fp(x5549.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x5550;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x5551(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x5551 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5552 = x5549 - x5551;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5553 = x5552 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5554 = Fp(x5553.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x5554;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x5555(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x5555 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5556 = x5553 - x5555;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x5557 = x5556 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5558 = Fp(x5557.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x5558;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5559(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x5559 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5560 = x5557 - x5559;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x5561 = x5560 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x5561;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5562(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x5562 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5563 = x95 - x5562;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x5564 = x5562 * x5563;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x5564;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x5565(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x5565 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5566 = x92 - x5562;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x5567 = x5565 * x5566;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5567 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5568(args[2][141 * steps + ((cycle - 0) & mask)]);
      assert(x5568 != Fp::invalid());
      host_args.at(0) = x69;
      host_args.at(1) = x5568;
      host_args.at(2) = x5509;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5501 != 0) {
        {
          host_args.at(0) = x24;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5569(host_outs.at(0));
          Fp x5570(host_outs.at(1));
          Fp x5571(host_outs.at(2));
          Fp x5572(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][111 * steps + cycle] = x5569;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][112 * steps + cycle] = x5570;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][113 * steps + cycle] = x5571;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][114 * steps + cycle] = x5572;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5573(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x5573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5574(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x5574 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5575(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x5575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5576(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x5576 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][108 * steps + cycle] = x24;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][109 * steps + cycle] = x5500;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][110 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][111 * steps + cycle] = x5573;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][112 * steps + cycle] = x5574;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][113 * steps + cycle] = x5575;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][114 * steps + cycle] = x5576;
        {
          host_args.at(0) = x23;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5577(host_outs.at(0));
          Fp x5578(host_outs.at(1));
          Fp x5579(host_outs.at(2));
          Fp x5580(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][118 * steps + cycle] = x5577;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][119 * steps + cycle] = x5578;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][120 * steps + cycle] = x5579;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][121 * steps + cycle] = x5580;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5581(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x5581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5582(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x5582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5583(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x5583 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5584(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x5584 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][115 * steps + cycle] = x23;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][116 * steps + cycle] = x5500;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][117 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][118 * steps + cycle] = x5581;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][119 * steps + cycle] = x5582;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][120 * steps + cycle] = x5583;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][121 * steps + cycle] = x5584;
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5585(args[2][125 * steps + ((cycle - 1) & mask)]);
        assert(x5585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5586(args[2][126 * steps + ((cycle - 1) & mask)]);
        assert(x5586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5587(args[2][127 * steps + ((cycle - 1) & mask)]);
        assert(x5587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5588(args[2][128 * steps + ((cycle - 1) & mask)]);
        assert(x5588 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        Fp x5589 = x5586 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5590 = Fp(x5585) + Fp(x5589);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x5591 = x5587 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5592 = Fp(x5590) + Fp(x5591);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x5593 = x5588 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5594 = Fp(x5592) + Fp(x5593);
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        Fp x5595 = x5594 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        args[2][131 * steps + cycle] = x5595;
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5596(args[2][132 * steps + ((cycle - 1) & mask)]);
        assert(x5596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5597(args[2][133 * steps + ((cycle - 1) & mask)]);
        assert(x5597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5598(args[2][134 * steps + ((cycle - 1) & mask)]);
        assert(x5598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5599(args[2][135 * steps + ((cycle - 1) & mask)]);
        assert(x5599 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        Fp x5600 = x5597 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5601 = Fp(x5596) + Fp(x5600);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x5602 = x5598 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5603 = Fp(x5601) + Fp(x5602);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x5604 = x5599 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5605 = Fp(x5603) + Fp(x5604);
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        Fp x5606 = x5605 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        args[2][132 * steps + cycle] = x5606;
        // loc("./cirgen/components/u32.h":25:12)
        Fp x5607 = x5574 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5608 = Fp(x5573) + Fp(x5607);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x5609 = x5575 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5610 = Fp(x5608) + Fp(x5609);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x5611 = x5576 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5612 = Fp(x5610) + Fp(x5611);
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        Fp x5613 = x5612 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        args[2][133 * steps + cycle] = x5613;
        // loc("./cirgen/components/u32.h":25:12)
        Fp x5614 = x5582 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5615 = Fp(x5581) + Fp(x5614);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x5616 = x5583 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5617 = Fp(x5615) + Fp(x5616);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x5618 = x5584 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5619 = Fp(x5617) + Fp(x5618);
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        Fp x5620 = x5619 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        args[2][134 * steps + cycle] = x5620;
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5621(args[2][139 * steps + ((cycle - 1) & mask)]);
        assert(x5621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5622(args[2][140 * steps + ((cycle - 1) & mask)]);
        assert(x5622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5623(args[2][141 * steps + ((cycle - 1) & mask)]);
        assert(x5623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5624(args[2][142 * steps + ((cycle - 1) & mask)]);
        assert(x5624 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        Fp x5625 = x5622 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5626 = Fp(x5621) + Fp(x5625);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x5627 = x5623 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5628 = Fp(x5626) + Fp(x5627);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x5629 = x5624 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x5630 = Fp(x5628) + Fp(x5629);
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        args[2][138 * steps + cycle] = x5630;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][143 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5631(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x5631 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        Fp x5632 = x5631 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5633(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x5633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        Fp x5634 = x5633 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5635(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x5635 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        Fp x5636 = x5635 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5637(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x5637 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        Fp x5638 = x5637 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5639(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x5639 != Fp::invalid());
        host_args.at(0) = x5632;
        host_args.at(1) = x5634;
        host_args.at(2) = x5636;
        host_args.at(3) = x5638;
        host_args.at(4) = x5639;
        host(ctx, "log", "  FromEcall: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5502 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        args[2][108 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":44:3)
        args[2][109 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":45:3)
        args[2][110 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][111 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][112 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][113 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][114 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":43:3)
        args[2][115 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":44:3)
        args[2][116 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":45:3)
        args[2][117 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][118 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][119 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][120 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][121 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/13/Reg1"("cirgen/circuit/rv32im/sha.cpp":214:53))
        Fp x5640(args[2][109 * steps + ((cycle - 1) & mask)]);
        assert(x5640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":214:5)
        args[2][131 * steps + cycle] = x5640;
        // loc("Top/Mux/4/Mux/13/Reg2"("cirgen/circuit/rv32im/sha.cpp":215:51))
        Fp x5641(args[2][110 * steps + ((cycle - 1) & mask)]);
        assert(x5641 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        args[2][132 * steps + cycle] = x5641;
        // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/sha.cpp":216:83))
        Fp x5642(args[2][111 * steps + ((cycle - 1) & mask)]);
        assert(x5642 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        Fp x5643 = x5642 * x22;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        Fp x5644 = x5643 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        args[2][133 * steps + cycle] = x5644;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:83)
        Fp x5645 = Fp(x5644) + Fp(x70);
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        args[2][134 * steps + cycle] = x5645;
        // loc("Top/Mux/4/Mux/13/Reg4"("cirgen/circuit/rv32im/sha.cpp":218:49))
        Fp x5646(args[2][113 * steps + ((cycle - 1) & mask)]);
        assert(x5646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        args[2][138 * steps + cycle] = x5646;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][143 * steps + cycle] = x95;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5647(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x5647 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":221:10)
        Fp x5648 = x5647 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5649(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x5649 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        Fp x5650 = x5649 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5651(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x5651 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        Fp x5652 = x5651 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5653(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x5653 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        Fp x5654 = x5653 * x78;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5655(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x5655 != Fp::invalid());
        host_args.at(0) = x5648;
        host_args.at(1) = x5650;
        host_args.at(2) = x5652;
        host_args.at(3) = x5654;
        host_args.at(4) = x5655;
        host(ctx, "log", "  FromPageFault: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5505 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        Fp x5656(args[2][131 * steps + ((cycle - 1) & mask)]);
        assert(x5656 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        args[2][131 * steps + cycle] = x5656;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":229:40))
        Fp x5657(args[2][132 * steps + ((cycle - 1) & mask)]);
        assert(x5657 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        args[2][132 * steps + cycle] = x5657;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":230:36))
        Fp x5658(args[2][133 * steps + ((cycle - 1) & mask)]);
        assert(x5658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        args[2][133 * steps + cycle] = x5658;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":231:36))
        Fp x5659(args[2][134 * steps + ((cycle - 1) & mask)]);
        assert(x5659 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        args[2][134 * steps + cycle] = x5659;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":232:38))
        Fp x5660(args[2][138 * steps + ((cycle - 1) & mask)]);
        assert(x5660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        args[2][138 * steps + cycle] = x5660;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5661(args[2][143 * steps + ((cycle - 1) & mask)]);
        assert(x5661 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][143 * steps + cycle] = x5661;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5662(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x5662 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:24)
        Fp x5663 = Fp(x5662) + Fp(x5509);
        {
          host_args.at(0) = x5663;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5664(host_outs.at(0));
          Fp x5665(host_outs.at(1));
          Fp x5666(host_outs.at(2));
          Fp x5667(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][111 * steps + cycle] = x5664;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][112 * steps + cycle] = x5665;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][113 * steps + cycle] = x5666;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][114 * steps + cycle] = x5667;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5668(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x5668 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5669(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x5669 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5670(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x5670 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5671(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x5671 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][108 * steps + cycle] = x5663;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][109 * steps + cycle] = x5500;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][110 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][111 * steps + cycle] = x5668;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][112 * steps + cycle] = x5669;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][113 * steps + cycle] = x5670;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][114 * steps + cycle] = x5671;
        // loc("cirgen/circuit/rv32im/sha.cpp":237:24)
        Fp x5672 = Fp(x5663) + Fp(x78);
        {
          host_args.at(0) = x5672;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x5673(host_outs.at(0));
          Fp x5674(host_outs.at(1));
          Fp x5675(host_outs.at(2));
          Fp x5676(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][118 * steps + cycle] = x5673;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][119 * steps + cycle] = x5674;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][120 * steps + cycle] = x5675;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][121 * steps + cycle] = x5676;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5677(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x5677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5678(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x5678 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5679(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x5679 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x5680(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x5680 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][115 * steps + cycle] = x5672;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][116 * steps + cycle] = x5500;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][117 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][118 * steps + cycle] = x5677;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][119 * steps + cycle] = x5678;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][120 * steps + cycle] = x5679;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][121 * steps + cycle] = x5680;
      }
      // loc("./cirgen/components/bits.h":20:23)
      args[2][142 * steps + cycle] = x94;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5681(args[2][138 * steps + ((cycle - 0) & mask)]);
      assert(x5681 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5682 = (x5681 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][139 * steps + cycle] = x5682;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5683 = inv(x5681);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][140 * steps + cycle] = x5683;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5684(args[2][139 * steps + ((cycle - 0) & mask)]);
      assert(x5684 != Fp::invalid());
      if (x5684 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5681 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5685 = x95 - x5684;
      if (x5685 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x5686(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x5686 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x5687 = x5681 * x5686;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5688 = x5687 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5688 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("./cirgen/components/bits.h":20:23)
        args[2][82 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][83 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][84 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][85 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][86 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][87 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][91 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][19 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][20 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][21 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][22 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][23 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][24 * steps + cycle] = x94;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5689(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x5689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5690(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x5690 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5691 = x5690 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5692 = Fp(x5689) + Fp(x5691);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5693(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x5693 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5694 = x5693 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5695 = Fp(x5692) + Fp(x5694);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5696(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x5696 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5697 = x5696 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5698 = Fp(x5695) + Fp(x5697);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5699(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x5699 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5700 = x5699 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5701 = Fp(x5698) + Fp(x5700);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5702(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x5702 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5703 = x5702 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5704 = Fp(x5701) + Fp(x5703);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5705(args[2][88 * steps + ((cycle - 0) & mask)]);
      assert(x5705 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5706 = x5705 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5707 = Fp(x5704) + Fp(x5706);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5708(args[2][89 * steps + ((cycle - 0) & mask)]);
      assert(x5708 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5709 = x5708 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5710 = Fp(x5707) + Fp(x5709);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5711(args[2][90 * steps + ((cycle - 0) & mask)]);
      assert(x5711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5712 = x5711 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5713 = Fp(x5710) + Fp(x5712);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5714(args[2][91 * steps + ((cycle - 0) & mask)]);
      assert(x5714 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5715 = x5714 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5716 = Fp(x5713) + Fp(x5715);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5717(args[2][19 * steps + ((cycle - 0) & mask)]);
      assert(x5717 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5718 = x5717 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5719 = Fp(x5716) + Fp(x5718);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5720(args[2][20 * steps + ((cycle - 0) & mask)]);
      assert(x5720 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5721 = x5720 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5722 = Fp(x5719) + Fp(x5721);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5723(args[2][21 * steps + ((cycle - 0) & mask)]);
      assert(x5723 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5724 = x5723 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5725 = Fp(x5722) + Fp(x5724);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5726(args[2][22 * steps + ((cycle - 0) & mask)]);
      assert(x5726 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5727 = x5726 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5728 = Fp(x5725) + Fp(x5727);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5729(args[2][23 * steps + ((cycle - 0) & mask)]);
      assert(x5729 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5730 = x5729 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5731 = Fp(x5728) + Fp(x5730);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5732(args[2][24 * steps + ((cycle - 0) & mask)]);
      assert(x5732 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5733 = x5732 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5734 = Fp(x5731) + Fp(x5733);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5735 = x94 - x5734;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x5736 = x5735 * x9;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][80 * steps + cycle] = x5736;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5737(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x5737 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5738 = Fp(x5737.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][25 * steps + cycle] = x5738;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5739 = Fp(x5737.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5740 = x5739 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][26 * steps + cycle] = x5740;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5741 = Fp(x5737.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5742 = x5741 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][27 * steps + cycle] = x5742;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5743 = Fp(x5737.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5744 = x5743 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][28 * steps + cycle] = x5744;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5745 = Fp(x5737.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5746 = x5745 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][29 * steps + cycle] = x5746;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5747 = Fp(x5737.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5748 = x5747 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][30 * steps + cycle] = x5748;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5749 = Fp(x5737.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5750 = x5749 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][31 * steps + cycle] = x5750;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5751 = Fp(x5737.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5752 = x5751 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][32 * steps + cycle] = x5752;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5753 = Fp(x5737.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5754 = x5753 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][33 * steps + cycle] = x5754;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5755 = Fp(x5737.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5756 = x5755 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][34 * steps + cycle] = x5756;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5757 = Fp(x5737.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5758 = x5757 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][35 * steps + cycle] = x5758;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5759 = Fp(x5737.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5760 = x5759 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][36 * steps + cycle] = x5760;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5761 = Fp(x5737.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5762 = x5761 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][37 * steps + cycle] = x5762;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5763 = Fp(x5737.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5764 = x5763 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][38 * steps + cycle] = x5764;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5765 = Fp(x5737.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5766 = x5765 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][39 * steps + cycle] = x5766;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5767 = Fp(x5737.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5768 = x5767 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][40 * steps + cycle] = x5768;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5769(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x5769 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5770(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x5770 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5771 = x5770 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5772 = Fp(x5769) + Fp(x5771);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5773(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x5773 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5774 = x5773 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5775 = Fp(x5772) + Fp(x5774);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5776(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x5776 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5777 = x5776 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5778 = Fp(x5775) + Fp(x5777);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5779(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x5779 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5780 = x5779 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5781 = Fp(x5778) + Fp(x5780);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5782(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x5782 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5783 = x5782 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5784 = Fp(x5781) + Fp(x5783);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5785(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x5785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5786 = x5785 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5787 = Fp(x5784) + Fp(x5786);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5788(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x5788 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5789 = x5788 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5790 = Fp(x5787) + Fp(x5789);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5791(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x5791 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5792 = x5791 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5793 = Fp(x5790) + Fp(x5792);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5794(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x5794 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5795 = x5794 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5796 = Fp(x5793) + Fp(x5795);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5797(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x5797 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5798 = x5797 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5799 = Fp(x5796) + Fp(x5798);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5800(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x5800 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5801 = x5800 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5802 = Fp(x5799) + Fp(x5801);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5803(args[2][37 * steps + ((cycle - 0) & mask)]);
      assert(x5803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5804 = x5803 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5805 = Fp(x5802) + Fp(x5804);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5806(args[2][38 * steps + ((cycle - 0) & mask)]);
      assert(x5806 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5807 = x5806 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5808 = Fp(x5805) + Fp(x5807);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5809(args[2][39 * steps + ((cycle - 0) & mask)]);
      assert(x5809 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5810 = x5809 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5811 = Fp(x5808) + Fp(x5810);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5812(args[2][40 * steps + ((cycle - 0) & mask)]);
      assert(x5812 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5813 = x5812 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5814 = Fp(x5811) + Fp(x5813);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5815 = x5737 - x5814;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x5816 = x5815 * x9;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][81 * steps + cycle] = x5816;
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5817(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x5817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5818(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x5818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5819(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x5819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5820(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x5820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      Fp x5821 = x5819 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      Fp x5822 = Fp(x5820) + Fp(x5821);
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      Fp x5823 = x5817 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      Fp x5824 = Fp(x5818) + Fp(x5823);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5825 = Fp(x5822.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][150 * steps + cycle] = x5825;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5826 = Fp(x5822.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5827 = x5826 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][151 * steps + cycle] = x5827;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5828 = Fp(x5822.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5829 = x5828 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][152 * steps + cycle] = x5829;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5830 = Fp(x5822.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5831 = x5830 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][153 * steps + cycle] = x5831;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5832 = Fp(x5822.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5833 = x5832 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][154 * steps + cycle] = x5833;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5834 = Fp(x5822.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5835 = x5834 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][155 * steps + cycle] = x5835;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5836 = Fp(x5822.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5837 = x5836 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][156 * steps + cycle] = x5837;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5838 = Fp(x5822.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5839 = x5838 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][157 * steps + cycle] = x5839;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5840 = Fp(x5822.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5841 = x5840 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][158 * steps + cycle] = x5841;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5842 = Fp(x5822.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5843 = x5842 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][159 * steps + cycle] = x5843;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5844 = Fp(x5822.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5845 = x5844 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][160 * steps + cycle] = x5845;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5846 = Fp(x5822.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5847 = x5846 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x5847;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5848 = Fp(x5822.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5849 = x5848 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x5849;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5850 = Fp(x5822.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5851 = x5850 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x5851;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5852 = Fp(x5822.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5853 = x5852 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x5853;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5854 = Fp(x5822.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5855 = x5854 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x5855;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5856(args[2][150 * steps + ((cycle - 0) & mask)]);
      assert(x5856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5857(args[2][151 * steps + ((cycle - 0) & mask)]);
      assert(x5857 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5858 = x5857 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5859 = Fp(x5856) + Fp(x5858);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5860(args[2][152 * steps + ((cycle - 0) & mask)]);
      assert(x5860 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5861 = x5860 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5862 = Fp(x5859) + Fp(x5861);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5863(args[2][153 * steps + ((cycle - 0) & mask)]);
      assert(x5863 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5864 = x5863 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5865 = Fp(x5862) + Fp(x5864);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5866(args[2][154 * steps + ((cycle - 0) & mask)]);
      assert(x5866 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5867 = x5866 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5868 = Fp(x5865) + Fp(x5867);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5869(args[2][155 * steps + ((cycle - 0) & mask)]);
      assert(x5869 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5870 = x5869 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5871 = Fp(x5868) + Fp(x5870);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5872(args[2][156 * steps + ((cycle - 0) & mask)]);
      assert(x5872 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5873 = x5872 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5874 = Fp(x5871) + Fp(x5873);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5875(args[2][157 * steps + ((cycle - 0) & mask)]);
      assert(x5875 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5876 = x5875 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5877 = Fp(x5874) + Fp(x5876);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5878(args[2][158 * steps + ((cycle - 0) & mask)]);
      assert(x5878 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5879 = x5878 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5880 = Fp(x5877) + Fp(x5879);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5881(args[2][159 * steps + ((cycle - 0) & mask)]);
      assert(x5881 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5882 = x5881 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5883 = Fp(x5880) + Fp(x5882);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5884(args[2][160 * steps + ((cycle - 0) & mask)]);
      assert(x5884 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5885 = x5884 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5886 = Fp(x5883) + Fp(x5885);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5887(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x5887 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5888 = x5887 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5889 = Fp(x5886) + Fp(x5888);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5890(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x5890 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5891 = x5890 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5892 = Fp(x5889) + Fp(x5891);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5893(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x5893 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5894 = x5893 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5895 = Fp(x5892) + Fp(x5894);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5896(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x5896 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5897 = x5896 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5898 = Fp(x5895) + Fp(x5897);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5899(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x5899 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5900 = x5899 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5901 = Fp(x5898) + Fp(x5900);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5902 = x5822 - x5901;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x5903 = x5902 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5904 = Fp(x5903.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][76 * steps + cycle] = x5904;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5905(args[2][76 * steps + ((cycle - 0) & mask)]);
      assert(x5905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5906 = x5903 - x5905;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      Fp x5907 = x5906 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5908 = x95 - x5907;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      Fp x5909 = x5907 * x5908;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5909 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      Fp x5910 = Fp(x5824) + Fp(x5903);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5911 = Fp(x5910.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x5911;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5912 = Fp(x5910.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5913 = x5912 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x5913;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5914 = Fp(x5910.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5915 = x5914 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x5915;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5916 = Fp(x5910.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5917 = x5916 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x5917;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5918 = Fp(x5910.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5919 = x5918 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][170 * steps + cycle] = x5919;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5920 = Fp(x5910.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5921 = x5920 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][171 * steps + cycle] = x5921;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5922 = Fp(x5910.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5923 = x5922 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][172 * steps + cycle] = x5923;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5924 = Fp(x5910.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5925 = x5924 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][173 * steps + cycle] = x5925;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5926 = Fp(x5910.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5927 = x5926 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][174 * steps + cycle] = x5927;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5928 = Fp(x5910.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5929 = x5928 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][175 * steps + cycle] = x5929;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5930 = Fp(x5910.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5931 = x5930 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][176 * steps + cycle] = x5931;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5932 = Fp(x5910.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5933 = x5932 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][177 * steps + cycle] = x5933;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5934 = Fp(x5910.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5935 = x5934 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][178 * steps + cycle] = x5935;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5936 = Fp(x5910.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5937 = x5936 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][179 * steps + cycle] = x5937;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5938 = Fp(x5910.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5939 = x5938 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][180 * steps + cycle] = x5939;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5940 = Fp(x5910.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x5941 = x5940 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][181 * steps + cycle] = x5941;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5942(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x5942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5943(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x5943 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5944 = x5943 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5945 = Fp(x5942) + Fp(x5944);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5946(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x5946 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5947 = x5946 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5948 = Fp(x5945) + Fp(x5947);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5949(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x5949 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5950 = x5949 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5951 = Fp(x5948) + Fp(x5950);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5952(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x5952 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5953 = x5952 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5954 = Fp(x5951) + Fp(x5953);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5955(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x5955 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5956 = x5955 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5957 = Fp(x5954) + Fp(x5956);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5958(args[2][172 * steps + ((cycle - 0) & mask)]);
      assert(x5958 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5959 = x5958 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5960 = Fp(x5957) + Fp(x5959);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5961(args[2][173 * steps + ((cycle - 0) & mask)]);
      assert(x5961 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5962 = x5961 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5963 = Fp(x5960) + Fp(x5962);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5964(args[2][174 * steps + ((cycle - 0) & mask)]);
      assert(x5964 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5965 = x5964 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5966 = Fp(x5963) + Fp(x5965);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5967(args[2][175 * steps + ((cycle - 0) & mask)]);
      assert(x5967 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5968 = x5967 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5969 = Fp(x5966) + Fp(x5968);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5970(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x5970 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5971 = x5970 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5972 = Fp(x5969) + Fp(x5971);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5973(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x5973 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5974 = x5973 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5975 = Fp(x5972) + Fp(x5974);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5976(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x5976 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5977 = x5976 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5978 = Fp(x5975) + Fp(x5977);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5979(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x5979 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5980 = x5979 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5981 = Fp(x5978) + Fp(x5980);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5982(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x5982 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5983 = x5982 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5984 = Fp(x5981) + Fp(x5983);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5985(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x5985 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x5986 = x5985 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x5987 = Fp(x5984) + Fp(x5986);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5988 = x5910 - x5987;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x5989 = x5988 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x5990 = Fp(x5989.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][77 * steps + cycle] = x5990;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5991(args[2][77 * steps + ((cycle - 0) & mask)]);
      assert(x5991 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x5992 = x5989 - x5991;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      Fp x5993 = x5992 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x5994 = x95 - x5993;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      Fp x5995 = x5993 * x5994;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x5995 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5996(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x5996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5997(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x5997 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5998(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x5998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x5999(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x5999 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      Fp x6000 = x5998 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      Fp x6001 = Fp(x5999) + Fp(x6000);
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      Fp x6002 = x5996 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      Fp x6003 = Fp(x5997) + Fp(x6002);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6004 = Fp(x6001.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][182 * steps + cycle] = x6004;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6005 = Fp(x6001.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6006 = x6005 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][183 * steps + cycle] = x6006;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6007 = Fp(x6001.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6008 = x6007 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][184 * steps + cycle] = x6008;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6009 = Fp(x6001.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6010 = x6009 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][185 * steps + cycle] = x6010;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6011 = Fp(x6001.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6012 = x6011 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][186 * steps + cycle] = x6012;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6013 = Fp(x6001.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6014 = x6013 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][187 * steps + cycle] = x6014;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6015 = Fp(x6001.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6016 = x6015 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][188 * steps + cycle] = x6016;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6017 = Fp(x6001.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6018 = x6017 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][189 * steps + cycle] = x6018;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6019 = Fp(x6001.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6020 = x6019 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][190 * steps + cycle] = x6020;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6021 = Fp(x6001.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6022 = x6021 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][191 * steps + cycle] = x6022;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6023 = Fp(x6001.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6024 = x6023 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][192 * steps + cycle] = x6024;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6025 = Fp(x6001.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6026 = x6025 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][193 * steps + cycle] = x6026;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6027 = Fp(x6001.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6028 = x6027 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][194 * steps + cycle] = x6028;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6029 = Fp(x6001.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6030 = x6029 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][195 * steps + cycle] = x6030;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6031 = Fp(x6001.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6032 = x6031 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][196 * steps + cycle] = x6032;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6033 = Fp(x6001.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6034 = x6033 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][197 * steps + cycle] = x6034;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6035(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x6035 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6036(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x6036 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6037 = x6036 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6038 = Fp(x6035) + Fp(x6037);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6039(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x6039 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6040 = x6039 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6041 = Fp(x6038) + Fp(x6040);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6042(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x6042 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6043 = x6042 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6044 = Fp(x6041) + Fp(x6043);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6045(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x6045 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6046 = x6045 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6047 = Fp(x6044) + Fp(x6046);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6048(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x6048 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6049 = x6048 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6050 = Fp(x6047) + Fp(x6049);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6051(args[2][188 * steps + ((cycle - 0) & mask)]);
      assert(x6051 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6052 = x6051 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6053 = Fp(x6050) + Fp(x6052);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6054(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x6054 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6055 = x6054 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6056 = Fp(x6053) + Fp(x6055);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6057(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x6057 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6058 = x6057 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6059 = Fp(x6056) + Fp(x6058);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6060(args[2][191 * steps + ((cycle - 0) & mask)]);
      assert(x6060 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6061 = x6060 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6062 = Fp(x6059) + Fp(x6061);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6063(args[2][192 * steps + ((cycle - 0) & mask)]);
      assert(x6063 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6064 = x6063 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6065 = Fp(x6062) + Fp(x6064);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6066(args[2][193 * steps + ((cycle - 0) & mask)]);
      assert(x6066 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6067 = x6066 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6068 = Fp(x6065) + Fp(x6067);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6069(args[2][194 * steps + ((cycle - 0) & mask)]);
      assert(x6069 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6070 = x6069 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6071 = Fp(x6068) + Fp(x6070);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6072(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x6072 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6073 = x6072 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6074 = Fp(x6071) + Fp(x6073);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6075(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x6075 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6076 = x6075 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6077 = Fp(x6074) + Fp(x6076);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6078(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x6078 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6079 = x6078 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6080 = Fp(x6077) + Fp(x6079);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6081 = x6001 - x6080;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x6082 = x6081 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6083 = Fp(x6082.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][78 * steps + cycle] = x6083;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6084(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x6084 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6085 = x6082 - x6084;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      Fp x6086 = x6085 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6087 = x95 - x6086;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      Fp x6088 = x6086 * x6087;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6088 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      Fp x6089 = Fp(x6003) + Fp(x6082);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6090 = Fp(x6089.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][198 * steps + cycle] = x6090;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6091 = Fp(x6089.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6092 = x6091 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][199 * steps + cycle] = x6092;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6093 = Fp(x6089.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6094 = x6093 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][200 * steps + cycle] = x6094;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6095 = Fp(x6089.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6096 = x6095 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][201 * steps + cycle] = x6096;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6097 = Fp(x6089.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6098 = x6097 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][202 * steps + cycle] = x6098;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6099 = Fp(x6089.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6100 = x6099 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][203 * steps + cycle] = x6100;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6101 = Fp(x6089.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6102 = x6101 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][204 * steps + cycle] = x6102;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6103 = Fp(x6089.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6104 = x6103 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][205 * steps + cycle] = x6104;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6105 = Fp(x6089.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6106 = x6105 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][206 * steps + cycle] = x6106;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6107 = Fp(x6089.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6108 = x6107 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][207 * steps + cycle] = x6108;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6109 = Fp(x6089.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6110 = x6109 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][208 * steps + cycle] = x6110;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6111 = Fp(x6089.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6112 = x6111 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][209 * steps + cycle] = x6112;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6113 = Fp(x6089.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6114 = x6113 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][210 * steps + cycle] = x6114;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6115 = Fp(x6089.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6116 = x6115 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][211 * steps + cycle] = x6116;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6117 = Fp(x6089.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6118 = x6117 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][212 * steps + cycle] = x6118;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6119 = Fp(x6089.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6120 = x6119 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][213 * steps + cycle] = x6120;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6121(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x6121 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6122(args[2][199 * steps + ((cycle - 0) & mask)]);
      assert(x6122 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6123 = x6122 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6124 = Fp(x6121) + Fp(x6123);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6125(args[2][200 * steps + ((cycle - 0) & mask)]);
      assert(x6125 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6126 = x6125 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6127 = Fp(x6124) + Fp(x6126);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6128(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x6128 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6129 = x6128 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6130 = Fp(x6127) + Fp(x6129);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6131(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x6131 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6132 = x6131 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6133 = Fp(x6130) + Fp(x6132);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6134(args[2][203 * steps + ((cycle - 0) & mask)]);
      assert(x6134 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6135 = x6134 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6136 = Fp(x6133) + Fp(x6135);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6137(args[2][204 * steps + ((cycle - 0) & mask)]);
      assert(x6137 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6138 = x6137 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6139 = Fp(x6136) + Fp(x6138);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6140(args[2][205 * steps + ((cycle - 0) & mask)]);
      assert(x6140 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6141 = x6140 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6142 = Fp(x6139) + Fp(x6141);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6143(args[2][206 * steps + ((cycle - 0) & mask)]);
      assert(x6143 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6144 = x6143 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6145 = Fp(x6142) + Fp(x6144);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6146(args[2][207 * steps + ((cycle - 0) & mask)]);
      assert(x6146 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6147 = x6146 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6148 = Fp(x6145) + Fp(x6147);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6149(args[2][208 * steps + ((cycle - 0) & mask)]);
      assert(x6149 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6150 = x6149 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6151 = Fp(x6148) + Fp(x6150);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6152(args[2][209 * steps + ((cycle - 0) & mask)]);
      assert(x6152 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6153 = x6152 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6154 = Fp(x6151) + Fp(x6153);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6155(args[2][210 * steps + ((cycle - 0) & mask)]);
      assert(x6155 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6156 = x6155 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6157 = Fp(x6154) + Fp(x6156);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6158(args[2][211 * steps + ((cycle - 0) & mask)]);
      assert(x6158 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6159 = x6158 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6160 = Fp(x6157) + Fp(x6159);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6161(args[2][212 * steps + ((cycle - 0) & mask)]);
      assert(x6161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6162 = x6161 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6163 = Fp(x6160) + Fp(x6162);
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6164(args[2][213 * steps + ((cycle - 0) & mask)]);
      assert(x6164 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6165 = x6164 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6166 = Fp(x6163) + Fp(x6165);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6167 = x6089 - x6166;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x6168 = x6167 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6169 = Fp(x6168.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x6169;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6170(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x6170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6171 = x6168 - x6170;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      Fp x6172 = x6171 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6173 = x95 - x6172;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      Fp x6174 = x6172 * x6173;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/components/mux.h":37:25))
    Fp x6175(args[2][104 * steps + ((cycle - 0) & mask)]);
    assert(x6175 != Fp::invalid());
    if (x6175 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6176(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x6176 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg9"("cirgen/circuit/rv32im/sha.cpp":259:70))
      Fp x6177(args[2][103 * steps + ((cycle - 1) & mask)]);
      assert(x6177 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg11"("cirgen/circuit/rv32im/sha.cpp":260:70))
      Fp x6178(args[2][105 * steps + ((cycle - 1) & mask)]);
      assert(x6178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":261:29)
      Fp x6179 = Fp(x6177) + Fp(x6178);
      if (x6179 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        args[2][141 * steps + cycle] = x94;
        // loc("cirgen/circuit/rv32im/sha.cpp":263:5)
        args[2][135 * steps + cycle] = x71;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6180 = x95 - x6177;
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6181 = x6180 - x6178;
      if (x6181 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6182(args[2][136 * steps + ((cycle - 1) & mask)]);
        assert(x6182 != Fp::invalid());
        if (x6182 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          args[2][141 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":269:7)
          args[2][135 * steps + cycle] = x71;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":271:20)
        auto x6183 = x95 - x6182;
        if (x6183 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6184(args[2][141 * steps + ((cycle - 1) & mask)]);
          assert(x6184 != Fp::invalid());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][141 * steps + cycle] = x6184;
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":274:42))
          Fp x6185(args[2][135 * steps + ((cycle - 1) & mask)]);
          assert(x6185 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":274:42)
          auto x6186 = x6185 - x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":274:7)
          args[2][135 * steps + cycle] = x6186;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6187(args[2][135 * steps + ((cycle - 0) & mask)]);
      assert(x6187 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6188 = (x6187 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][136 * steps + cycle] = x6188;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6189 = inv(x6187);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][137 * steps + cycle] = x6189;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6190(args[2][136 * steps + ((cycle - 0) & mask)]);
      assert(x6190 != Fp::invalid());
      if (x6190 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6187 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6191 = x95 - x6190;
      if (x6191 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x6192(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x6192 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x6193 = x6187 * x6192;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6194 = x6193 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6194 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x6190 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6195(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x6195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":281:17)
        auto x6196 = x95 - x6195;
        if (x6196 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":281:21)
          args[2][93 * steps + cycle] = x68;
        }
        if (x6195 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":282:17)
          args[2][93 * steps + cycle] = x67;
        }
      }
      if (x6191 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6197 = x2125 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6198 = Fp(x1340) + Fp(x6197);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6199 = x2829 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6200 = Fp(x6198) + Fp(x6199);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6201 = x3586 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6202 = Fp(x6200) + Fp(x6201);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6203 = x4028 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6204 = Fp(x6202) + Fp(x6203);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6205 = x4393 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6206 = Fp(x6204) + Fp(x6205);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6207 = x4825 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6208 = Fp(x6206) + Fp(x6207);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6209 = x5170 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6210 = Fp(x6208) + Fp(x6209);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6211 = x5499 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6212 = Fp(x6210) + Fp(x6211);
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6213 = x6175 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6214 = Fp(x6212) + Fp(x6213);
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x6215(args[2][105 * steps + ((cycle - 0) & mask)]);
        assert(x6215 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6216 = x6215 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6217 = Fp(x6214) + Fp(x6216);
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x6218(args[2][106 * steps + ((cycle - 0) & mask)]);
        assert(x6218 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6219 = x6218 * x66;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6220 = Fp(x6217) + Fp(x6219);
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x6221(args[2][107 * steps + ((cycle - 0) & mask)]);
        assert(x6221 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x6222 = x6221 * x65;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x6223 = Fp(x6220) + Fp(x6222);
        // loc("cirgen/circuit/rv32im/sha.cpp":284:33)
        args[2][93 * steps + cycle] = x6223;
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x6224 = Fp(x596) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6225 = Fp(x6224.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x6225;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x6226(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x6226 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6227 = x6224 - x6226;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x6228 = x6227 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6229 = Fp(x6228.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x6229;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x6230(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x6230 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6231 = x6228 - x6230;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x6232 = x6231 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6233 = Fp(x6232.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x6233;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x6234(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x6234 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6235 = x6232 - x6234;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x6236 = x6235 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6237 = Fp(x6236.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x6237;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6238(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x6238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6239 = x6236 - x6238;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x6240 = x6239 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x6240;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6241(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x6241 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6242 = x95 - x6241;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x6243 = x6241 * x6242;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x6243;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x6244(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x6244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6245 = x92 - x6241;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x6246 = x6244 * x6245;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6246 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":287:40))
      Fp x6247(args[2][131 * steps + ((cycle - 1) & mask)]);
      assert(x6247 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":287:3)
      args[2][131 * steps + cycle] = x6247;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":288:38))
      Fp x6248(args[2][132 * steps + ((cycle - 1) & mask)]);
      assert(x6248 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":288:3)
      args[2][132 * steps + cycle] = x6248;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":289:34))
      Fp x6249(args[2][133 * steps + ((cycle - 1) & mask)]);
      assert(x6249 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":289:3)
      args[2][133 * steps + cycle] = x6249;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":290:34))
      Fp x6250(args[2][134 * steps + ((cycle - 1) & mask)]);
      assert(x6250 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      args[2][134 * steps + cycle] = x6250;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":291:36))
      Fp x6251(args[2][138 * steps + ((cycle - 1) & mask)]);
      assert(x6251 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      args[2][138 * steps + cycle] = x6251;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6252(args[2][143 * steps + ((cycle - 1) & mask)]);
      assert(x6252 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      args[2][143 * steps + cycle] = x6252;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6253(args[2][138 * steps + ((cycle - 0) & mask)]);
      assert(x6253 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6254 = (x6253 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][139 * steps + cycle] = x6254;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6255 = inv(x6253);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][140 * steps + cycle] = x6255;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6256(args[2][139 * steps + ((cycle - 0) & mask)]);
      assert(x6256 != Fp::invalid());
      if (x6256 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6253 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6257 = x95 - x6256;
      if (x6257 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x6258(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x6258 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x6259 = x6253 * x6258;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6260 = x6259 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6260 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("./cirgen/components/bits.h":20:23)
      args[2][142 * steps + cycle] = x94;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x6261(args[2][133 * steps + ((cycle - 0) & mask)]);
      assert(x6261 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":300:8)
      Fp x6262 = x6261 * x78;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x6263(args[2][134 * steps + ((cycle - 0) & mask)]);
      assert(x6263 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":301:8)
      Fp x6264 = x6263 * x78;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x6265(args[2][131 * steps + ((cycle - 0) & mask)]);
      assert(x6265 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":302:8)
      Fp x6266 = x6265 * x78;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6267(args[2][141 * steps + ((cycle - 0) & mask)]);
      assert(x6267 != Fp::invalid());
      host_args.at(0) = x68;
      host_args.at(1) = x6267;
      host_args.at(2) = x6187;
      host_args.at(3) = x6262;
      host_args.at(4) = x6264;
      host_args.at(5) = x6266;
      host_args.at(6) = x6253;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = 0x%x, data1 = 0x%x, state = 0x%x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":306:15)
      auto x6268 = x95 - x6267;
      if (x6268 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6269(args[2][143 * steps + ((cycle - 0) & mask)]);
        assert(x6269 != Fp::invalid());
        if (x6269 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          Fp x6270 = Fp(x6261) + Fp(x71);
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6271 = x6270 - x6187;
          {
            host_args.at(0) = x6271;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x6272(host_outs.at(0));
            Fp x6273(host_outs.at(1));
            Fp x6274(host_outs.at(2));
            Fp x6275(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][111 * steps + cycle] = x6272;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][112 * steps + cycle] = x6273;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][113 * steps + cycle] = x6274;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][114 * steps + cycle] = x6275;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6276(args[2][111 * steps + ((cycle - 0) & mask)]);
          assert(x6276 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6277(args[2][112 * steps + ((cycle - 0) & mask)]);
          assert(x6277 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6278(args[2][113 * steps + ((cycle - 0) & mask)]);
          assert(x6278 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6279(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x6279 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][108 * steps + cycle] = x6271;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][109 * steps + cycle] = x6176;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][110 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x6276;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x6277;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x6278;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x6279;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":308:16)
        auto x6280 = x95 - x6269;
        if (x6280 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          Fp x6281 = Fp(x6261) + Fp(x71);
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6282 = x6281 - x6187;
          {
            host_args.at(0) = x6282;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x6283(host_outs.at(0));
            Fp x6284(host_outs.at(1));
            Fp x6285(host_outs.at(2));
            Fp x6286(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][111 * steps + cycle] = x6283;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][112 * steps + cycle] = x6284;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][113 * steps + cycle] = x6285;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][114 * steps + cycle] = x6286;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6287(args[2][111 * steps + ((cycle - 0) & mask)]);
          assert(x6287 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6288(args[2][112 * steps + ((cycle - 0) & mask)]);
          assert(x6288 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6289(args[2][113 * steps + ((cycle - 0) & mask)]);
          assert(x6289 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6290(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x6290 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][108 * steps + cycle] = x6282;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][109 * steps + cycle] = x6176;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][110 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x6287;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x6288;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x6289;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x6290;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
        auto x6291 = x8 - x6187;
        {
          host_args.at(0) = x6291;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x6292(host_outs.at(0));
          Fp x6293(host_outs.at(1));
          Fp x6294(host_outs.at(2));
          Fp x6295(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][118 * steps + cycle] = x6292;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][119 * steps + cycle] = x6293;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][120 * steps + cycle] = x6294;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][121 * steps + cycle] = x6295;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6296(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x6296 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6297(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x6297 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6298(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x6298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6299(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x6299 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][115 * steps + cycle] = x6291;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][116 * steps + cycle] = x6176;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][117 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][118 * steps + cycle] = x6296;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][119 * steps + cycle] = x6297;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][120 * steps + cycle] = x6298;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][121 * steps + cycle] = x6299;
      }
      if (x6267 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6300(args[2][143 * steps + ((cycle - 0) & mask)]);
        assert(x6300 != Fp::invalid());
        if (x6300 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          Fp x6301 = Fp(x6263) + Fp(x71);
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6302 = x6301 - x6187;
          {
            host_args.at(0) = x6302;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x6303(host_outs.at(0));
            Fp x6304(host_outs.at(1));
            Fp x6305(host_outs.at(2));
            Fp x6306(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][111 * steps + cycle] = x6303;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][112 * steps + cycle] = x6304;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][113 * steps + cycle] = x6305;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][114 * steps + cycle] = x6306;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6307(args[2][111 * steps + ((cycle - 0) & mask)]);
          assert(x6307 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6308(args[2][112 * steps + ((cycle - 0) & mask)]);
          assert(x6308 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6309(args[2][113 * steps + ((cycle - 0) & mask)]);
          assert(x6309 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6310(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x6310 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][108 * steps + cycle] = x6302;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][109 * steps + cycle] = x6176;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][110 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x6307;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x6308;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x6309;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x6310;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":313:16)
        auto x6311 = x95 - x6300;
        if (x6311 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          Fp x6312 = Fp(x6263) + Fp(x71);
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6313 = x6312 - x6187;
          {
            host_args.at(0) = x6313;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x6314(host_outs.at(0));
            Fp x6315(host_outs.at(1));
            Fp x6316(host_outs.at(2));
            Fp x6317(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][111 * steps + cycle] = x6314;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][112 * steps + cycle] = x6315;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][113 * steps + cycle] = x6316;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][114 * steps + cycle] = x6317;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6318(args[2][111 * steps + ((cycle - 0) & mask)]);
          assert(x6318 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6319(args[2][112 * steps + ((cycle - 0) & mask)]);
          assert(x6319 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6320(args[2][113 * steps + ((cycle - 0) & mask)]);
          assert(x6320 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x6321(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x6321 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][108 * steps + cycle] = x6313;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][109 * steps + cycle] = x6176;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][110 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x6318;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x6319;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x6320;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x6321;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
        auto x6322 = x7 - x6187;
        {
          host_args.at(0) = x6322;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x6323(host_outs.at(0));
          Fp x6324(host_outs.at(1));
          Fp x6325(host_outs.at(2));
          Fp x6326(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][118 * steps + cycle] = x6323;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][119 * steps + cycle] = x6324;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][120 * steps + cycle] = x6325;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][121 * steps + cycle] = x6326;
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6327(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x6327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6328(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x6328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6329(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x6329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x6330(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x6330 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][115 * steps + cycle] = x6322;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][116 * steps + cycle] = x6176;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][117 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][118 * steps + cycle] = x6327;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][119 * steps + cycle] = x6328;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][120 * steps + cycle] = x6329;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][121 * steps + cycle] = x6330;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6331(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x6331 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6332(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x6332 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6333(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x6333 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6334(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x6334 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      Fp x6335 = x6333 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      Fp x6336 = Fp(x6334) + Fp(x6335);
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      Fp x6337 = x6331 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      Fp x6338 = Fp(x6332) + Fp(x6337);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6339 = Fp(x6336.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][82 * steps + cycle] = x6339;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6340 = Fp(x6336.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6341 = x6340 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][83 * steps + cycle] = x6341;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6342 = Fp(x6336.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6343 = x6342 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][84 * steps + cycle] = x6343;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6344 = Fp(x6336.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6345 = x6344 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][85 * steps + cycle] = x6345;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6346 = Fp(x6336.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6347 = x6346 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][86 * steps + cycle] = x6347;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6348 = Fp(x6336.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6349 = x6348 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][87 * steps + cycle] = x6349;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6350 = Fp(x6336.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6351 = x6350 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][88 * steps + cycle] = x6351;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6352 = Fp(x6336.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6353 = x6352 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][89 * steps + cycle] = x6353;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6354 = Fp(x6336.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6355 = x6354 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][90 * steps + cycle] = x6355;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6356 = Fp(x6336.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6357 = x6356 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][91 * steps + cycle] = x6357;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6358 = Fp(x6336.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6359 = x6358 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][19 * steps + cycle] = x6359;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6360 = Fp(x6336.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6361 = x6360 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][20 * steps + cycle] = x6361;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6362 = Fp(x6336.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6363 = x6362 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][21 * steps + cycle] = x6363;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6364 = Fp(x6336.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6365 = x6364 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][22 * steps + cycle] = x6365;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6366 = Fp(x6336.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6367 = x6366 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][23 * steps + cycle] = x6367;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6368 = Fp(x6336.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6369 = x6368 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][24 * steps + cycle] = x6369;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6370(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x6370 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6371(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x6371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6372 = x6371 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6373 = Fp(x6370) + Fp(x6372);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6374(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x6374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6375 = x6374 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6376 = Fp(x6373) + Fp(x6375);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6377(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x6377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6378 = x6377 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6379 = Fp(x6376) + Fp(x6378);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6380(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x6380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6381 = x6380 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6382 = Fp(x6379) + Fp(x6381);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6383(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x6383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6384 = x6383 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6385 = Fp(x6382) + Fp(x6384);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6386(args[2][88 * steps + ((cycle - 0) & mask)]);
      assert(x6386 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6387 = x6386 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6388 = Fp(x6385) + Fp(x6387);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6389(args[2][89 * steps + ((cycle - 0) & mask)]);
      assert(x6389 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6390 = x6389 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6391 = Fp(x6388) + Fp(x6390);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6392(args[2][90 * steps + ((cycle - 0) & mask)]);
      assert(x6392 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6393 = x6392 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6394 = Fp(x6391) + Fp(x6393);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6395(args[2][91 * steps + ((cycle - 0) & mask)]);
      assert(x6395 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6396 = x6395 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6397 = Fp(x6394) + Fp(x6396);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6398(args[2][19 * steps + ((cycle - 0) & mask)]);
      assert(x6398 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6399 = x6398 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6400 = Fp(x6397) + Fp(x6399);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6401(args[2][20 * steps + ((cycle - 0) & mask)]);
      assert(x6401 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6402 = x6401 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6403 = Fp(x6400) + Fp(x6402);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6404(args[2][21 * steps + ((cycle - 0) & mask)]);
      assert(x6404 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6405 = x6404 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6406 = Fp(x6403) + Fp(x6405);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6407(args[2][22 * steps + ((cycle - 0) & mask)]);
      assert(x6407 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6408 = x6407 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6409 = Fp(x6406) + Fp(x6408);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6410(args[2][23 * steps + ((cycle - 0) & mask)]);
      assert(x6410 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6411 = x6410 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6412 = Fp(x6409) + Fp(x6411);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6413(args[2][24 * steps + ((cycle - 0) & mask)]);
      assert(x6413 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6414 = x6413 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6415 = Fp(x6412) + Fp(x6414);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6416 = x6336 - x6415;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x6417 = x6416 * x9;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][80 * steps + cycle] = x6417;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6418(args[2][80 * steps + ((cycle - 0) & mask)]);
      assert(x6418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      Fp x6419 = Fp(x6338) + Fp(x6418);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6420 = Fp(x6419.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][25 * steps + cycle] = x6420;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6421 = Fp(x6419.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6422 = x6421 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][26 * steps + cycle] = x6422;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6423 = Fp(x6419.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6424 = x6423 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][27 * steps + cycle] = x6424;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6425 = Fp(x6419.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6426 = x6425 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][28 * steps + cycle] = x6426;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6427 = Fp(x6419.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6428 = x6427 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][29 * steps + cycle] = x6428;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6429 = Fp(x6419.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6430 = x6429 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][30 * steps + cycle] = x6430;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6431 = Fp(x6419.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6432 = x6431 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][31 * steps + cycle] = x6432;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6433 = Fp(x6419.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6434 = x6433 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][32 * steps + cycle] = x6434;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6435 = Fp(x6419.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6436 = x6435 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][33 * steps + cycle] = x6436;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6437 = Fp(x6419.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6438 = x6437 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][34 * steps + cycle] = x6438;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6439 = Fp(x6419.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6440 = x6439 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][35 * steps + cycle] = x6440;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6441 = Fp(x6419.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6442 = x6441 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][36 * steps + cycle] = x6442;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6443 = Fp(x6419.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6444 = x6443 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][37 * steps + cycle] = x6444;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6445 = Fp(x6419.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6446 = x6445 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][38 * steps + cycle] = x6446;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6447 = Fp(x6419.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6448 = x6447 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][39 * steps + cycle] = x6448;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6449 = Fp(x6419.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x6450 = x6449 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][40 * steps + cycle] = x6450;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6451(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x6451 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6452(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x6452 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6453 = x6452 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6454 = Fp(x6451) + Fp(x6453);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6455(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x6455 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6456 = x6455 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6457 = Fp(x6454) + Fp(x6456);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6458(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x6458 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6459 = x6458 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6460 = Fp(x6457) + Fp(x6459);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6461(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x6461 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6462 = x6461 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6463 = Fp(x6460) + Fp(x6462);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6464(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x6464 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6465 = x6464 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6466 = Fp(x6463) + Fp(x6465);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6467(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x6467 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6468 = x6467 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6469 = Fp(x6466) + Fp(x6468);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6470(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x6470 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6471 = x6470 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6472 = Fp(x6469) + Fp(x6471);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6473(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x6473 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6474 = x6473 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6475 = Fp(x6472) + Fp(x6474);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6476(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x6476 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6477 = x6476 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6478 = Fp(x6475) + Fp(x6477);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6479(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x6479 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6480 = x6479 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6481 = Fp(x6478) + Fp(x6480);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6482(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x6482 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6483 = x6482 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6484 = Fp(x6481) + Fp(x6483);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6485(args[2][37 * steps + ((cycle - 0) & mask)]);
      assert(x6485 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6486 = x6485 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6487 = Fp(x6484) + Fp(x6486);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6488(args[2][38 * steps + ((cycle - 0) & mask)]);
      assert(x6488 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6489 = x6488 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6490 = Fp(x6487) + Fp(x6489);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6491(args[2][39 * steps + ((cycle - 0) & mask)]);
      assert(x6491 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6492 = x6491 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6493 = Fp(x6490) + Fp(x6492);
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6494(args[2][40 * steps + ((cycle - 0) & mask)]);
      assert(x6494 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x6495 = x6494 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x6496 = Fp(x6493) + Fp(x6495);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6497 = x6419 - x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x6498 = x6497 * x9;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][81 * steps + cycle] = x6498;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6499(args[2][150 * steps + ((cycle - 1) & mask)]);
      assert(x6499 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6500(args[2][151 * steps + ((cycle - 1) & mask)]);
      assert(x6500 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6501(args[2][152 * steps + ((cycle - 1) & mask)]);
      assert(x6501 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6502(args[2][153 * steps + ((cycle - 1) & mask)]);
      assert(x6502 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6503(args[2][154 * steps + ((cycle - 1) & mask)]);
      assert(x6503 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6504(args[2][155 * steps + ((cycle - 1) & mask)]);
      assert(x6504 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6505(args[2][156 * steps + ((cycle - 1) & mask)]);
      assert(x6505 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6506(args[2][157 * steps + ((cycle - 1) & mask)]);
      assert(x6506 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6507(args[2][158 * steps + ((cycle - 1) & mask)]);
      assert(x6507 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6508(args[2][159 * steps + ((cycle - 1) & mask)]);
      assert(x6508 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6509(args[2][160 * steps + ((cycle - 1) & mask)]);
      assert(x6509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6510(args[2][161 * steps + ((cycle - 1) & mask)]);
      assert(x6510 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6511(args[2][162 * steps + ((cycle - 1) & mask)]);
      assert(x6511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6512(args[2][163 * steps + ((cycle - 1) & mask)]);
      assert(x6512 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6513(args[2][164 * steps + ((cycle - 1) & mask)]);
      assert(x6513 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6514(args[2][165 * steps + ((cycle - 1) & mask)]);
      assert(x6514 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6515(args[2][166 * steps + ((cycle - 1) & mask)]);
      assert(x6515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6516(args[2][167 * steps + ((cycle - 1) & mask)]);
      assert(x6516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6517(args[2][168 * steps + ((cycle - 1) & mask)]);
      assert(x6517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6518(args[2][169 * steps + ((cycle - 1) & mask)]);
      assert(x6518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6519(args[2][170 * steps + ((cycle - 1) & mask)]);
      assert(x6519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6520(args[2][171 * steps + ((cycle - 1) & mask)]);
      assert(x6520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6521(args[2][172 * steps + ((cycle - 1) & mask)]);
      assert(x6521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6522(args[2][173 * steps + ((cycle - 1) & mask)]);
      assert(x6522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6523(args[2][174 * steps + ((cycle - 1) & mask)]);
      assert(x6523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6524(args[2][175 * steps + ((cycle - 1) & mask)]);
      assert(x6524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6525(args[2][176 * steps + ((cycle - 1) & mask)]);
      assert(x6525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6526(args[2][177 * steps + ((cycle - 1) & mask)]);
      assert(x6526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6527(args[2][178 * steps + ((cycle - 1) & mask)]);
      assert(x6527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6528(args[2][179 * steps + ((cycle - 1) & mask)]);
      assert(x6528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6529(args[2][180 * steps + ((cycle - 1) & mask)]);
      assert(x6529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6530(args[2][181 * steps + ((cycle - 1) & mask)]);
      assert(x6530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6531(args[2][150 * steps + ((cycle - 2) & mask)]);
      assert(x6531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6532(args[2][151 * steps + ((cycle - 2) & mask)]);
      assert(x6532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6533(args[2][152 * steps + ((cycle - 2) & mask)]);
      assert(x6533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6534(args[2][153 * steps + ((cycle - 2) & mask)]);
      assert(x6534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6535(args[2][154 * steps + ((cycle - 2) & mask)]);
      assert(x6535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6536(args[2][155 * steps + ((cycle - 2) & mask)]);
      assert(x6536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6537(args[2][156 * steps + ((cycle - 2) & mask)]);
      assert(x6537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6538(args[2][157 * steps + ((cycle - 2) & mask)]);
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6539(args[2][158 * steps + ((cycle - 2) & mask)]);
      assert(x6539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6540(args[2][159 * steps + ((cycle - 2) & mask)]);
      assert(x6540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6541(args[2][160 * steps + ((cycle - 2) & mask)]);
      assert(x6541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6542(args[2][161 * steps + ((cycle - 2) & mask)]);
      assert(x6542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6543(args[2][162 * steps + ((cycle - 2) & mask)]);
      assert(x6543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6544(args[2][163 * steps + ((cycle - 2) & mask)]);
      assert(x6544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6545(args[2][164 * steps + ((cycle - 2) & mask)]);
      assert(x6545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6546(args[2][165 * steps + ((cycle - 2) & mask)]);
      assert(x6546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6547(args[2][166 * steps + ((cycle - 2) & mask)]);
      assert(x6547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6548(args[2][167 * steps + ((cycle - 2) & mask)]);
      assert(x6548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6549(args[2][168 * steps + ((cycle - 2) & mask)]);
      assert(x6549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6550(args[2][169 * steps + ((cycle - 2) & mask)]);
      assert(x6550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6551(args[2][170 * steps + ((cycle - 2) & mask)]);
      assert(x6551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6552(args[2][171 * steps + ((cycle - 2) & mask)]);
      assert(x6552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6553(args[2][172 * steps + ((cycle - 2) & mask)]);
      assert(x6553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6554(args[2][173 * steps + ((cycle - 2) & mask)]);
      assert(x6554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6555(args[2][174 * steps + ((cycle - 2) & mask)]);
      assert(x6555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6556(args[2][175 * steps + ((cycle - 2) & mask)]);
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6557(args[2][176 * steps + ((cycle - 2) & mask)]);
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6558(args[2][177 * steps + ((cycle - 2) & mask)]);
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6559(args[2][178 * steps + ((cycle - 2) & mask)]);
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6560(args[2][179 * steps + ((cycle - 2) & mask)]);
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6561(args[2][180 * steps + ((cycle - 2) & mask)]);
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6562(args[2][181 * steps + ((cycle - 2) & mask)]);
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6563(args[2][150 * steps + ((cycle - 3) & mask)]);
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6564(args[2][151 * steps + ((cycle - 3) & mask)]);
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6565(args[2][152 * steps + ((cycle - 3) & mask)]);
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6566(args[2][153 * steps + ((cycle - 3) & mask)]);
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6567(args[2][154 * steps + ((cycle - 3) & mask)]);
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6568(args[2][155 * steps + ((cycle - 3) & mask)]);
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6569(args[2][156 * steps + ((cycle - 3) & mask)]);
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6570(args[2][157 * steps + ((cycle - 3) & mask)]);
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6571(args[2][158 * steps + ((cycle - 3) & mask)]);
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6572(args[2][159 * steps + ((cycle - 3) & mask)]);
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6573(args[2][160 * steps + ((cycle - 3) & mask)]);
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6574(args[2][161 * steps + ((cycle - 3) & mask)]);
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6575(args[2][162 * steps + ((cycle - 3) & mask)]);
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6576(args[2][163 * steps + ((cycle - 3) & mask)]);
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6577(args[2][164 * steps + ((cycle - 3) & mask)]);
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6578(args[2][165 * steps + ((cycle - 3) & mask)]);
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6579(args[2][166 * steps + ((cycle - 3) & mask)]);
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6580(args[2][167 * steps + ((cycle - 3) & mask)]);
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6581(args[2][168 * steps + ((cycle - 3) & mask)]);
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6582(args[2][169 * steps + ((cycle - 3) & mask)]);
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6583(args[2][170 * steps + ((cycle - 3) & mask)]);
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6584(args[2][171 * steps + ((cycle - 3) & mask)]);
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6585(args[2][172 * steps + ((cycle - 3) & mask)]);
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6586(args[2][173 * steps + ((cycle - 3) & mask)]);
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6587(args[2][174 * steps + ((cycle - 3) & mask)]);
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6588(args[2][175 * steps + ((cycle - 3) & mask)]);
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6589(args[2][176 * steps + ((cycle - 3) & mask)]);
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6590(args[2][177 * steps + ((cycle - 3) & mask)]);
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6591(args[2][178 * steps + ((cycle - 3) & mask)]);
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6592(args[2][179 * steps + ((cycle - 3) & mask)]);
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6593(args[2][180 * steps + ((cycle - 3) & mask)]);
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6594(args[2][181 * steps + ((cycle - 3) & mask)]);
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6595(args[2][150 * steps + ((cycle - 4) & mask)]);
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6596(args[2][151 * steps + ((cycle - 4) & mask)]);
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6597(args[2][152 * steps + ((cycle - 4) & mask)]);
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6598(args[2][153 * steps + ((cycle - 4) & mask)]);
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6599(args[2][154 * steps + ((cycle - 4) & mask)]);
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6600(args[2][155 * steps + ((cycle - 4) & mask)]);
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6601(args[2][156 * steps + ((cycle - 4) & mask)]);
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6602(args[2][157 * steps + ((cycle - 4) & mask)]);
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6603(args[2][158 * steps + ((cycle - 4) & mask)]);
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6604(args[2][159 * steps + ((cycle - 4) & mask)]);
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6605(args[2][160 * steps + ((cycle - 4) & mask)]);
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6606(args[2][161 * steps + ((cycle - 4) & mask)]);
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6607(args[2][162 * steps + ((cycle - 4) & mask)]);
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6608(args[2][163 * steps + ((cycle - 4) & mask)]);
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6609(args[2][164 * steps + ((cycle - 4) & mask)]);
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6610(args[2][165 * steps + ((cycle - 4) & mask)]);
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6611(args[2][166 * steps + ((cycle - 4) & mask)]);
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6612(args[2][167 * steps + ((cycle - 4) & mask)]);
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6613(args[2][168 * steps + ((cycle - 4) & mask)]);
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6614(args[2][169 * steps + ((cycle - 4) & mask)]);
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6615(args[2][170 * steps + ((cycle - 4) & mask)]);
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6616(args[2][171 * steps + ((cycle - 4) & mask)]);
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6617(args[2][172 * steps + ((cycle - 4) & mask)]);
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6618(args[2][173 * steps + ((cycle - 4) & mask)]);
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6619(args[2][174 * steps + ((cycle - 4) & mask)]);
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6620(args[2][175 * steps + ((cycle - 4) & mask)]);
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6621(args[2][176 * steps + ((cycle - 4) & mask)]);
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6622(args[2][177 * steps + ((cycle - 4) & mask)]);
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6623(args[2][178 * steps + ((cycle - 4) & mask)]);
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6624(args[2][179 * steps + ((cycle - 4) & mask)]);
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6625(args[2][180 * steps + ((cycle - 4) & mask)]);
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6626(args[2][181 * steps + ((cycle - 4) & mask)]);
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6627(args[2][182 * steps + ((cycle - 1) & mask)]);
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6628(args[2][183 * steps + ((cycle - 1) & mask)]);
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6629(args[2][184 * steps + ((cycle - 1) & mask)]);
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6630(args[2][185 * steps + ((cycle - 1) & mask)]);
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6631(args[2][186 * steps + ((cycle - 1) & mask)]);
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6632(args[2][187 * steps + ((cycle - 1) & mask)]);
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6633(args[2][188 * steps + ((cycle - 1) & mask)]);
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6634(args[2][189 * steps + ((cycle - 1) & mask)]);
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6635(args[2][190 * steps + ((cycle - 1) & mask)]);
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6636(args[2][191 * steps + ((cycle - 1) & mask)]);
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6637(args[2][192 * steps + ((cycle - 1) & mask)]);
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6638(args[2][193 * steps + ((cycle - 1) & mask)]);
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6639(args[2][194 * steps + ((cycle - 1) & mask)]);
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6640(args[2][195 * steps + ((cycle - 1) & mask)]);
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6641(args[2][196 * steps + ((cycle - 1) & mask)]);
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6642(args[2][197 * steps + ((cycle - 1) & mask)]);
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6643(args[2][198 * steps + ((cycle - 1) & mask)]);
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6644(args[2][199 * steps + ((cycle - 1) & mask)]);
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6645(args[2][200 * steps + ((cycle - 1) & mask)]);
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6646(args[2][201 * steps + ((cycle - 1) & mask)]);
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6647(args[2][202 * steps + ((cycle - 1) & mask)]);
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6648(args[2][203 * steps + ((cycle - 1) & mask)]);
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6649(args[2][204 * steps + ((cycle - 1) & mask)]);
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6650(args[2][205 * steps + ((cycle - 1) & mask)]);
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6651(args[2][206 * steps + ((cycle - 1) & mask)]);
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6652(args[2][207 * steps + ((cycle - 1) & mask)]);
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6653(args[2][208 * steps + ((cycle - 1) & mask)]);
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6654(args[2][209 * steps + ((cycle - 1) & mask)]);
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6655(args[2][210 * steps + ((cycle - 1) & mask)]);
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6656(args[2][211 * steps + ((cycle - 1) & mask)]);
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6657(args[2][212 * steps + ((cycle - 1) & mask)]);
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6658(args[2][213 * steps + ((cycle - 1) & mask)]);
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6659(args[2][182 * steps + ((cycle - 2) & mask)]);
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6660(args[2][183 * steps + ((cycle - 2) & mask)]);
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6661(args[2][184 * steps + ((cycle - 2) & mask)]);
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6662(args[2][185 * steps + ((cycle - 2) & mask)]);
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6663(args[2][186 * steps + ((cycle - 2) & mask)]);
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6664(args[2][187 * steps + ((cycle - 2) & mask)]);
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6665(args[2][188 * steps + ((cycle - 2) & mask)]);
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6666(args[2][189 * steps + ((cycle - 2) & mask)]);
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6667(args[2][190 * steps + ((cycle - 2) & mask)]);
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6668(args[2][191 * steps + ((cycle - 2) & mask)]);
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6669(args[2][192 * steps + ((cycle - 2) & mask)]);
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6670(args[2][193 * steps + ((cycle - 2) & mask)]);
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6671(args[2][194 * steps + ((cycle - 2) & mask)]);
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6672(args[2][195 * steps + ((cycle - 2) & mask)]);
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6673(args[2][196 * steps + ((cycle - 2) & mask)]);
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6674(args[2][197 * steps + ((cycle - 2) & mask)]);
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6675(args[2][198 * steps + ((cycle - 2) & mask)]);
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6676(args[2][199 * steps + ((cycle - 2) & mask)]);
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6677(args[2][200 * steps + ((cycle - 2) & mask)]);
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6678(args[2][201 * steps + ((cycle - 2) & mask)]);
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6679(args[2][202 * steps + ((cycle - 2) & mask)]);
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6680(args[2][203 * steps + ((cycle - 2) & mask)]);
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6681(args[2][204 * steps + ((cycle - 2) & mask)]);
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6682(args[2][205 * steps + ((cycle - 2) & mask)]);
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6683(args[2][206 * steps + ((cycle - 2) & mask)]);
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6684(args[2][207 * steps + ((cycle - 2) & mask)]);
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6685(args[2][208 * steps + ((cycle - 2) & mask)]);
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6686(args[2][209 * steps + ((cycle - 2) & mask)]);
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6687(args[2][210 * steps + ((cycle - 2) & mask)]);
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6688(args[2][211 * steps + ((cycle - 2) & mask)]);
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6689(args[2][212 * steps + ((cycle - 2) & mask)]);
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6690(args[2][213 * steps + ((cycle - 2) & mask)]);
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6691(args[2][182 * steps + ((cycle - 3) & mask)]);
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6692(args[2][183 * steps + ((cycle - 3) & mask)]);
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6693(args[2][184 * steps + ((cycle - 3) & mask)]);
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6694(args[2][185 * steps + ((cycle - 3) & mask)]);
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6695(args[2][186 * steps + ((cycle - 3) & mask)]);
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6696(args[2][187 * steps + ((cycle - 3) & mask)]);
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6697(args[2][188 * steps + ((cycle - 3) & mask)]);
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6698(args[2][189 * steps + ((cycle - 3) & mask)]);
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6699(args[2][190 * steps + ((cycle - 3) & mask)]);
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6700(args[2][191 * steps + ((cycle - 3) & mask)]);
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6701(args[2][192 * steps + ((cycle - 3) & mask)]);
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6702(args[2][193 * steps + ((cycle - 3) & mask)]);
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6703(args[2][194 * steps + ((cycle - 3) & mask)]);
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6704(args[2][195 * steps + ((cycle - 3) & mask)]);
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6705(args[2][196 * steps + ((cycle - 3) & mask)]);
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6706(args[2][197 * steps + ((cycle - 3) & mask)]);
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6707(args[2][198 * steps + ((cycle - 3) & mask)]);
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6708(args[2][199 * steps + ((cycle - 3) & mask)]);
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6709(args[2][200 * steps + ((cycle - 3) & mask)]);
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6710(args[2][201 * steps + ((cycle - 3) & mask)]);
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6711(args[2][202 * steps + ((cycle - 3) & mask)]);
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6712(args[2][203 * steps + ((cycle - 3) & mask)]);
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6713(args[2][204 * steps + ((cycle - 3) & mask)]);
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6714(args[2][205 * steps + ((cycle - 3) & mask)]);
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6715(args[2][206 * steps + ((cycle - 3) & mask)]);
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6716(args[2][207 * steps + ((cycle - 3) & mask)]);
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6717(args[2][208 * steps + ((cycle - 3) & mask)]);
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6718(args[2][209 * steps + ((cycle - 3) & mask)]);
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6719(args[2][210 * steps + ((cycle - 3) & mask)]);
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6720(args[2][211 * steps + ((cycle - 3) & mask)]);
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6721(args[2][212 * steps + ((cycle - 3) & mask)]);
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6722(args[2][213 * steps + ((cycle - 3) & mask)]);
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6723(args[2][182 * steps + ((cycle - 4) & mask)]);
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6724(args[2][183 * steps + ((cycle - 4) & mask)]);
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6725(args[2][184 * steps + ((cycle - 4) & mask)]);
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6726(args[2][185 * steps + ((cycle - 4) & mask)]);
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6727(args[2][186 * steps + ((cycle - 4) & mask)]);
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6728(args[2][187 * steps + ((cycle - 4) & mask)]);
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6729(args[2][188 * steps + ((cycle - 4) & mask)]);
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6730(args[2][189 * steps + ((cycle - 4) & mask)]);
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6731(args[2][190 * steps + ((cycle - 4) & mask)]);
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6732(args[2][191 * steps + ((cycle - 4) & mask)]);
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6733(args[2][192 * steps + ((cycle - 4) & mask)]);
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6734(args[2][193 * steps + ((cycle - 4) & mask)]);
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6735(args[2][194 * steps + ((cycle - 4) & mask)]);
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6736(args[2][195 * steps + ((cycle - 4) & mask)]);
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6737(args[2][196 * steps + ((cycle - 4) & mask)]);
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6738(args[2][197 * steps + ((cycle - 4) & mask)]);
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6739(args[2][198 * steps + ((cycle - 4) & mask)]);
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6740(args[2][199 * steps + ((cycle - 4) & mask)]);
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6741(args[2][200 * steps + ((cycle - 4) & mask)]);
      assert(x6741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6742(args[2][201 * steps + ((cycle - 4) & mask)]);
      assert(x6742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6743(args[2][202 * steps + ((cycle - 4) & mask)]);
      assert(x6743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6744(args[2][203 * steps + ((cycle - 4) & mask)]);
      assert(x6744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6745(args[2][204 * steps + ((cycle - 4) & mask)]);
      assert(x6745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6746(args[2][205 * steps + ((cycle - 4) & mask)]);
      assert(x6746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6747(args[2][206 * steps + ((cycle - 4) & mask)]);
      assert(x6747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6748(args[2][207 * steps + ((cycle - 4) & mask)]);
      assert(x6748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6749(args[2][208 * steps + ((cycle - 4) & mask)]);
      assert(x6749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6750(args[2][209 * steps + ((cycle - 4) & mask)]);
      assert(x6750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6751(args[2][210 * steps + ((cycle - 4) & mask)]);
      assert(x6751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6752(args[2][211 * steps + ((cycle - 4) & mask)]);
      assert(x6752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6753(args[2][212 * steps + ((cycle - 4) & mask)]);
      assert(x6753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6754(args[2][213 * steps + ((cycle - 4) & mask)]);
      assert(x6754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6755(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x6755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6756(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x6756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6757(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x6757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x6758(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x6758 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      Fp x6759 = x6756 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      Fp x6760 = Fp(x6755) + Fp(x6759);
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      Fp x6761 = x6758 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      Fp x6762 = Fp(x6757) + Fp(x6761);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6763 = Fp(x6512) + Fp(x6521);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6764 = x6512 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6765 = x6764 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6766 = x6763 - x6765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6767 = Fp(x6513) + Fp(x6522);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6768 = x6513 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6769 = x6768 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6770 = x6767 - x6769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6771 = Fp(x6514) + Fp(x6523);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6772 = x6514 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6773 = x6772 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6774 = x6771 - x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6775 = Fp(x6515) + Fp(x6524);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6776 = x6515 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6777 = x6776 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6778 = x6775 - x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6779 = Fp(x6516) + Fp(x6525);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6780 = x6516 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6781 = x6780 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6782 = x6779 - x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6783 = Fp(x6517) + Fp(x6526);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6784 = x6517 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6785 = x6784 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6786 = x6783 - x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6787 = Fp(x6518) + Fp(x6527);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6788 = x6518 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6789 = x6788 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6790 = x6787 - x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6791 = Fp(x6519) + Fp(x6528);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6792 = x6519 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6793 = x6792 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6794 = x6791 - x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6795 = Fp(x6520) + Fp(x6529);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6796 = x6520 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6797 = x6796 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6798 = x6795 - x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6799 = Fp(x6521) + Fp(x6530);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6800 = x6521 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6801 = x6800 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6802 = x6799 - x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6803 = Fp(x6522) + Fp(x6499);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6804 = x6522 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6805 = x6804 * x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6806 = x6803 - x6805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6807 = Fp(x6523) + Fp(x6500);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6808 = x6523 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6809 = x6808 * x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6810 = x6807 - x6809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6811 = Fp(x6524) + Fp(x6501);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6812 = x6524 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6813 = x6812 * x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6814 = x6811 - x6813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6815 = Fp(x6525) + Fp(x6502);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6816 = x6525 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6817 = x6816 * x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6818 = x6815 - x6817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6819 = Fp(x6526) + Fp(x6503);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6820 = x6526 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6821 = x6820 * x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6822 = x6819 - x6821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6823 = Fp(x6527) + Fp(x6504);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6824 = x6527 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6825 = x6824 * x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6826 = x6823 - x6825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6827 = Fp(x6528) + Fp(x6505);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6828 = x6528 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6829 = x6828 * x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6830 = x6827 - x6829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6831 = Fp(x6529) + Fp(x6506);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6832 = x6529 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6833 = x6832 * x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6834 = x6831 - x6833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6835 = Fp(x6530) + Fp(x6507);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6836 = x6530 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6837 = x6836 * x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6838 = x6835 - x6837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6839 = Fp(x6499) + Fp(x6508);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6840 = x6499 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6841 = x6840 * x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6842 = x6839 - x6841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6843 = Fp(x6500) + Fp(x6509);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6844 = x6500 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6845 = x6844 * x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6846 = x6843 - x6845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6847 = Fp(x6501) + Fp(x6510);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6848 = x6501 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6849 = x6848 * x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6850 = x6847 - x6849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6851 = Fp(x6502) + Fp(x6511);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6852 = x6502 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6853 = x6852 * x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6854 = x6851 - x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6855 = Fp(x6503) + Fp(x6512);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6856 = x6503 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6857 = x6856 * x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6858 = x6855 - x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6859 = Fp(x6504) + Fp(x6513);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6860 = x6504 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6861 = x6860 * x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6862 = x6859 - x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6863 = Fp(x6505) + Fp(x6514);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6864 = x6505 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6865 = x6864 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6866 = x6863 - x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6867 = Fp(x6506) + Fp(x6515);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6868 = x6506 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6869 = x6868 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6870 = x6867 - x6869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6871 = Fp(x6507) + Fp(x6516);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6872 = x6507 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6873 = x6872 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6874 = x6871 - x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6875 = Fp(x6508) + Fp(x6517);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6876 = x6508 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6877 = x6876 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6878 = x6875 - x6877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6879 = Fp(x6509) + Fp(x6518);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6880 = x6509 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6881 = x6880 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6882 = x6879 - x6881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6883 = Fp(x6510) + Fp(x6519);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6884 = x6510 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6885 = x6884 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6886 = x6883 - x6885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6887 = Fp(x6511) + Fp(x6520);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6888 = x6511 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6889 = x6888 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6890 = x6887 - x6889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6891 = Fp(x6501) + Fp(x6766);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6892 = x6848 * x6766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6893 = x6891 - x6892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6894 = Fp(x6502) + Fp(x6770);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6895 = x6852 * x6770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6896 = x6894 - x6895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6897 = Fp(x6503) + Fp(x6774);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6898 = x6856 * x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6899 = x6897 - x6898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6900 = Fp(x6504) + Fp(x6778);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6901 = x6860 * x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6902 = x6900 - x6901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6903 = Fp(x6505) + Fp(x6782);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6904 = x6864 * x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6905 = x6903 - x6904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6906 = Fp(x6506) + Fp(x6786);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6907 = x6868 * x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6908 = x6906 - x6907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6909 = Fp(x6507) + Fp(x6790);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6910 = x6872 * x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6909 - x6910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6912 = Fp(x6508) + Fp(x6794);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6913 = x6876 * x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6912 - x6913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6915 = Fp(x6509) + Fp(x6798);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6916 = x6880 * x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6917 = x6915 - x6916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6918 = Fp(x6510) + Fp(x6802);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6919 = x6884 * x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6920 = x6918 - x6919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6921 = Fp(x6511) + Fp(x6806);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6922 = x6888 * x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6921 - x6922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6924 = Fp(x6512) + Fp(x6810);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6925 = x6764 * x6810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6924 - x6925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6927 = Fp(x6513) + Fp(x6814);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6928 = x6768 * x6814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6929 = x6927 - x6928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6930 = Fp(x6514) + Fp(x6818);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6931 = x6772 * x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6932 = x6930 - x6931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6933 = Fp(x6515) + Fp(x6822);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6934 = x6776 * x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6933 - x6934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6936 = Fp(x6516) + Fp(x6826);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6937 = x6780 * x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6936 - x6937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6939 = Fp(x6517) + Fp(x6830);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6940 = x6784 * x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6941 = x6939 - x6940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6942 = Fp(x6518) + Fp(x6834);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6943 = x6788 * x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6944 = x6942 - x6943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6945 = Fp(x6519) + Fp(x6838);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6946 = x6792 * x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6945 - x6946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6948 = Fp(x6520) + Fp(x6842);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6949 = x6796 * x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6948 - x6949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6951 = Fp(x6521) + Fp(x6846);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6952 = x6800 * x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6951 - x6952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6954 = Fp(x6522) + Fp(x6850);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6955 = x6804 * x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6956 = x6954 - x6955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6957 = Fp(x6523) + Fp(x6854);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6958 = x6808 * x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6957 - x6958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6960 = Fp(x6524) + Fp(x6858);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6961 = x6812 * x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6960 - x6961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6963 = Fp(x6525) + Fp(x6862);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6964 = x6816 * x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6963 - x6964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6966 = Fp(x6526) + Fp(x6866);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6967 = x6820 * x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6968 = x6966 - x6967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6969 = Fp(x6527) + Fp(x6870);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6970 = x6824 * x6870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6969 - x6970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6972 = Fp(x6528) + Fp(x6874);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6973 = x6828 * x6874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6972 - x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6975 = Fp(x6529) + Fp(x6878);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6976 = x6832 * x6878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6975 - x6976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6978 = Fp(x6530) + Fp(x6882);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6979 = x6836 * x6882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6978 - x6979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6981 = Fp(x6499) + Fp(x6886);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6982 = x6840 * x6886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6981 - x6982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6984 = Fp(x6500) + Fp(x6890);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6985 = x6844 * x6890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6984 - x6985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6987 = Fp(x6638) + Fp(x6652);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6988 = x6638 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6989 = x6988 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6990 = x6987 - x6989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6991 = Fp(x6639) + Fp(x6653);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6992 = x6639 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6993 = x6992 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6994 = x6991 - x6993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6995 = Fp(x6640) + Fp(x6654);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6996 = x6640 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x6997 = x6996 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6998 = x6995 - x6997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x6999 = Fp(x6641) + Fp(x6655);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7000 = x6641 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7001 = x7000 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7002 = x6999 - x7001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7003 = Fp(x6642) + Fp(x6656);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7004 = x6642 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7005 = x7004 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7006 = x7003 - x7005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7007 = Fp(x6643) + Fp(x6657);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7008 = x6643 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7009 = x7008 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7010 = x7007 - x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7011 = Fp(x6644) + Fp(x6658);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7012 = x6644 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7013 = x7012 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7014 = x7011 - x7013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7015 = Fp(x6645) + Fp(x6627);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7016 = x6645 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7017 = x7016 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7018 = x7015 - x7017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7019 = Fp(x6646) + Fp(x6628);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7020 = x6646 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7021 = x7020 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7022 = x7019 - x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7023 = Fp(x6647) + Fp(x6629);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7024 = x6647 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7025 = x7024 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7026 = x7023 - x7025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7027 = Fp(x6648) + Fp(x6630);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7028 = x6648 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7029 = x7028 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7030 = x7027 - x7029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7031 = Fp(x6649) + Fp(x6631);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7032 = x6649 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7033 = x7032 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7034 = x7031 - x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7035 = Fp(x6650) + Fp(x6632);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7036 = x6650 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7037 = x7036 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7038 = x7035 - x7037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7039 = Fp(x6651) + Fp(x6633);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7040 = x6651 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7041 = x7040 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7042 = x7039 - x7041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7043 = Fp(x6652) + Fp(x6634);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7044 = x6652 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7045 = x7044 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7046 = x7043 - x7045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7047 = Fp(x6653) + Fp(x6635);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7048 = x6653 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7049 = x7048 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7050 = x7047 - x7049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7051 = Fp(x6654) + Fp(x6636);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7052 = x6654 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7053 = x7052 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7054 = x7051 - x7053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7055 = Fp(x6655) + Fp(x6637);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7056 = x6655 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7057 = x7056 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7058 = x7055 - x7057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7059 = Fp(x6656) + Fp(x6638);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7060 = x6656 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7061 = x7060 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7062 = x7059 - x7061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7063 = Fp(x6657) + Fp(x6639);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7064 = x6657 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7065 = x7064 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7066 = x7063 - x7065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7067 = Fp(x6658) + Fp(x6640);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7068 = x6658 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7069 = x7068 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7070 = x7067 - x7069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7071 = Fp(x6627) + Fp(x6641);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7072 = x6627 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7073 = x7072 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7074 = x7071 - x7073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7075 = Fp(x6628) + Fp(x6642);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7076 = x6628 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7077 = x7076 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7078 = x7075 - x7077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7079 = Fp(x6629) + Fp(x6643);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7080 = x6629 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7081 = x7080 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7082 = x7079 - x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7083 = Fp(x6630) + Fp(x6644);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7084 = x6630 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7085 = x7084 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7086 = x7083 - x7085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7087 = Fp(x6631) + Fp(x6645);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7088 = x6631 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7089 = x7088 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7090 = x7087 - x7089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7091 = Fp(x6632) + Fp(x6646);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7092 = x6632 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7093 = x7092 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7094 = x7091 - x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7095 = Fp(x6633) + Fp(x6647);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7096 = x6633 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7097 = x7096 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7098 = x7095 - x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7099 = Fp(x6634) + Fp(x6648);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7100 = x6634 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7101 = x7100 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7102 = x7099 - x7101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7103 = Fp(x6635) + Fp(x6649);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7104 = x6635 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7105 = x7104 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7106 = x7103 - x7105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7107 = Fp(x6636) + Fp(x6650);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7108 = x6636 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7109 = x7108 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x7107 - x7109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7111 = Fp(x6637) + Fp(x6651);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7112 = x6637 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7113 = x7112 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7114 = x7111 - x7113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7115 = Fp(x6633) + Fp(x6990);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7116 = x7096 * x6990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7117 = x7115 - x7116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7118 = Fp(x6634) + Fp(x6994);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7119 = x7100 * x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7120 = x7118 - x7119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7121 = Fp(x6635) + Fp(x6998);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7122 = x7104 * x6998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x7121 - x7122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7124 = Fp(x6636) + Fp(x7002);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7125 = x7108 * x7002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x7124 - x7125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7127 = Fp(x6637) + Fp(x7006);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7128 = x7112 * x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7129 = x7127 - x7128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7130 = Fp(x6638) + Fp(x7010);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7131 = x6988 * x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7132 = x7130 - x7131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7133 = Fp(x6639) + Fp(x7014);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7134 = x6992 * x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x7133 - x7134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7136 = Fp(x6640) + Fp(x7018);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7137 = x6996 * x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x7136 - x7137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7139 = Fp(x6641) + Fp(x7022);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7140 = x7000 * x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7141 = x7139 - x7140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7142 = Fp(x6642) + Fp(x7026);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7143 = x7004 * x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7144 = x7142 - x7143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7145 = Fp(x6643) + Fp(x7030);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7146 = x7008 * x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x7145 - x7146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7148 = Fp(x6644) + Fp(x7034);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7149 = x7012 * x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x7148 - x7149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7151 = Fp(x6645) + Fp(x7038);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7152 = x7016 * x7038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7153 = x7151 - x7152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7154 = Fp(x6646) + Fp(x7042);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7155 = x7020 * x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7156 = x7154 - x7155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7157 = Fp(x6647) + Fp(x7046);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7158 = x7024 * x7046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x7157 - x7158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7160 = Fp(x6648) + Fp(x7050);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7161 = x7028 * x7050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x7160 - x7161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7163 = Fp(x6649) + Fp(x7054);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7164 = x7032 * x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7165 = x7163 - x7164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7166 = Fp(x6650) + Fp(x7058);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7167 = x7036 * x7058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7168 = x7166 - x7167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7169 = Fp(x6651) + Fp(x7062);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7170 = x7040 * x7062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x7169 - x7170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7172 = Fp(x6652) + Fp(x7066);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7173 = x7044 * x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x7172 - x7173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7175 = Fp(x6653) + Fp(x7070);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7176 = x7048 * x7070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x7175 - x7176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7178 = Fp(x6654) + Fp(x7074);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7179 = x7052 * x7074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7180 = x7178 - x7179;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7181 = Fp(x6655) + Fp(x7078);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7182 = x7056 * x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x7181 - x7182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7184 = Fp(x6656) + Fp(x7082);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7185 = x7060 * x7082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x7184 - x7185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7187 = Fp(x6657) + Fp(x7086);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7188 = x7064 * x7086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x7187 - x7188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7190 = Fp(x6658) + Fp(x7090);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7191 = x7068 * x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7192 = x7190 - x7191;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7193 = Fp(x6627) + Fp(x7094);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7194 = x7072 * x7094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x7193 - x7194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7196 = Fp(x6628) + Fp(x7098);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7197 = x7076 * x7098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x7196 - x7197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7199 = Fp(x6629) + Fp(x7102);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7200 = x7080 * x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7201 = x7199 - x7200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7202 = Fp(x6630) + Fp(x7106);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7203 = x7084 * x7106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7204 = x7202 - x7203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7205 = Fp(x6631) + Fp(x7110);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7206 = x7088 * x7110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x7205 - x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x7208 = Fp(x6632) + Fp(x7114);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x7209 = x7092 * x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x7208 - x7209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7211 = x6724 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7212 = Fp(x6723) + Fp(x7211);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7213 = x6725 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7214 = Fp(x7212) + Fp(x7213);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7215 = x6726 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7216 = Fp(x7214) + Fp(x7215);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7217 = x6727 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7218 = Fp(x7216) + Fp(x7217);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7219 = x6728 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7220 = Fp(x7218) + Fp(x7219);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7221 = x6729 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7222 = Fp(x7220) + Fp(x7221);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7223 = x6730 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7224 = Fp(x7222) + Fp(x7223);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7225 = x6731 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7226 = Fp(x7224) + Fp(x7225);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7227 = x6732 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7228 = Fp(x7226) + Fp(x7227);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7229 = x6733 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7230 = Fp(x7228) + Fp(x7229);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7231 = x6734 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7232 = Fp(x7230) + Fp(x7231);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7233 = x6735 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7234 = Fp(x7232) + Fp(x7233);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7235 = x6736 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7236 = Fp(x7234) + Fp(x7235);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7237 = x6737 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7238 = Fp(x7236) + Fp(x7237);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7239 = x6738 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7240 = Fp(x7238) + Fp(x7239);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7241 = x6740 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7242 = Fp(x6739) + Fp(x7241);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7243 = x6741 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7244 = Fp(x7242) + Fp(x7243);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7245 = x6742 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7246 = Fp(x7244) + Fp(x7245);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7247 = x6743 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7248 = Fp(x7246) + Fp(x7247);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7249 = x6744 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7250 = Fp(x7248) + Fp(x7249);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7251 = x6745 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7252 = Fp(x7250) + Fp(x7251);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7253 = x6746 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7254 = Fp(x7252) + Fp(x7253);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7255 = x6747 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7256 = Fp(x7254) + Fp(x7255);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7257 = x6748 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7258 = Fp(x7256) + Fp(x7257);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7259 = x6749 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7260 = Fp(x7258) + Fp(x7259);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7261 = x6750 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7262 = Fp(x7260) + Fp(x7261);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7263 = x6751 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7264 = Fp(x7262) + Fp(x7263);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7265 = x6752 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7266 = Fp(x7264) + Fp(x7265);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7267 = x6753 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7268 = Fp(x7266) + Fp(x7267);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7269 = x6754 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7270 = Fp(x7268) + Fp(x7269);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7271 = x6627 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7272 = x95 - x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7273 = x7272 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7274 = Fp(x7271) + Fp(x7273);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7275 = x6628 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7276 = x95 - x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7277 = x7276 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7278 = Fp(x7275) + Fp(x7277);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7279 = x6629 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7280 = x95 - x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7281 = x7280 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7282 = Fp(x7279) + Fp(x7281);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7283 = x6630 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7284 = x95 - x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7285 = x7284 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7286 = Fp(x7283) + Fp(x7285);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7287 = x6631 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7288 = x95 - x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7289 = x7288 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7290 = Fp(x7287) + Fp(x7289);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7291 = x6632 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7292 = x95 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7293 = x7292 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7294 = Fp(x7291) + Fp(x7293);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7295 = x6633 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7296 = x95 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7297 = x7296 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7298 = Fp(x7295) + Fp(x7297);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7299 = x6634 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7300 = x95 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7301 = x7300 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7302 = Fp(x7299) + Fp(x7301);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7303 = x6635 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7304 = x95 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7305 = x7304 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7306 = Fp(x7303) + Fp(x7305);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7307 = x6636 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7308 = x95 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7309 = x7308 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7310 = Fp(x7307) + Fp(x7309);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7311 = x6637 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7312 = x95 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7313 = x7312 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7314 = Fp(x7311) + Fp(x7313);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7315 = x6638 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7316 = x95 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7317 = x7316 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7318 = Fp(x7315) + Fp(x7317);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7319 = x6639 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7320 = x95 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7321 = x7320 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7322 = Fp(x7319) + Fp(x7321);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7323 = x6640 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7324 = x95 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7325 = x7324 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7326 = Fp(x7323) + Fp(x7325);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7327 = x6641 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7328 = x95 - x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7329 = x7328 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7330 = Fp(x7327) + Fp(x7329);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7331 = x6642 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7332 = x95 - x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7333 = x7332 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7334 = Fp(x7331) + Fp(x7333);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7335 = x6643 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7336 = x95 - x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7337 = x7336 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7338 = Fp(x7335) + Fp(x7337);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7339 = x6644 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7340 = x95 - x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7341 = x7340 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7342 = Fp(x7339) + Fp(x7341);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7343 = x6645 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7344 = x95 - x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7345 = x7344 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7346 = Fp(x7343) + Fp(x7345);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7347 = x6646 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7348 = x95 - x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7349 = x7348 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7350 = Fp(x7347) + Fp(x7349);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7351 = x6647 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7352 = x95 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7353 = x7352 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7354 = Fp(x7351) + Fp(x7353);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7355 = x6648 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7356 = x95 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7357 = x7356 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7358 = Fp(x7355) + Fp(x7357);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7359 = x6649 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7360 = x95 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7361 = x7360 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7362 = Fp(x7359) + Fp(x7361);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7363 = x6650 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7364 = x95 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7365 = x7364 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7366 = Fp(x7363) + Fp(x7365);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7367 = x6651 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7368 = x95 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7369 = x7368 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7370 = Fp(x7367) + Fp(x7369);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7371 = x6652 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7372 = x95 - x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7373 = x7372 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7374 = Fp(x7371) + Fp(x7373);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7375 = x6653 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7376 = x95 - x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7377 = x7376 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7378 = Fp(x7375) + Fp(x7377);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7379 = x6654 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7380 = x95 - x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7381 = x7380 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7382 = Fp(x7379) + Fp(x7381);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7383 = x6655 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7384 = x95 - x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7385 = x7384 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7386 = Fp(x7383) + Fp(x7385);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7387 = x6656 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7388 = x95 - x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7389 = x7388 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7390 = Fp(x7387) + Fp(x7389);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7391 = x6657 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7392 = x95 - x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7393 = x7392 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7394 = Fp(x7391) + Fp(x7393);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7395 = x6658 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7396 = x95 - x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x7397 = x7396 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x7398 = Fp(x7395) + Fp(x7397);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7399 = x7278 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7400 = Fp(x7274) + Fp(x7399);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7401 = x7282 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7402 = Fp(x7400) + Fp(x7401);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7403 = x7286 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7404 = Fp(x7402) + Fp(x7403);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7405 = x7290 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7406 = Fp(x7404) + Fp(x7405);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7407 = x7294 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7408 = Fp(x7406) + Fp(x7407);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7409 = x7298 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7410 = Fp(x7408) + Fp(x7409);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7411 = x7302 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7412 = Fp(x7410) + Fp(x7411);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7413 = x7306 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7414 = Fp(x7412) + Fp(x7413);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7415 = x7310 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7416 = Fp(x7414) + Fp(x7415);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7417 = x7314 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7418 = Fp(x7416) + Fp(x7417);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7419 = x7318 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7420 = Fp(x7418) + Fp(x7419);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7421 = x7322 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7422 = Fp(x7420) + Fp(x7421);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7423 = x7326 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7424 = Fp(x7422) + Fp(x7423);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7425 = x7330 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7426 = Fp(x7424) + Fp(x7425);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7427 = x7334 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7428 = Fp(x7426) + Fp(x7427);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7429 = x7342 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7430 = Fp(x7338) + Fp(x7429);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7431 = x7346 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7432 = Fp(x7430) + Fp(x7431);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7433 = x7350 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7434 = Fp(x7432) + Fp(x7433);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7435 = x7354 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7436 = Fp(x7434) + Fp(x7435);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7437 = x7358 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7438 = Fp(x7436) + Fp(x7437);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7439 = x7362 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7440 = Fp(x7438) + Fp(x7439);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7441 = x7366 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7442 = Fp(x7440) + Fp(x7441);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7443 = x7370 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7444 = Fp(x7442) + Fp(x7443);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7445 = x7374 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7446 = Fp(x7444) + Fp(x7445);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7447 = x7378 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7448 = Fp(x7446) + Fp(x7447);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7449 = x7382 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7450 = Fp(x7448) + Fp(x7449);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7451 = x7386 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7452 = Fp(x7450) + Fp(x7451);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7453 = x7390 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7454 = Fp(x7452) + Fp(x7453);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7455 = x7394 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7456 = Fp(x7454) + Fp(x7455);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7457 = x7398 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7458 = Fp(x7456) + Fp(x7457);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7459 = x7120 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7460 = Fp(x7117) + Fp(x7459);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7461 = x7123 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7462 = Fp(x7460) + Fp(x7461);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7463 = x7126 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7464 = Fp(x7462) + Fp(x7463);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7465 = x7129 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7466 = Fp(x7464) + Fp(x7465);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7467 = x7132 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7468 = Fp(x7466) + Fp(x7467);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7469 = x7135 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7470 = Fp(x7468) + Fp(x7469);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7471 = x7138 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7472 = Fp(x7470) + Fp(x7471);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7473 = x7141 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7474 = Fp(x7472) + Fp(x7473);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7475 = x7144 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7476 = Fp(x7474) + Fp(x7475);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7477 = x7147 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7478 = Fp(x7476) + Fp(x7477);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7479 = x7150 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7480 = Fp(x7478) + Fp(x7479);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7481 = x7153 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7482 = Fp(x7480) + Fp(x7481);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7483 = x7156 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7484 = Fp(x7482) + Fp(x7483);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7485 = x7159 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7486 = Fp(x7484) + Fp(x7485);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7487 = x7162 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7488 = Fp(x7486) + Fp(x7487);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7489 = x7168 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7490 = Fp(x7165) + Fp(x7489);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7491 = x7171 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7492 = Fp(x7490) + Fp(x7491);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7493 = x7174 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7494 = Fp(x7492) + Fp(x7493);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7495 = x7177 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7496 = Fp(x7494) + Fp(x7495);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7497 = x7180 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7498 = Fp(x7496) + Fp(x7497);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7499 = x7183 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7500 = Fp(x7498) + Fp(x7499);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7501 = x7186 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7502 = Fp(x7500) + Fp(x7501);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7503 = x7189 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7504 = Fp(x7502) + Fp(x7503);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7505 = x7192 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7506 = Fp(x7504) + Fp(x7505);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7507 = x7195 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7508 = Fp(x7506) + Fp(x7507);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7509 = x7198 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7510 = Fp(x7508) + Fp(x7509);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7511 = x7201 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7512 = Fp(x7510) + Fp(x7511);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7513 = x7204 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7514 = Fp(x7512) + Fp(x7513);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7515 = x7207 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7516 = Fp(x7514) + Fp(x7515);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7517 = x7210 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7518 = Fp(x7516) + Fp(x7517);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7519 = Fp(x7428) + Fp(x7488);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7520 = Fp(x7458) + Fp(x7518);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7521 = Fp(x7240) + Fp(x7519);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7522 = Fp(x7270) + Fp(x7520);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7523 = Fp(x6760) + Fp(x7521);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7524 = Fp(x6762) + Fp(x7522);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7525 = Fp(x6415) + Fp(x7523);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x7526 = Fp(x6496) + Fp(x7524);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7527 = x6499 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7528 = x95 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7529 = x7527 * x7528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7530 = x95 - x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7531 = x6499 * x7530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7532 = x7531 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7533 = Fp(x7529) + Fp(x7532);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7534 = x95 - x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7535 = x7534 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7536 = x7535 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7537 = Fp(x7533) + Fp(x7536);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7538 = x7527 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7539 = Fp(x7537) + Fp(x7538);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7540 = x6500 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7541 = x95 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7542 = x7540 * x7541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7543 = x95 - x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7544 = x6500 * x7543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7545 = x7544 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7546 = Fp(x7542) + Fp(x7545);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7547 = x95 - x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7548 = x7547 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7549 = x7548 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7550 = Fp(x7546) + Fp(x7549);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7551 = x7540 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7552 = Fp(x7550) + Fp(x7551);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7553 = x6501 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7554 = x95 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7555 = x7553 * x7554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7556 = x95 - x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7557 = x6501 * x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7558 = x7557 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7559 = Fp(x7555) + Fp(x7558);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7560 = x95 - x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7561 = x7560 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7562 = x7561 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7563 = Fp(x7559) + Fp(x7562);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7564 = x7553 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7565 = Fp(x7563) + Fp(x7564);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7566 = x6502 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7567 = x95 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7568 = x7566 * x7567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7569 = x95 - x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7570 = x6502 * x7569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7571 = x7570 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7572 = Fp(x7568) + Fp(x7571);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7573 = x95 - x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7574 = x7573 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7575 = x7574 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7576 = Fp(x7572) + Fp(x7575);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7577 = x7566 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7578 = Fp(x7576) + Fp(x7577);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7579 = x6503 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7580 = x95 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7581 = x7579 * x7580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7582 = x95 - x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7583 = x6503 * x7582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7584 = x7583 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7585 = Fp(x7581) + Fp(x7584);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7586 = x95 - x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7587 = x7586 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7588 = x7587 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7589 = Fp(x7585) + Fp(x7588);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7590 = x7579 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7591 = Fp(x7589) + Fp(x7590);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7592 = x6504 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7593 = x95 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7594 = x7592 * x7593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7595 = x95 - x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7596 = x6504 * x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7597 = x7596 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7598 = Fp(x7594) + Fp(x7597);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7599 = x95 - x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7600 = x7599 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7601 = x7600 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7602 = Fp(x7598) + Fp(x7601);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7603 = x7592 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7604 = Fp(x7602) + Fp(x7603);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7605 = x6505 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7606 = x95 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7607 = x7605 * x7606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7608 = x95 - x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7609 = x6505 * x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7610 = x7609 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7611 = Fp(x7607) + Fp(x7610);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7612 = x95 - x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7613 = x7612 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7614 = x7613 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7615 = Fp(x7611) + Fp(x7614);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7616 = x7605 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7617 = Fp(x7615) + Fp(x7616);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7618 = x6506 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7619 = x95 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7620 = x7618 * x7619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7621 = x95 - x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7622 = x6506 * x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7623 = x7622 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7624 = Fp(x7620) + Fp(x7623);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7625 = x95 - x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7626 = x7625 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7627 = x7626 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7628 = Fp(x7624) + Fp(x7627);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7629 = x7618 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7630 = Fp(x7628) + Fp(x7629);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7631 = x6507 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7632 = x95 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7633 = x7631 * x7632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7634 = x95 - x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7635 = x6507 * x7634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7636 = x7635 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7637 = Fp(x7633) + Fp(x7636);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7638 = x95 - x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7639 = x7638 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7640 = x7639 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7641 = Fp(x7637) + Fp(x7640);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7642 = x7631 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7643 = Fp(x7641) + Fp(x7642);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7644 = x6508 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7645 = x95 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7646 = x7644 * x7645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7647 = x95 - x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7648 = x6508 * x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7649 = x7648 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7650 = Fp(x7646) + Fp(x7649);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7651 = x95 - x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7652 = x7651 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7653 = x7652 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7654 = Fp(x7650) + Fp(x7653);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7655 = x7644 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7656 = Fp(x7654) + Fp(x7655);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7657 = x6509 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7658 = x95 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7659 = x7657 * x7658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7660 = x95 - x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7661 = x6509 * x7660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7662 = x7661 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7663 = Fp(x7659) + Fp(x7662);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7664 = x95 - x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7665 = x7664 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7666 = x7665 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7667 = Fp(x7663) + Fp(x7666);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7668 = x7657 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7669 = Fp(x7667) + Fp(x7668);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7670 = x6510 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7671 = x95 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7672 = x7670 * x7671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7673 = x95 - x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7674 = x6510 * x7673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7675 = x7674 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7676 = Fp(x7672) + Fp(x7675);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7677 = x95 - x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7678 = x7677 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7679 = x7678 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7680 = Fp(x7676) + Fp(x7679);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7681 = x7670 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7682 = Fp(x7680) + Fp(x7681);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7683 = x6511 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7684 = x95 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7685 = x7683 * x7684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7686 = x95 - x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7687 = x6511 * x7686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7688 = x7687 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7689 = Fp(x7685) + Fp(x7688);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7690 = x95 - x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7691 = x7690 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7692 = x7691 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7693 = Fp(x7689) + Fp(x7692);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7694 = x7683 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7695 = Fp(x7693) + Fp(x7694);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7696 = x6512 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7697 = x95 - x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7698 = x7696 * x7697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7699 = x95 - x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7700 = x6512 * x7699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7701 = x7700 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7702 = Fp(x7698) + Fp(x7701);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7703 = x95 - x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7704 = x7703 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7705 = x7704 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7706 = Fp(x7702) + Fp(x7705);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7707 = x7696 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7708 = Fp(x7706) + Fp(x7707);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7709 = x6513 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7710 = x95 - x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7711 = x7709 * x7710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7712 = x95 - x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7713 = x6513 * x7712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7714 = x7713 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7715 = Fp(x7711) + Fp(x7714);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7716 = x95 - x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7717 = x7716 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7718 = x7717 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7719 = Fp(x7715) + Fp(x7718);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7720 = x7709 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7721 = Fp(x7719) + Fp(x7720);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7722 = x6514 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7723 = x95 - x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7724 = x7722 * x7723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7725 = x95 - x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7726 = x6514 * x7725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7727 = x7726 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7728 = Fp(x7724) + Fp(x7727);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7729 = x95 - x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7730 = x7729 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7731 = x7730 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7732 = Fp(x7728) + Fp(x7731);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7733 = x7722 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7734 = Fp(x7732) + Fp(x7733);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7735 = x6515 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7736 = x95 - x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7737 = x7735 * x7736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7738 = x95 - x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7739 = x6515 * x7738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7740 = x7739 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7741 = Fp(x7737) + Fp(x7740);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7742 = x95 - x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7743 = x7742 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7744 = x7743 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7745 = Fp(x7741) + Fp(x7744);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7746 = x7735 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7747 = Fp(x7745) + Fp(x7746);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7748 = x6516 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7749 = x95 - x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7750 = x7748 * x7749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7751 = x95 - x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7752 = x6516 * x7751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7753 = x7752 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7754 = Fp(x7750) + Fp(x7753);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7755 = x95 - x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7756 = x7755 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7757 = x7756 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7758 = Fp(x7754) + Fp(x7757);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7759 = x7748 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7760 = Fp(x7758) + Fp(x7759);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7761 = x6517 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7762 = x95 - x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7763 = x7761 * x7762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7764 = x95 - x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7765 = x6517 * x7764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7766 = x7765 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7767 = Fp(x7763) + Fp(x7766);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7768 = x95 - x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7769 = x7768 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7770 = x7769 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7771 = Fp(x7767) + Fp(x7770);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7772 = x7761 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7773 = Fp(x7771) + Fp(x7772);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7774 = x6518 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7775 = x95 - x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7776 = x7774 * x7775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7777 = x95 - x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7778 = x6518 * x7777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7779 = x7778 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7780 = Fp(x7776) + Fp(x7779);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7781 = x95 - x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7782 = x7781 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7783 = x7782 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7784 = Fp(x7780) + Fp(x7783);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7785 = x7774 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7786 = Fp(x7784) + Fp(x7785);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7787 = x6519 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7788 = x95 - x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7789 = x7787 * x7788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7790 = x95 - x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7791 = x6519 * x7790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7792 = x7791 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7793 = Fp(x7789) + Fp(x7792);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7794 = x95 - x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7795 = x7794 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7796 = x7795 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7797 = Fp(x7793) + Fp(x7796);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7798 = x7787 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7799 = Fp(x7797) + Fp(x7798);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7800 = x6520 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7801 = x95 - x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7802 = x7800 * x7801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7803 = x95 - x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7804 = x6520 * x7803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7805 = x7804 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7806 = Fp(x7802) + Fp(x7805);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7807 = x95 - x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7808 = x7807 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7809 = x7808 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7810 = Fp(x7806) + Fp(x7809);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7811 = x7800 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7812 = Fp(x7810) + Fp(x7811);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7813 = x6521 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7814 = x95 - x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7815 = x7813 * x7814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7816 = x95 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7817 = x6521 * x7816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7818 = x7817 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7819 = Fp(x7815) + Fp(x7818);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7820 = x95 - x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7821 = x7820 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7822 = x7821 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7823 = Fp(x7819) + Fp(x7822);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7824 = x7813 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7825 = Fp(x7823) + Fp(x7824);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7826 = x6522 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7827 = x95 - x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7828 = x7826 * x7827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7829 = x95 - x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7830 = x6522 * x7829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7831 = x7830 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7832 = Fp(x7828) + Fp(x7831);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7833 = x95 - x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7834 = x7833 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7835 = x7834 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7836 = Fp(x7832) + Fp(x7835);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7837 = x7826 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7838 = Fp(x7836) + Fp(x7837);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7839 = x6523 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7840 = x95 - x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7841 = x7839 * x7840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7842 = x95 - x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7843 = x6523 * x7842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7844 = x7843 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7845 = Fp(x7841) + Fp(x7844);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7846 = x95 - x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7847 = x7846 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7848 = x7847 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7849 = Fp(x7845) + Fp(x7848);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7850 = x7839 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7851 = Fp(x7849) + Fp(x7850);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7852 = x6524 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7853 = x95 - x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7854 = x7852 * x7853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7855 = x95 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7856 = x6524 * x7855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7857 = x7856 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7858 = Fp(x7854) + Fp(x7857);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7859 = x95 - x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7860 = x7859 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7861 = x7860 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7862 = Fp(x7858) + Fp(x7861);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7863 = x7852 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7864 = Fp(x7862) + Fp(x7863);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7865 = x6525 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7866 = x95 - x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7867 = x7865 * x7866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7868 = x95 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7869 = x6525 * x7868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7870 = x7869 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7871 = Fp(x7867) + Fp(x7870);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7872 = x95 - x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7873 = x7872 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7874 = x7873 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7875 = Fp(x7871) + Fp(x7874);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7876 = x7865 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7877 = Fp(x7875) + Fp(x7876);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7878 = x6526 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7879 = x95 - x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7880 = x7878 * x7879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7881 = x95 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7882 = x6526 * x7881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7883 = x7882 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7884 = Fp(x7880) + Fp(x7883);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7885 = x95 - x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7886 = x7885 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7887 = x7886 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7888 = Fp(x7884) + Fp(x7887);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7889 = x7878 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7890 = Fp(x7888) + Fp(x7889);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7891 = x6527 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7892 = x95 - x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7893 = x7891 * x7892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7894 = x95 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7895 = x6527 * x7894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7896 = x7895 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7897 = Fp(x7893) + Fp(x7896);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7898 = x95 - x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7899 = x7898 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7900 = x7899 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7901 = Fp(x7897) + Fp(x7900);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7902 = x7891 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7903 = Fp(x7901) + Fp(x7902);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7904 = x6528 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7905 = x95 - x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7906 = x7904 * x7905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7907 = x95 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7908 = x6528 * x7907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7909 = x7908 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7910 = Fp(x7906) + Fp(x7909);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7911 = x95 - x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7912 = x7911 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7913 = x7912 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7914 = Fp(x7910) + Fp(x7913);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7915 = x7904 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7916 = Fp(x7914) + Fp(x7915);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7917 = x6529 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7918 = x95 - x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7919 = x7917 * x7918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7920 = x95 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7921 = x6529 * x7920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7922 = x7921 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7923 = Fp(x7919) + Fp(x7922);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7924 = x95 - x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7925 = x7924 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7926 = x7925 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7927 = Fp(x7923) + Fp(x7926);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7928 = x7917 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7929 = Fp(x7927) + Fp(x7928);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7930 = x6530 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7931 = x95 - x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7932 = x7930 * x7931;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7933 = x95 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7934 = x6530 * x7933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x7935 = x7934 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7936 = Fp(x7932) + Fp(x7935);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7937 = x95 - x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7938 = x7937 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x7939 = x7938 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7940 = Fp(x7936) + Fp(x7939);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x7941 = x7930 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x7942 = Fp(x7940) + Fp(x7941);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7943 = x7552 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7944 = Fp(x7539) + Fp(x7943);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7945 = x7565 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7946 = Fp(x7944) + Fp(x7945);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7947 = x7578 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7948 = Fp(x7946) + Fp(x7947);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7949 = x7591 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7950 = Fp(x7948) + Fp(x7949);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7951 = x7604 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7952 = Fp(x7950) + Fp(x7951);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7953 = x7617 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7954 = Fp(x7952) + Fp(x7953);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7955 = x7630 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7956 = Fp(x7954) + Fp(x7955);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7957 = x7643 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7958 = Fp(x7956) + Fp(x7957);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7959 = x7656 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7960 = Fp(x7958) + Fp(x7959);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7961 = x7669 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7962 = Fp(x7960) + Fp(x7961);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7963 = x7682 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7964 = Fp(x7962) + Fp(x7963);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7965 = x7695 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7966 = Fp(x7964) + Fp(x7965);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7967 = x7708 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7968 = Fp(x7966) + Fp(x7967);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7969 = x7721 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7970 = Fp(x7968) + Fp(x7969);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7971 = x7734 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7972 = Fp(x7970) + Fp(x7971);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7973 = x7760 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7974 = Fp(x7747) + Fp(x7973);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7975 = x7773 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7976 = Fp(x7974) + Fp(x7975);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7977 = x7786 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7978 = Fp(x7976) + Fp(x7977);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7979 = x7799 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7980 = Fp(x7978) + Fp(x7979);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7981 = x7812 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7982 = Fp(x7980) + Fp(x7981);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7983 = x7825 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7984 = Fp(x7982) + Fp(x7983);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7985 = x7838 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7986 = Fp(x7984) + Fp(x7985);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7987 = x7851 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7988 = Fp(x7986) + Fp(x7987);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7989 = x7864 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7990 = Fp(x7988) + Fp(x7989);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7991 = x7877 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7992 = Fp(x7990) + Fp(x7991);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7993 = x7890 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7994 = Fp(x7992) + Fp(x7993);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7995 = x7903 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7996 = Fp(x7994) + Fp(x7995);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7997 = x7916 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x7998 = Fp(x7996) + Fp(x7997);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x7999 = x7929 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8000 = Fp(x7998) + Fp(x7999);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8001 = x7942 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8002 = Fp(x8000) + Fp(x8001);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8003 = x6896 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8004 = Fp(x6893) + Fp(x8003);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8005 = x6899 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8006 = Fp(x8004) + Fp(x8005);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8007 = x6902 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8008 = Fp(x8006) + Fp(x8007);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8009 = x6905 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8010 = Fp(x8008) + Fp(x8009);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8011 = x6908 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8012 = Fp(x8010) + Fp(x8011);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8013 = x6911 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8014 = Fp(x8012) + Fp(x8013);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8015 = x6914 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8016 = Fp(x8014) + Fp(x8015);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8017 = x6917 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8018 = Fp(x8016) + Fp(x8017);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8019 = x6920 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8020 = Fp(x8018) + Fp(x8019);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8021 = x6923 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8022 = Fp(x8020) + Fp(x8021);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8023 = x6926 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8024 = Fp(x8022) + Fp(x8023);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8025 = x6929 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8026 = Fp(x8024) + Fp(x8025);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8027 = x6932 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8028 = Fp(x8026) + Fp(x8027);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8029 = x6935 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8030 = Fp(x8028) + Fp(x8029);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8031 = x6938 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8032 = Fp(x8030) + Fp(x8031);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8033 = x6944 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8034 = Fp(x6941) + Fp(x8033);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8035 = x6947 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8036 = Fp(x8034) + Fp(x8035);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8037 = x6950 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8038 = Fp(x8036) + Fp(x8037);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8039 = x6953 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8040 = Fp(x8038) + Fp(x8039);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8041 = x6956 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8042 = Fp(x8040) + Fp(x8041);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8043 = x6959 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8044 = Fp(x8042) + Fp(x8043);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8045 = x6962 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8046 = Fp(x8044) + Fp(x8045);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8047 = x6965 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8048 = Fp(x8046) + Fp(x8047);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8049 = x6968 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8050 = Fp(x8048) + Fp(x8049);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8051 = x6971 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8052 = Fp(x8050) + Fp(x8051);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8053 = x6974 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8054 = Fp(x8052) + Fp(x8053);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8055 = x6977 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8056 = Fp(x8054) + Fp(x8055);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8057 = x6980 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8058 = Fp(x8056) + Fp(x8057);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8059 = x6983 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8060 = Fp(x8058) + Fp(x8059);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8061 = x6986 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8062 = Fp(x8060) + Fp(x8061);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x8063 = Fp(x7972) + Fp(x8032);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x8064 = Fp(x8002) + Fp(x8062);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x8065 = Fp(x7525) + Fp(x8063);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x8066 = Fp(x7526) + Fp(x8064);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8067 = x6596 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8068 = Fp(x6595) + Fp(x8067);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8069 = x6597 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8070 = Fp(x8068) + Fp(x8069);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8071 = x6598 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8072 = Fp(x8070) + Fp(x8071);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8073 = x6599 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8074 = Fp(x8072) + Fp(x8073);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8075 = x6600 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8076 = Fp(x8074) + Fp(x8075);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8077 = x6601 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8078 = Fp(x8076) + Fp(x8077);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8079 = x6602 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8080 = Fp(x8078) + Fp(x8079);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8081 = x6603 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8082 = Fp(x8080) + Fp(x8081);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8083 = x6604 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8084 = Fp(x8082) + Fp(x8083);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8085 = x6605 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8086 = Fp(x8084) + Fp(x8085);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8087 = x6606 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8088 = Fp(x8086) + Fp(x8087);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8089 = x6607 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8090 = Fp(x8088) + Fp(x8089);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8091 = x6608 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8092 = Fp(x8090) + Fp(x8091);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8093 = x6609 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8094 = Fp(x8092) + Fp(x8093);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8095 = x6610 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8096 = Fp(x8094) + Fp(x8095);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8097 = x6612 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8098 = Fp(x6611) + Fp(x8097);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8099 = x6613 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8100 = Fp(x8098) + Fp(x8099);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8101 = x6614 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8102 = Fp(x8100) + Fp(x8101);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8103 = x6615 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8104 = Fp(x8102) + Fp(x8103);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8105 = x6616 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8106 = Fp(x8104) + Fp(x8105);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8107 = x6617 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8108 = Fp(x8106) + Fp(x8107);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8109 = x6618 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8110 = Fp(x8108) + Fp(x8109);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8111 = x6619 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8112 = Fp(x8110) + Fp(x8111);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8113 = x6620 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8114 = Fp(x8112) + Fp(x8113);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8115 = x6621 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8116 = Fp(x8114) + Fp(x8115);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8117 = x6622 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8118 = Fp(x8116) + Fp(x8117);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8119 = x6623 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8120 = Fp(x8118) + Fp(x8119);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8121 = x6624 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8122 = Fp(x8120) + Fp(x8121);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8123 = x6625 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8124 = Fp(x8122) + Fp(x8123);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x8125 = x6626 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x8126 = Fp(x8124) + Fp(x8125);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x8127 = Fp(x7525) + Fp(x8096);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x8128 = Fp(x7526) + Fp(x8126);
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      args[2][144 * steps + cycle] = x8065;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      args[2][146 * steps + cycle] = x8127;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      args[2][145 * steps + cycle] = x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      args[2][147 * steps + cycle] = x8128;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
      Fp x8129(args[2][144 * steps + ((cycle - 0) & mask)]);
      assert(x8129 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
      Fp x8130(args[2][145 * steps + ((cycle - 0) & mask)]);
      assert(x8130 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8131 = Fp(x8129.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][150 * steps + cycle] = x8131;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8132 = Fp(x8129.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8133 = x8132 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][151 * steps + cycle] = x8133;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8134 = Fp(x8129.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8135 = x8134 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][152 * steps + cycle] = x8135;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8136 = Fp(x8129.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8137 = x8136 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][153 * steps + cycle] = x8137;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8138 = Fp(x8129.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8139 = x8138 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][154 * steps + cycle] = x8139;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8140 = Fp(x8129.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8141 = x8140 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][155 * steps + cycle] = x8141;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8142 = Fp(x8129.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8143 = x8142 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][156 * steps + cycle] = x8143;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8144 = Fp(x8129.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8145 = x8144 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][157 * steps + cycle] = x8145;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8146 = Fp(x8129.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8147 = x8146 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][158 * steps + cycle] = x8147;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8148 = Fp(x8129.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8149 = x8148 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][159 * steps + cycle] = x8149;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8150 = Fp(x8129.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8151 = x8150 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][160 * steps + cycle] = x8151;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8152 = Fp(x8129.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8153 = x8152 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][161 * steps + cycle] = x8153;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8154 = Fp(x8129.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8155 = x8154 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][162 * steps + cycle] = x8155;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8156 = Fp(x8129.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8157 = x8156 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][163 * steps + cycle] = x8157;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8158 = Fp(x8129.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8159 = x8158 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][164 * steps + cycle] = x8159;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8160 = Fp(x8129.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8161 = x8160 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][165 * steps + cycle] = x8161;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8162(args[2][150 * steps + ((cycle - 0) & mask)]);
      assert(x8162 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8163(args[2][151 * steps + ((cycle - 0) & mask)]);
      assert(x8163 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8164 = x8163 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8165 = Fp(x8162) + Fp(x8164);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8166(args[2][152 * steps + ((cycle - 0) & mask)]);
      assert(x8166 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8167 = x8166 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8168 = Fp(x8165) + Fp(x8167);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8169(args[2][153 * steps + ((cycle - 0) & mask)]);
      assert(x8169 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8170 = x8169 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8171 = Fp(x8168) + Fp(x8170);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8172(args[2][154 * steps + ((cycle - 0) & mask)]);
      assert(x8172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8173 = x8172 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8174 = Fp(x8171) + Fp(x8173);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8175(args[2][155 * steps + ((cycle - 0) & mask)]);
      assert(x8175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8176 = x8175 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8177 = Fp(x8174) + Fp(x8176);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8178(args[2][156 * steps + ((cycle - 0) & mask)]);
      assert(x8178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8179 = x8178 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8180 = Fp(x8177) + Fp(x8179);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8181(args[2][157 * steps + ((cycle - 0) & mask)]);
      assert(x8181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8182 = x8181 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8183 = Fp(x8180) + Fp(x8182);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8184(args[2][158 * steps + ((cycle - 0) & mask)]);
      assert(x8184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8185 = x8184 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8186 = Fp(x8183) + Fp(x8185);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8187(args[2][159 * steps + ((cycle - 0) & mask)]);
      assert(x8187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8188 = x8187 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8189 = Fp(x8186) + Fp(x8188);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8190(args[2][160 * steps + ((cycle - 0) & mask)]);
      assert(x8190 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8191 = x8190 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8192 = Fp(x8189) + Fp(x8191);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8193(args[2][161 * steps + ((cycle - 0) & mask)]);
      assert(x8193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8194 = x8193 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8195 = Fp(x8192) + Fp(x8194);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8196(args[2][162 * steps + ((cycle - 0) & mask)]);
      assert(x8196 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8197 = x8196 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8198 = Fp(x8195) + Fp(x8197);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8199(args[2][163 * steps + ((cycle - 0) & mask)]);
      assert(x8199 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8200 = x8199 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8201 = Fp(x8198) + Fp(x8200);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8202(args[2][164 * steps + ((cycle - 0) & mask)]);
      assert(x8202 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8203 = x8202 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8204 = Fp(x8201) + Fp(x8203);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8205(args[2][165 * steps + ((cycle - 0) & mask)]);
      assert(x8205 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8206 = x8205 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8207 = Fp(x8204) + Fp(x8206);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8208 = x8129 - x8207;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x8209 = x8208 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8210 = Fp(x8209.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][76 * steps + cycle] = x8210;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8211(args[2][76 * steps + ((cycle - 0) & mask)]);
      assert(x8211 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8212 = x8209 - x8211;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      Fp x8213 = x8212 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8214 = x95 - x8213;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      Fp x8215 = x8213 * x8214;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8215 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      Fp x8216 = Fp(x8130) + Fp(x8209);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8217 = Fp(x8216.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][166 * steps + cycle] = x8217;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8218 = Fp(x8216.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8219 = x8218 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][167 * steps + cycle] = x8219;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8220 = Fp(x8216.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8221 = x8220 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][168 * steps + cycle] = x8221;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8222 = Fp(x8216.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8223 = x8222 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][169 * steps + cycle] = x8223;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8224 = Fp(x8216.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8225 = x8224 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][170 * steps + cycle] = x8225;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8226 = Fp(x8216.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8227 = x8226 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][171 * steps + cycle] = x8227;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8228 = Fp(x8216.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8229 = x8228 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][172 * steps + cycle] = x8229;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8230 = Fp(x8216.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8231 = x8230 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][173 * steps + cycle] = x8231;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8232 = Fp(x8216.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8233 = x8232 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][174 * steps + cycle] = x8233;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8234 = Fp(x8216.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8235 = x8234 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][175 * steps + cycle] = x8235;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8236 = Fp(x8216.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8237 = x8236 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][176 * steps + cycle] = x8237;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8238 = Fp(x8216.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8239 = x8238 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][177 * steps + cycle] = x8239;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8240 = Fp(x8216.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8241 = x8240 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][178 * steps + cycle] = x8241;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8242 = Fp(x8216.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8243 = x8242 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][179 * steps + cycle] = x8243;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8244 = Fp(x8216.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8245 = x8244 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][180 * steps + cycle] = x8245;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8246 = Fp(x8216.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8247 = x8246 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][181 * steps + cycle] = x8247;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8248(args[2][166 * steps + ((cycle - 0) & mask)]);
      assert(x8248 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8249(args[2][167 * steps + ((cycle - 0) & mask)]);
      assert(x8249 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8250 = x8249 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8251 = Fp(x8248) + Fp(x8250);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8252(args[2][168 * steps + ((cycle - 0) & mask)]);
      assert(x8252 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8253 = x8252 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8254 = Fp(x8251) + Fp(x8253);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8255(args[2][169 * steps + ((cycle - 0) & mask)]);
      assert(x8255 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8256 = x8255 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8257 = Fp(x8254) + Fp(x8256);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8258(args[2][170 * steps + ((cycle - 0) & mask)]);
      assert(x8258 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8259 = x8258 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8260 = Fp(x8257) + Fp(x8259);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8261(args[2][171 * steps + ((cycle - 0) & mask)]);
      assert(x8261 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8262 = x8261 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8263 = Fp(x8260) + Fp(x8262);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8264(args[2][172 * steps + ((cycle - 0) & mask)]);
      assert(x8264 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8265 = x8264 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8266 = Fp(x8263) + Fp(x8265);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8267(args[2][173 * steps + ((cycle - 0) & mask)]);
      assert(x8267 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8268 = x8267 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8269 = Fp(x8266) + Fp(x8268);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8270(args[2][174 * steps + ((cycle - 0) & mask)]);
      assert(x8270 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8271 = x8270 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8272 = Fp(x8269) + Fp(x8271);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8273(args[2][175 * steps + ((cycle - 0) & mask)]);
      assert(x8273 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8274 = x8273 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8275 = Fp(x8272) + Fp(x8274);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8276(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x8276 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8277 = x8276 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8278 = Fp(x8275) + Fp(x8277);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8279(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x8279 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8280 = x8279 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8281 = Fp(x8278) + Fp(x8280);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8282(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x8282 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8283 = x8282 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8284 = Fp(x8281) + Fp(x8283);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8285(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x8285 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8286 = x8285 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8287 = Fp(x8284) + Fp(x8286);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8288(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x8288 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8289 = x8288 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8290 = Fp(x8287) + Fp(x8289);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8291(args[2][181 * steps + ((cycle - 0) & mask)]);
      assert(x8291 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8292 = x8291 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8293 = Fp(x8290) + Fp(x8292);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8294 = x8216 - x8293;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x8295 = x8294 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8296 = Fp(x8295.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][77 * steps + cycle] = x8296;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8297(args[2][77 * steps + ((cycle - 0) & mask)]);
      assert(x8297 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8298 = x8295 - x8297;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      Fp x8299 = x8298 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8300 = x95 - x8299;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      Fp x8301 = x8299 * x8300;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8301 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
      Fp x8302(args[2][146 * steps + ((cycle - 0) & mask)]);
      assert(x8302 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
      Fp x8303(args[2][147 * steps + ((cycle - 0) & mask)]);
      assert(x8303 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8304 = Fp(x8302.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][182 * steps + cycle] = x8304;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8305 = Fp(x8302.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8306 = x8305 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][183 * steps + cycle] = x8306;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8307 = Fp(x8302.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8308 = x8307 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][184 * steps + cycle] = x8308;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8309 = Fp(x8302.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8310 = x8309 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][185 * steps + cycle] = x8310;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8311 = Fp(x8302.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8312 = x8311 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][186 * steps + cycle] = x8312;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8313 = Fp(x8302.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8314 = x8313 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][187 * steps + cycle] = x8314;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8315 = Fp(x8302.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8316 = x8315 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][188 * steps + cycle] = x8316;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8317 = Fp(x8302.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8318 = x8317 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][189 * steps + cycle] = x8318;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8319 = Fp(x8302.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8320 = x8319 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][190 * steps + cycle] = x8320;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8321 = Fp(x8302.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8322 = x8321 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][191 * steps + cycle] = x8322;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8323 = Fp(x8302.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8324 = x8323 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][192 * steps + cycle] = x8324;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8325 = Fp(x8302.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8326 = x8325 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][193 * steps + cycle] = x8326;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8327 = Fp(x8302.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8328 = x8327 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][194 * steps + cycle] = x8328;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8329 = Fp(x8302.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8330 = x8329 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][195 * steps + cycle] = x8330;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8331 = Fp(x8302.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8332 = x8331 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][196 * steps + cycle] = x8332;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8333 = Fp(x8302.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8334 = x8333 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][197 * steps + cycle] = x8334;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8335(args[2][182 * steps + ((cycle - 0) & mask)]);
      assert(x8335 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8336(args[2][183 * steps + ((cycle - 0) & mask)]);
      assert(x8336 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8337 = x8336 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8338 = Fp(x8335) + Fp(x8337);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8339(args[2][184 * steps + ((cycle - 0) & mask)]);
      assert(x8339 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8340 = x8339 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8341 = Fp(x8338) + Fp(x8340);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8342(args[2][185 * steps + ((cycle - 0) & mask)]);
      assert(x8342 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8343 = x8342 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8344 = Fp(x8341) + Fp(x8343);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8345(args[2][186 * steps + ((cycle - 0) & mask)]);
      assert(x8345 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8346 = x8345 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8347 = Fp(x8344) + Fp(x8346);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8348(args[2][187 * steps + ((cycle - 0) & mask)]);
      assert(x8348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8349 = x8348 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8350 = Fp(x8347) + Fp(x8349);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8351(args[2][188 * steps + ((cycle - 0) & mask)]);
      assert(x8351 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8352 = x8351 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8353 = Fp(x8350) + Fp(x8352);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8354(args[2][189 * steps + ((cycle - 0) & mask)]);
      assert(x8354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8355 = x8354 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8356 = Fp(x8353) + Fp(x8355);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8357(args[2][190 * steps + ((cycle - 0) & mask)]);
      assert(x8357 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8358 = x8357 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8359 = Fp(x8356) + Fp(x8358);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8360(args[2][191 * steps + ((cycle - 0) & mask)]);
      assert(x8360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8361 = x8360 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8362 = Fp(x8359) + Fp(x8361);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8363(args[2][192 * steps + ((cycle - 0) & mask)]);
      assert(x8363 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8364 = x8363 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8365 = Fp(x8362) + Fp(x8364);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8366(args[2][193 * steps + ((cycle - 0) & mask)]);
      assert(x8366 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8367 = x8366 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8368 = Fp(x8365) + Fp(x8367);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8369(args[2][194 * steps + ((cycle - 0) & mask)]);
      assert(x8369 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8370 = x8369 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8371 = Fp(x8368) + Fp(x8370);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8372(args[2][195 * steps + ((cycle - 0) & mask)]);
      assert(x8372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8373 = x8372 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8374 = Fp(x8371) + Fp(x8373);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8375(args[2][196 * steps + ((cycle - 0) & mask)]);
      assert(x8375 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8376 = x8375 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8377 = Fp(x8374) + Fp(x8376);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8378(args[2][197 * steps + ((cycle - 0) & mask)]);
      assert(x8378 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8379 = x8378 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8380 = Fp(x8377) + Fp(x8379);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8381 = x8302 - x8380;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x8382 = x8381 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8383 = Fp(x8382.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][78 * steps + cycle] = x8383;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8384(args[2][78 * steps + ((cycle - 0) & mask)]);
      assert(x8384 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8385 = x8382 - x8384;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      Fp x8386 = x8385 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8387 = x95 - x8386;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      Fp x8388 = x8386 * x8387;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8388 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      Fp x8389 = Fp(x8303) + Fp(x8382);
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8390 = Fp(x8389.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][198 * steps + cycle] = x8390;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8391 = Fp(x8389.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8392 = x8391 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][199 * steps + cycle] = x8392;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8393 = Fp(x8389.asUInt32() & x78.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8394 = x8393 * x76;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][200 * steps + cycle] = x8394;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8395 = Fp(x8389.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8396 = x8395 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][201 * steps + cycle] = x8396;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8397 = Fp(x8389.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8398 = x8397 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][202 * steps + cycle] = x8398;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8399 = Fp(x8389.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8400 = x8399 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][203 * steps + cycle] = x8400;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8401 = Fp(x8389.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8402 = x8401 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][204 * steps + cycle] = x8402;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8403 = Fp(x8389.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8404 = x8403 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][205 * steps + cycle] = x8404;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8405 = Fp(x8389.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8406 = x8405 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][206 * steps + cycle] = x8406;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8407 = Fp(x8389.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8408 = x8407 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][207 * steps + cycle] = x8408;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8409 = Fp(x8389.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8410 = x8409 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][208 * steps + cycle] = x8410;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8411 = Fp(x8389.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8412 = x8411 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][209 * steps + cycle] = x8412;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8413 = Fp(x8389.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8414 = x8413 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][210 * steps + cycle] = x8414;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8415 = Fp(x8389.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8416 = x8415 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][211 * steps + cycle] = x8416;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8417 = Fp(x8389.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8418 = x8417 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][212 * steps + cycle] = x8418;
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8419 = Fp(x8389.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        Fp x8420 = x8419 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][213 * steps + cycle] = x8420;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8421(args[2][198 * steps + ((cycle - 0) & mask)]);
      assert(x8421 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8422(args[2][199 * steps + ((cycle - 0) & mask)]);
      assert(x8422 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8423 = x8422 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8424 = Fp(x8421) + Fp(x8423);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8425(args[2][200 * steps + ((cycle - 0) & mask)]);
      assert(x8425 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8426 = x8425 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8427 = Fp(x8424) + Fp(x8426);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8428(args[2][201 * steps + ((cycle - 0) & mask)]);
      assert(x8428 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8429 = x8428 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8430 = Fp(x8427) + Fp(x8429);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8431(args[2][202 * steps + ((cycle - 0) & mask)]);
      assert(x8431 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8432 = x8431 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8433 = Fp(x8430) + Fp(x8432);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8434(args[2][203 * steps + ((cycle - 0) & mask)]);
      assert(x8434 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8435 = x8434 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8436 = Fp(x8433) + Fp(x8435);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8437(args[2][204 * steps + ((cycle - 0) & mask)]);
      assert(x8437 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8438 = x8437 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8439 = Fp(x8436) + Fp(x8438);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8440(args[2][205 * steps + ((cycle - 0) & mask)]);
      assert(x8440 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8441 = x8440 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8442 = Fp(x8439) + Fp(x8441);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8443(args[2][206 * steps + ((cycle - 0) & mask)]);
      assert(x8443 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8444 = x8443 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8445 = Fp(x8442) + Fp(x8444);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8446(args[2][207 * steps + ((cycle - 0) & mask)]);
      assert(x8446 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8447 = x8446 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8448 = Fp(x8445) + Fp(x8447);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8449(args[2][208 * steps + ((cycle - 0) & mask)]);
      assert(x8449 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8450 = x8449 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8451 = Fp(x8448) + Fp(x8450);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8452(args[2][209 * steps + ((cycle - 0) & mask)]);
      assert(x8452 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8453 = x8452 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8454 = Fp(x8451) + Fp(x8453);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8455(args[2][210 * steps + ((cycle - 0) & mask)]);
      assert(x8455 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8456 = x8455 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8457 = Fp(x8454) + Fp(x8456);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8458(args[2][211 * steps + ((cycle - 0) & mask)]);
      assert(x8458 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8459 = x8458 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8460 = Fp(x8457) + Fp(x8459);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8461(args[2][212 * steps + ((cycle - 0) & mask)]);
      assert(x8461 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8462 = x8461 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8463 = Fp(x8460) + Fp(x8462);
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8464(args[2][213 * steps + ((cycle - 0) & mask)]);
      assert(x8464 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      Fp x8465 = x8464 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      Fp x8466 = Fp(x8463) + Fp(x8465);
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8467 = x8389 - x8466;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      Fp x8468 = x8467 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8469 = Fp(x8468.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][79 * steps + cycle] = x8469;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8470(args[2][79 * steps + ((cycle - 0) & mask)]);
      assert(x8470 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8471 = x8468 - x8470;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      Fp x8472 = x8471 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8473 = x95 - x8472;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      Fp x8474 = x8472 * x8473;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8474 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/components/mux.h":37:25))
    Fp x8475(args[2][105 * steps + ((cycle - 0) & mask)]);
    assert(x8475 != Fp::invalid());
    if (x8475 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8476(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x8476 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8477(args[2][136 * steps + ((cycle - 1) & mask)]);
      assert(x8477 != Fp::invalid());
      if (x8477 != 0) {
        // loc("Top/Mux/4/OneHot/Reg10"("cirgen/circuit/rv32im/sha.cpp":339:72))
        Fp x8478(args[2][104 * steps + ((cycle - 1) & mask)]);
        assert(x8478 != Fp::invalid());
        if (x8478 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/sha.cpp":342:7)
          args[2][135 * steps + cycle] = x6;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":343:40))
          Fp x8479(args[2][138 * steps + ((cycle - 1) & mask)]);
          assert(x8479 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":343:7)
          args[2][138 * steps + cycle] = x8479;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":345:22)
        auto x8480 = x95 - x8478;
        if (x8480 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          args[2][141 * steps + cycle] = x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":347:7)
          args[2][135 * steps + cycle] = x77;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":348:44))
          Fp x8481(args[2][138 * steps + ((cycle - 1) & mask)]);
          assert(x8481 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":348:44)
          auto x8482 = x8481 - x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":348:7)
          args[2][138 * steps + cycle] = x8482;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":351:18)
      auto x8483 = x95 - x8477;
      if (x8483 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x8484(args[2][141 * steps + ((cycle - 1) & mask)]);
        assert(x8484 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        args[2][141 * steps + cycle] = x8484;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":354:40))
        Fp x8485(args[2][135 * steps + ((cycle - 1) & mask)]);
        assert(x8485 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":354:40)
        auto x8486 = x8485 - x95;
        // loc("cirgen/circuit/rv32im/sha.cpp":354:5)
        args[2][135 * steps + cycle] = x8486;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":355:38))
        Fp x8487(args[2][138 * steps + ((cycle - 1) & mask)]);
        assert(x8487 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":355:5)
        args[2][138 * steps + cycle] = x8487;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8488(args[2][135 * steps + ((cycle - 0) & mask)]);
      assert(x8488 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8489 = (x8488 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][136 * steps + cycle] = x8489;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8490 = inv(x8488);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][137 * steps + cycle] = x8490;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8491(args[2][136 * steps + ((cycle - 0) & mask)]);
      assert(x8491 != Fp::invalid());
      if (x8491 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8488 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8492 = x95 - x8491;
      if (x8492 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x8493(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x8493 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x8494 = x8488 * x8493;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8495 = x8494 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8495 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8496(args[2][141 * steps + ((cycle - 0) & mask)]);
      assert(x8496 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":359:15)
      auto x8497 = x95 - x8496;
      if (x8491 != 0) {
        if (x8497 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          args[2][142 * steps + cycle] = x94;
        }
        if (x8496 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          args[2][142 * steps + cycle] = x95;
        }
      }
      if (x8492 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        args[2][142 * steps + cycle] = x94;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":369:38))
      Fp x8498(args[2][132 * steps + ((cycle - 1) & mask)]);
      assert(x8498 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":369:3)
      args[2][132 * steps + cycle] = x8498;
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":370:40))
      Fp x8499(args[2][131 * steps + ((cycle - 1) & mask)]);
      assert(x8499 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":370:3)
      args[2][131 * steps + cycle] = x8499;
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8500(args[2][143 * steps + ((cycle - 1) & mask)]);
      assert(x8500 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      args[2][143 * steps + cycle] = x8500;
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8501(args[2][138 * steps + ((cycle - 0) & mask)]);
      assert(x8501 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8502 = (x8501 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][139 * steps + cycle] = x8502;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8503 = inv(x8501);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][140 * steps + cycle] = x8503;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8504(args[2][139 * steps + ((cycle - 0) & mask)]);
      assert(x8504 != Fp::invalid());
      if (x8504 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8501 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8505 = x95 - x8504;
      if (x8505 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x8506(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x8506 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x8507 = x8501 * x8506;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8508 = x8507 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8508 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x8509 = Fp(x596) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8510 = Fp(x8509.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x8510;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x8511(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x8511 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8512 = x8509 - x8511;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x8513 = x8512 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8514 = Fp(x8513.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x8514;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x8515(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x8515 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8516 = x8513 - x8515;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x8517 = x8516 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8518 = Fp(x8517.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x8518;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x8519(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x8519 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8520 = x8517 - x8519;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x8521 = x8520 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8522 = Fp(x8521.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x8522;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8523(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x8523 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8524 = x8521 - x8523;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x8525 = x8524 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x8525;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8526(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x8526 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8527 = x95 - x8526;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x8528 = x8526 * x8527;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x8528;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x8529(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x8529 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8530 = x92 - x8526;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x8531 = x8529 * x8530;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8531 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x67;
      host_args.at(1) = x8496;
      host_args.at(2) = x8488;
      host_args.at(3) = x8501;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8497 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
        auto x8532 = x5 - x8488;
        {
          host_args.at(0) = x8532;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x8533(host_outs.at(0));
          Fp x8534(host_outs.at(1));
          Fp x8535(host_outs.at(2));
          Fp x8536(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][118 * steps + cycle] = x8533;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][119 * steps + cycle] = x8534;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][120 * steps + cycle] = x8535;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][121 * steps + cycle] = x8536;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x8537(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x8537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x8538(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x8538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x8539(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x8539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x8540(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x8540 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][115 * steps + cycle] = x8532;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][116 * steps + cycle] = x8476;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][117 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][118 * steps + cycle] = x8537;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][119 * steps + cycle] = x8538;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][120 * steps + cycle] = x8539;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][121 * steps + cycle] = x8540;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8541(args[2][82 * steps + ((cycle - 2) & mask)]);
      assert(x8541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8542(args[2][83 * steps + ((cycle - 2) & mask)]);
      assert(x8542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8543(args[2][84 * steps + ((cycle - 2) & mask)]);
      assert(x8543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8544(args[2][85 * steps + ((cycle - 2) & mask)]);
      assert(x8544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8545(args[2][86 * steps + ((cycle - 2) & mask)]);
      assert(x8545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8546(args[2][87 * steps + ((cycle - 2) & mask)]);
      assert(x8546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8547(args[2][88 * steps + ((cycle - 2) & mask)]);
      assert(x8547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8548(args[2][89 * steps + ((cycle - 2) & mask)]);
      assert(x8548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8549(args[2][90 * steps + ((cycle - 2) & mask)]);
      assert(x8549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8550(args[2][91 * steps + ((cycle - 2) & mask)]);
      assert(x8550 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8551(args[2][19 * steps + ((cycle - 2) & mask)]);
      assert(x8551 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8552(args[2][20 * steps + ((cycle - 2) & mask)]);
      assert(x8552 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8553(args[2][21 * steps + ((cycle - 2) & mask)]);
      assert(x8553 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8554(args[2][22 * steps + ((cycle - 2) & mask)]);
      assert(x8554 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8555(args[2][23 * steps + ((cycle - 2) & mask)]);
      assert(x8555 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8556(args[2][24 * steps + ((cycle - 2) & mask)]);
      assert(x8556 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8557(args[2][25 * steps + ((cycle - 2) & mask)]);
      assert(x8557 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8558(args[2][26 * steps + ((cycle - 2) & mask)]);
      assert(x8558 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8559(args[2][27 * steps + ((cycle - 2) & mask)]);
      assert(x8559 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8560(args[2][28 * steps + ((cycle - 2) & mask)]);
      assert(x8560 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8561(args[2][29 * steps + ((cycle - 2) & mask)]);
      assert(x8561 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8562(args[2][30 * steps + ((cycle - 2) & mask)]);
      assert(x8562 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8563(args[2][31 * steps + ((cycle - 2) & mask)]);
      assert(x8563 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8564(args[2][32 * steps + ((cycle - 2) & mask)]);
      assert(x8564 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8565(args[2][33 * steps + ((cycle - 2) & mask)]);
      assert(x8565 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8566(args[2][34 * steps + ((cycle - 2) & mask)]);
      assert(x8566 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8567(args[2][35 * steps + ((cycle - 2) & mask)]);
      assert(x8567 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8568(args[2][36 * steps + ((cycle - 2) & mask)]);
      assert(x8568 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8569(args[2][37 * steps + ((cycle - 2) & mask)]);
      assert(x8569 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8570(args[2][38 * steps + ((cycle - 2) & mask)]);
      assert(x8570 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8571(args[2][39 * steps + ((cycle - 2) & mask)]);
      assert(x8571 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8572(args[2][40 * steps + ((cycle - 2) & mask)]);
      assert(x8572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8573(args[2][82 * steps + ((cycle - 7) & mask)]);
      assert(x8573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8574(args[2][83 * steps + ((cycle - 7) & mask)]);
      assert(x8574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8575(args[2][84 * steps + ((cycle - 7) & mask)]);
      assert(x8575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8576(args[2][85 * steps + ((cycle - 7) & mask)]);
      assert(x8576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8577(args[2][86 * steps + ((cycle - 7) & mask)]);
      assert(x8577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8578(args[2][87 * steps + ((cycle - 7) & mask)]);
      assert(x8578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8579(args[2][88 * steps + ((cycle - 7) & mask)]);
      assert(x8579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8580(args[2][89 * steps + ((cycle - 7) & mask)]);
      assert(x8580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8581(args[2][90 * steps + ((cycle - 7) & mask)]);
      assert(x8581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8582(args[2][91 * steps + ((cycle - 7) & mask)]);
      assert(x8582 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8583(args[2][19 * steps + ((cycle - 7) & mask)]);
      assert(x8583 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8584(args[2][20 * steps + ((cycle - 7) & mask)]);
      assert(x8584 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8585(args[2][21 * steps + ((cycle - 7) & mask)]);
      assert(x8585 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8586(args[2][22 * steps + ((cycle - 7) & mask)]);
      assert(x8586 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8587(args[2][23 * steps + ((cycle - 7) & mask)]);
      assert(x8587 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8588(args[2][24 * steps + ((cycle - 7) & mask)]);
      assert(x8588 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8589(args[2][25 * steps + ((cycle - 7) & mask)]);
      assert(x8589 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8590(args[2][26 * steps + ((cycle - 7) & mask)]);
      assert(x8590 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8591(args[2][27 * steps + ((cycle - 7) & mask)]);
      assert(x8591 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8592(args[2][28 * steps + ((cycle - 7) & mask)]);
      assert(x8592 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8593(args[2][29 * steps + ((cycle - 7) & mask)]);
      assert(x8593 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8594(args[2][30 * steps + ((cycle - 7) & mask)]);
      assert(x8594 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8595(args[2][31 * steps + ((cycle - 7) & mask)]);
      assert(x8595 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8596(args[2][32 * steps + ((cycle - 7) & mask)]);
      assert(x8596 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8597(args[2][33 * steps + ((cycle - 7) & mask)]);
      assert(x8597 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8598(args[2][34 * steps + ((cycle - 7) & mask)]);
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8599(args[2][35 * steps + ((cycle - 7) & mask)]);
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8600(args[2][36 * steps + ((cycle - 7) & mask)]);
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8601(args[2][37 * steps + ((cycle - 7) & mask)]);
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8602(args[2][38 * steps + ((cycle - 7) & mask)]);
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8603(args[2][39 * steps + ((cycle - 7) & mask)]);
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8604(args[2][40 * steps + ((cycle - 7) & mask)]);
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8605(args[2][82 * steps + ((cycle - 15) & mask)]);
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8606(args[2][83 * steps + ((cycle - 15) & mask)]);
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8607(args[2][84 * steps + ((cycle - 15) & mask)]);
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8608(args[2][85 * steps + ((cycle - 15) & mask)]);
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8609(args[2][86 * steps + ((cycle - 15) & mask)]);
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8610(args[2][87 * steps + ((cycle - 15) & mask)]);
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8611(args[2][88 * steps + ((cycle - 15) & mask)]);
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8612(args[2][89 * steps + ((cycle - 15) & mask)]);
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8613(args[2][90 * steps + ((cycle - 15) & mask)]);
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8614(args[2][91 * steps + ((cycle - 15) & mask)]);
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8615(args[2][19 * steps + ((cycle - 15) & mask)]);
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8616(args[2][20 * steps + ((cycle - 15) & mask)]);
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8617(args[2][21 * steps + ((cycle - 15) & mask)]);
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8618(args[2][22 * steps + ((cycle - 15) & mask)]);
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8619(args[2][23 * steps + ((cycle - 15) & mask)]);
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8620(args[2][24 * steps + ((cycle - 15) & mask)]);
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8621(args[2][25 * steps + ((cycle - 15) & mask)]);
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8622(args[2][26 * steps + ((cycle - 15) & mask)]);
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8623(args[2][27 * steps + ((cycle - 15) & mask)]);
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8624(args[2][28 * steps + ((cycle - 15) & mask)]);
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8625(args[2][29 * steps + ((cycle - 15) & mask)]);
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8626(args[2][30 * steps + ((cycle - 15) & mask)]);
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8627(args[2][31 * steps + ((cycle - 15) & mask)]);
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8628(args[2][32 * steps + ((cycle - 15) & mask)]);
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8629(args[2][33 * steps + ((cycle - 15) & mask)]);
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8630(args[2][34 * steps + ((cycle - 15) & mask)]);
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8631(args[2][35 * steps + ((cycle - 15) & mask)]);
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8632(args[2][36 * steps + ((cycle - 15) & mask)]);
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8633(args[2][37 * steps + ((cycle - 15) & mask)]);
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8634(args[2][38 * steps + ((cycle - 15) & mask)]);
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8635(args[2][39 * steps + ((cycle - 15) & mask)]);
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8636(args[2][40 * steps + ((cycle - 15) & mask)]);
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8637(args[2][82 * steps + ((cycle - 16) & mask)]);
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8638(args[2][83 * steps + ((cycle - 16) & mask)]);
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8639(args[2][84 * steps + ((cycle - 16) & mask)]);
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8640(args[2][85 * steps + ((cycle - 16) & mask)]);
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8641(args[2][86 * steps + ((cycle - 16) & mask)]);
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8642(args[2][87 * steps + ((cycle - 16) & mask)]);
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8643(args[2][88 * steps + ((cycle - 16) & mask)]);
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8644(args[2][89 * steps + ((cycle - 16) & mask)]);
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8645(args[2][90 * steps + ((cycle - 16) & mask)]);
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8646(args[2][91 * steps + ((cycle - 16) & mask)]);
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8647(args[2][19 * steps + ((cycle - 16) & mask)]);
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8648(args[2][20 * steps + ((cycle - 16) & mask)]);
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8649(args[2][21 * steps + ((cycle - 16) & mask)]);
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8650(args[2][22 * steps + ((cycle - 16) & mask)]);
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8651(args[2][23 * steps + ((cycle - 16) & mask)]);
      assert(x8651 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8652(args[2][24 * steps + ((cycle - 16) & mask)]);
      assert(x8652 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8653(args[2][25 * steps + ((cycle - 16) & mask)]);
      assert(x8653 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8654(args[2][26 * steps + ((cycle - 16) & mask)]);
      assert(x8654 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8655(args[2][27 * steps + ((cycle - 16) & mask)]);
      assert(x8655 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8656(args[2][28 * steps + ((cycle - 16) & mask)]);
      assert(x8656 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8657(args[2][29 * steps + ((cycle - 16) & mask)]);
      assert(x8657 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8658(args[2][30 * steps + ((cycle - 16) & mask)]);
      assert(x8658 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8659(args[2][31 * steps + ((cycle - 16) & mask)]);
      assert(x8659 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8660(args[2][32 * steps + ((cycle - 16) & mask)]);
      assert(x8660 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8661(args[2][33 * steps + ((cycle - 16) & mask)]);
      assert(x8661 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8662(args[2][34 * steps + ((cycle - 16) & mask)]);
      assert(x8662 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8663(args[2][35 * steps + ((cycle - 16) & mask)]);
      assert(x8663 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8664(args[2][36 * steps + ((cycle - 16) & mask)]);
      assert(x8664 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8665(args[2][37 * steps + ((cycle - 16) & mask)]);
      assert(x8665 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8666(args[2][38 * steps + ((cycle - 16) & mask)]);
      assert(x8666 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8667(args[2][39 * steps + ((cycle - 16) & mask)]);
      assert(x8667 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x8668(args[2][40 * steps + ((cycle - 16) & mask)]);
      assert(x8668 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8669 = Fp(x8623) + Fp(x8608);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8670 = x8623 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8671 = x8670 * x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8672 = x8669 - x8671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8673 = Fp(x8624) + Fp(x8609);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8674 = x8624 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8675 = x8674 * x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8676 = x8673 - x8675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8677 = Fp(x8625) + Fp(x8610);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8678 = x8625 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8679 = x8678 * x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8680 = x8677 - x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8681 = Fp(x8626) + Fp(x8611);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8682 = x8626 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8683 = x8682 * x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8684 = x8681 - x8683;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8685 = Fp(x8627) + Fp(x8612);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8686 = x8627 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8687 = x8686 * x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8688 = x8685 - x8687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8689 = Fp(x8628) + Fp(x8613);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8690 = x8628 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8691 = x8690 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8692 = x8689 - x8691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8693 = Fp(x8629) + Fp(x8614);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8694 = x8629 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8695 = x8694 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8696 = x8693 - x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8697 = Fp(x8630) + Fp(x8615);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8698 = x8630 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8699 = x8698 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8700 = x8697 - x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8701 = Fp(x8631) + Fp(x8616);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8702 = x8631 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8703 = x8702 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8704 = x8701 - x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8705 = Fp(x8632) + Fp(x8617);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8706 = x8632 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8707 = x8706 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8708 = x8705 - x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8709 = Fp(x8633) + Fp(x8618);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8710 = x8633 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8711 = x8710 * x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8712 = x8709 - x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8713 = Fp(x8634) + Fp(x8619);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8714 = x8634 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8715 = x8714 * x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8716 = x8713 - x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8717 = Fp(x8635) + Fp(x8620);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8718 = x8635 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8719 = x8718 * x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8720 = x8717 - x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8721 = Fp(x8636) + Fp(x8621);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8722 = x8636 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8723 = x8722 * x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8724 = x8721 - x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8725 = Fp(x8605) + Fp(x8622);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8726 = x8605 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8727 = x8726 * x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8728 = x8725 - x8727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8729 = Fp(x8606) + Fp(x8623);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8730 = x8606 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8731 = x8730 * x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8732 = x8729 - x8731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8733 = Fp(x8607) + Fp(x8624);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8734 = x8607 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8735 = x8734 * x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8736 = x8733 - x8735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8737 = Fp(x8608) + Fp(x8625);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8738 = x8608 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8739 = x8738 * x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8740 = x8737 - x8739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8741 = Fp(x8609) + Fp(x8626);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8742 = x8609 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8743 = x8742 * x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8744 = x8741 - x8743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8745 = Fp(x8610) + Fp(x8627);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8746 = x8610 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8747 = x8746 * x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8748 = x8745 - x8747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8749 = Fp(x8611) + Fp(x8628);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8750 = x8611 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8751 = x8750 * x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8752 = x8749 - x8751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8753 = Fp(x8612) + Fp(x8629);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8754 = x8612 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8755 = x8754 * x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8756 = x8753 - x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8757 = Fp(x8613) + Fp(x8630);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8758 = x8613 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8759 = x8758 * x8630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8760 = x8757 - x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8761 = Fp(x8614) + Fp(x8631);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8762 = x8614 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8763 = x8762 * x8631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8764 = x8761 - x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8765 = Fp(x8615) + Fp(x8632);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8766 = x8615 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8767 = x8766 * x8632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8768 = x8765 - x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8769 = Fp(x8616) + Fp(x8633);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8770 = x8616 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8771 = x8770 * x8633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8772 = x8769 - x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8773 = Fp(x8617) + Fp(x8634);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8774 = x8617 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8775 = x8774 * x8634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8776 = x8773 - x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8777 = Fp(x8618) + Fp(x8635);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8778 = x8618 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8779 = x8778 * x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8780 = x8777 - x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8781 = Fp(x8619) + Fp(x8636);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8782 = x8619 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8783 = x8782 * x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8784 = x8781 - x8783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8785 = Fp(x8612) + Fp(x8672);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8786 = x8754 * x8672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8787 = x8785 - x8786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8788 = Fp(x8613) + Fp(x8676);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8789 = x8758 * x8676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8790 = x8788 - x8789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8791 = Fp(x8614) + Fp(x8680);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8792 = x8762 * x8680;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8793 = x8791 - x8792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8794 = Fp(x8615) + Fp(x8684);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8795 = x8766 * x8684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8796 = x8794 - x8795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8797 = Fp(x8616) + Fp(x8688);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8798 = x8770 * x8688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8799 = x8797 - x8798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8800 = Fp(x8617) + Fp(x8692);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8801 = x8774 * x8692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8802 = x8800 - x8801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8803 = Fp(x8618) + Fp(x8696);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8804 = x8778 * x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8805 = x8803 - x8804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8806 = Fp(x8619) + Fp(x8700);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8807 = x8782 * x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8808 = x8806 - x8807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8809 = Fp(x8620) + Fp(x8704);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8810 = x8620 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8811 = x8810 * x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8812 = x8809 - x8811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8813 = Fp(x8621) + Fp(x8708);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8814 = x8621 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8815 = x8814 * x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8816 = x8813 - x8815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8817 = Fp(x8622) + Fp(x8712);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8818 = x8622 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8819 = x8818 * x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8820 = x8817 - x8819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8821 = Fp(x8623) + Fp(x8716);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8822 = x8670 * x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8823 = x8821 - x8822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8824 = Fp(x8624) + Fp(x8720);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8825 = x8674 * x8720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8826 = x8824 - x8825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8827 = Fp(x8625) + Fp(x8724);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8828 = x8678 * x8724;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8827 - x8828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8830 = Fp(x8626) + Fp(x8728);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8831 = x8682 * x8728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8830 - x8831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8833 = Fp(x8627) + Fp(x8732);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8834 = x8686 * x8732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8835 = x8833 - x8834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8836 = Fp(x8628) + Fp(x8736);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8837 = x8690 * x8736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8838 = x8836 - x8837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8839 = Fp(x8629) + Fp(x8740);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8840 = x8694 * x8740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8841 = x8839 - x8840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8842 = Fp(x8630) + Fp(x8744);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8843 = x8698 * x8744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8842 - x8843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8845 = Fp(x8631) + Fp(x8748);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8846 = x8702 * x8748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8845 - x8846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8848 = Fp(x8632) + Fp(x8752);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8849 = x8706 * x8752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8850 = x8848 - x8849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8851 = Fp(x8633) + Fp(x8756);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8852 = x8710 * x8756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8851 - x8852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8854 = Fp(x8634) + Fp(x8760);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8855 = x8714 * x8760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8854 - x8855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8857 = Fp(x8635) + Fp(x8764);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8858 = x8718 * x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8857 - x8858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8860 = Fp(x8636) + Fp(x8768);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8861 = x8722 * x8768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8862 = x8860 - x8861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8863 = Fp(x8605) + Fp(x8772);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8864 = x8726 * x8772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8863 - x8864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8866 = Fp(x8606) + Fp(x8776);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8867 = x8730 * x8776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8866 - x8867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8869 = Fp(x8607) + Fp(x8780);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8870 = x8734 * x8780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8871 = x8869 - x8870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8872 = Fp(x8608) + Fp(x8784);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8873 = x8738 * x8784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8872 - x8873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8875 = Fp(x8609) + Fp(x8620);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8876 = x8742 * x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8875 - x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8878 = Fp(x8610) + Fp(x8621);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8879 = x8746 * x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8878 - x8879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8881 = Fp(x8611) + Fp(x8622);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8882 = x8750 * x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8881 - x8882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8884 = Fp(x8560) + Fp(x8551);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8885 = x8560 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8886 = x8885 * x8551;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8887 = x8884 - x8886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8888 = Fp(x8561) + Fp(x8552);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8889 = x8561 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8890 = x8889 * x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8891 = x8888 - x8890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8892 = Fp(x8562) + Fp(x8553);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8893 = x8562 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8894 = x8893 * x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8895 = x8892 - x8894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8896 = Fp(x8563) + Fp(x8554);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8897 = x8563 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8898 = x8897 * x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8899 = x8896 - x8898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8900 = Fp(x8564) + Fp(x8555);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8901 = x8564 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8902 = x8901 * x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8903 = x8900 - x8902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8904 = Fp(x8565) + Fp(x8556);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8905 = x8565 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8906 = x8905 * x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8907 = x8904 - x8906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8908 = Fp(x8566) + Fp(x8557);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8909 = x8566 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8910 = x8909 * x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8911 = x8908 - x8910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8912 = Fp(x8567) + Fp(x8558);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8913 = x8567 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8914 = x8913 * x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8915 = x8912 - x8914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8916 = Fp(x8568) + Fp(x8559);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8917 = x8568 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8918 = x8917 * x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8919 = x8916 - x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8920 = Fp(x8569) + Fp(x8560);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8921 = x8569 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8922 = x8921 * x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8923 = x8920 - x8922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8924 = Fp(x8570) + Fp(x8561);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8925 = x8570 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8926 = x8925 * x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8927 = x8924 - x8926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8928 = Fp(x8571) + Fp(x8562);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8929 = x8571 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8930 = x8929 * x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8931 = x8928 - x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8932 = Fp(x8572) + Fp(x8563);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8933 = x8572 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8934 = x8933 * x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8935 = x8932 - x8934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8936 = Fp(x8541) + Fp(x8564);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8937 = x8541 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8938 = x8937 * x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8939 = x8936 - x8938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8940 = Fp(x8542) + Fp(x8565);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8941 = x8542 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8942 = x8941 * x8565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8943 = x8940 - x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8944 = Fp(x8543) + Fp(x8566);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8945 = x8543 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8946 = x8945 * x8566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8947 = x8944 - x8946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8948 = Fp(x8544) + Fp(x8567);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8949 = x8544 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8950 = x8949 * x8567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8951 = x8948 - x8950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8952 = Fp(x8545) + Fp(x8568);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8953 = x8545 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8954 = x8953 * x8568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8955 = x8952 - x8954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8956 = Fp(x8546) + Fp(x8569);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8957 = x8546 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8958 = x8957 * x8569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8959 = x8956 - x8958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8960 = Fp(x8547) + Fp(x8570);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8961 = x8547 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8962 = x8961 * x8570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8963 = x8960 - x8962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8964 = Fp(x8548) + Fp(x8571);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8965 = x8548 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8966 = x8965 * x8571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8967 = x8964 - x8966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8968 = Fp(x8549) + Fp(x8572);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8969 = x8549 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8970 = x8969 * x8572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8971 = x8968 - x8970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8972 = Fp(x8558) + Fp(x8887);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8973 = x8558 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8974 = x8973 * x8887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8975 = x8972 - x8974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8976 = Fp(x8559) + Fp(x8891);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8977 = x8559 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8978 = x8977 * x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8979 = x8976 - x8978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8980 = Fp(x8560) + Fp(x8895);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8981 = x8885 * x8895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8982 = x8980 - x8981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8983 = Fp(x8561) + Fp(x8899);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8984 = x8889 * x8899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8985 = x8983 - x8984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8986 = Fp(x8562) + Fp(x8903);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8987 = x8893 * x8903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8988 = x8986 - x8987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8989 = Fp(x8563) + Fp(x8907);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8990 = x8897 * x8907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8989 - x8990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8992 = Fp(x8564) + Fp(x8911);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8993 = x8901 * x8911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8992 - x8993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8995 = Fp(x8565) + Fp(x8915);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8996 = x8905 * x8915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8997 = x8995 - x8996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x8998 = Fp(x8566) + Fp(x8919);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x8999 = x8909 * x8919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9000 = x8998 - x8999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9001 = Fp(x8567) + Fp(x8923);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9002 = x8913 * x8923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x9001 - x9002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9004 = Fp(x8568) + Fp(x8927);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9005 = x8917 * x8927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x9004 - x9005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9007 = Fp(x8569) + Fp(x8931);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9008 = x8921 * x8931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x9007 - x9008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9010 = Fp(x8570) + Fp(x8935);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9011 = x8925 * x8935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x9010 - x9011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9013 = Fp(x8571) + Fp(x8939);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9014 = x8929 * x8939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x9013 - x9014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9016 = Fp(x8572) + Fp(x8943);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9017 = x8933 * x8943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x9016 - x9017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9019 = Fp(x8541) + Fp(x8947);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9020 = x8937 * x8947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x9019 - x9020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9022 = Fp(x8542) + Fp(x8951);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9023 = x8941 * x8951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x9022 - x9023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9025 = Fp(x8543) + Fp(x8955);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9026 = x8945 * x8955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x9025 - x9026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9028 = Fp(x8544) + Fp(x8959);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9029 = x8949 * x8959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9030 = x9028 - x9029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9031 = Fp(x8545) + Fp(x8963);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9032 = x8953 * x8963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x9031 - x9032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9034 = Fp(x8546) + Fp(x8967);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9035 = x8957 * x8967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x9034 - x9035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9037 = Fp(x8547) + Fp(x8971);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9038 = x8961 * x8971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x9037 - x9038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9040 = Fp(x8548) + Fp(x8550);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9041 = x8965 * x8550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x9040 - x9041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9043 = Fp(x8549) + Fp(x8551);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9044 = x8969 * x8551;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x9043 - x9044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9046 = Fp(x8550) + Fp(x8552);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9047 = x8550 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9048 = x9047 * x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9049 = x9046 - x9048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9050 = Fp(x8551) + Fp(x8553);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9051 = x8551 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9052 = x9051 * x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9053 = x9050 - x9052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9054 = Fp(x8552) + Fp(x8554);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9055 = x8552 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9056 = x9055 * x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9057 = x9054 - x9056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9058 = Fp(x8553) + Fp(x8555);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9059 = x8553 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9060 = x9059 * x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9061 = x9058 - x9060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9062 = Fp(x8554) + Fp(x8556);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9063 = x8554 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9064 = x9063 * x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9065 = x9062 - x9064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9066 = Fp(x8555) + Fp(x8557);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9067 = x8555 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9068 = x9067 * x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9069 = x9066 - x9068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9070 = Fp(x8556) + Fp(x8558);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9071 = x8556 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9072 = x9071 * x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9073 = x9070 - x9072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x9074 = Fp(x8557) + Fp(x8559);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9075 = x8557 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x9076 = x9075 * x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9077 = x9074 - x9076;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9078 = x8638 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9079 = Fp(x8637) + Fp(x9078);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9080 = x8639 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9081 = Fp(x9079) + Fp(x9080);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9082 = x8640 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9083 = Fp(x9081) + Fp(x9082);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9084 = x8641 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9085 = Fp(x9083) + Fp(x9084);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9086 = x8642 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9087 = Fp(x9085) + Fp(x9086);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9088 = x8643 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9089 = Fp(x9087) + Fp(x9088);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9090 = x8644 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9091 = Fp(x9089) + Fp(x9090);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9092 = x8645 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9093 = Fp(x9091) + Fp(x9092);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9094 = x8646 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9095 = Fp(x9093) + Fp(x9094);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9096 = x8647 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9097 = Fp(x9095) + Fp(x9096);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9098 = x8648 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9099 = Fp(x9097) + Fp(x9098);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9100 = x8649 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9101 = Fp(x9099) + Fp(x9100);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9102 = x8650 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9103 = Fp(x9101) + Fp(x9102);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9104 = x8651 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9105 = Fp(x9103) + Fp(x9104);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9106 = x8652 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9107 = Fp(x9105) + Fp(x9106);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9108 = x8654 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9109 = Fp(x8653) + Fp(x9108);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9110 = x8655 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9111 = Fp(x9109) + Fp(x9110);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9112 = x8656 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9113 = Fp(x9111) + Fp(x9112);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9114 = x8657 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9115 = Fp(x9113) + Fp(x9114);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9116 = x8658 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9117 = Fp(x9115) + Fp(x9116);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9118 = x8659 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9119 = Fp(x9117) + Fp(x9118);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9120 = x8660 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9121 = Fp(x9119) + Fp(x9120);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9122 = x8661 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9123 = Fp(x9121) + Fp(x9122);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9124 = x8662 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9125 = Fp(x9123) + Fp(x9124);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9126 = x8663 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9127 = Fp(x9125) + Fp(x9126);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9128 = x8664 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9129 = Fp(x9127) + Fp(x9128);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9130 = x8665 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9131 = Fp(x9129) + Fp(x9130);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9132 = x8666 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9133 = Fp(x9131) + Fp(x9132);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9134 = x8667 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9135 = Fp(x9133) + Fp(x9134);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9136 = x8668 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9137 = Fp(x9135) + Fp(x9136);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9138 = x8790 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9139 = Fp(x8787) + Fp(x9138);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9140 = x8793 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9141 = Fp(x9139) + Fp(x9140);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9142 = x8796 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9143 = Fp(x9141) + Fp(x9142);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9144 = x8799 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9145 = Fp(x9143) + Fp(x9144);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9146 = x8802 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9147 = Fp(x9145) + Fp(x9146);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9148 = x8805 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9149 = Fp(x9147) + Fp(x9148);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9150 = x8808 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9151 = Fp(x9149) + Fp(x9150);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9152 = x8812 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9153 = Fp(x9151) + Fp(x9152);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9154 = x8816 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9155 = Fp(x9153) + Fp(x9154);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9156 = x8820 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9157 = Fp(x9155) + Fp(x9156);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9158 = x8823 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9159 = Fp(x9157) + Fp(x9158);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9160 = x8826 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9161 = Fp(x9159) + Fp(x9160);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9162 = x8829 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9163 = Fp(x9161) + Fp(x9162);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9164 = x8832 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9165 = Fp(x9163) + Fp(x9164);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9166 = x8835 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9167 = Fp(x9165) + Fp(x9166);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9168 = x8841 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9169 = Fp(x8838) + Fp(x9168);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9170 = x8844 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9171 = Fp(x9169) + Fp(x9170);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9172 = x8847 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9173 = Fp(x9171) + Fp(x9172);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9174 = x8850 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9175 = Fp(x9173) + Fp(x9174);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9176 = x8853 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9177 = Fp(x9175) + Fp(x9176);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9178 = x8856 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9179 = Fp(x9177) + Fp(x9178);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9180 = x8859 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9181 = Fp(x9179) + Fp(x9180);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9182 = x8862 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9183 = Fp(x9181) + Fp(x9182);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9184 = x8865 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9185 = Fp(x9183) + Fp(x9184);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9186 = x8868 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9187 = Fp(x9185) + Fp(x9186);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9188 = x8871 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9189 = Fp(x9187) + Fp(x9188);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9190 = x8874 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9191 = Fp(x9189) + Fp(x9190);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9192 = x8877 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9193 = Fp(x9191) + Fp(x9192);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9194 = x8880 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9195 = Fp(x9193) + Fp(x9194);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9196 = x8883 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9197 = Fp(x9195) + Fp(x9196);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9198 = x8574 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9199 = Fp(x8573) + Fp(x9198);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9200 = x8575 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9201 = Fp(x9199) + Fp(x9200);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9202 = x8576 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9203 = Fp(x9201) + Fp(x9202);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9204 = x8577 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9205 = Fp(x9203) + Fp(x9204);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9206 = x8578 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9207 = Fp(x9205) + Fp(x9206);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9208 = x8579 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9209 = Fp(x9207) + Fp(x9208);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9210 = x8580 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9211 = Fp(x9209) + Fp(x9210);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9212 = x8581 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9213 = Fp(x9211) + Fp(x9212);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9214 = x8582 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9215 = Fp(x9213) + Fp(x9214);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9216 = x8583 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9217 = Fp(x9215) + Fp(x9216);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9218 = x8584 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9219 = Fp(x9217) + Fp(x9218);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9220 = x8585 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9221 = Fp(x9219) + Fp(x9220);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9222 = x8586 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9223 = Fp(x9221) + Fp(x9222);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9224 = x8587 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9225 = Fp(x9223) + Fp(x9224);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9226 = x8588 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9227 = Fp(x9225) + Fp(x9226);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9228 = x8590 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9229 = Fp(x8589) + Fp(x9228);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9230 = x8591 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9231 = Fp(x9229) + Fp(x9230);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9232 = x8592 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9233 = Fp(x9231) + Fp(x9232);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9234 = x8593 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9235 = Fp(x9233) + Fp(x9234);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9236 = x8594 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9237 = Fp(x9235) + Fp(x9236);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9238 = x8595 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9239 = Fp(x9237) + Fp(x9238);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9240 = x8596 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9241 = Fp(x9239) + Fp(x9240);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9242 = x8597 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9243 = Fp(x9241) + Fp(x9242);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9244 = x8598 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9245 = Fp(x9243) + Fp(x9244);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9246 = x8599 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9247 = Fp(x9245) + Fp(x9246);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9248 = x8600 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9249 = Fp(x9247) + Fp(x9248);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9250 = x8601 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9251 = Fp(x9249) + Fp(x9250);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9252 = x8602 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9253 = Fp(x9251) + Fp(x9252);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9254 = x8603 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9255 = Fp(x9253) + Fp(x9254);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9256 = x8604 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9257 = Fp(x9255) + Fp(x9256);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9258 = x8979 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9259 = Fp(x8975) + Fp(x9258);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9260 = x8982 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9261 = Fp(x9259) + Fp(x9260);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9262 = x8985 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9263 = Fp(x9261) + Fp(x9262);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9264 = x8988 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9265 = Fp(x9263) + Fp(x9264);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9266 = x8991 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9267 = Fp(x9265) + Fp(x9266);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9268 = x8994 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9269 = Fp(x9267) + Fp(x9268);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9270 = x8997 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9271 = Fp(x9269) + Fp(x9270);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9272 = x9000 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9273 = Fp(x9271) + Fp(x9272);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9274 = x9003 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9275 = Fp(x9273) + Fp(x9274);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9276 = x9006 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9277 = Fp(x9275) + Fp(x9276);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9278 = x9009 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9279 = Fp(x9277) + Fp(x9278);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9280 = x9012 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9281 = Fp(x9279) + Fp(x9280);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9282 = x9015 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9283 = Fp(x9281) + Fp(x9282);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9284 = x9018 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9285 = Fp(x9283) + Fp(x9284);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9286 = x9021 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9287 = Fp(x9285) + Fp(x9286);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9288 = x9027 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9289 = Fp(x9024) + Fp(x9288);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9290 = x9030 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9291 = Fp(x9289) + Fp(x9290);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9292 = x9033 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9293 = Fp(x9291) + Fp(x9292);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9294 = x9036 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9295 = Fp(x9293) + Fp(x9294);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9296 = x9039 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9297 = Fp(x9295) + Fp(x9296);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9298 = x9042 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9299 = Fp(x9297) + Fp(x9298);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9300 = x9045 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9301 = Fp(x9299) + Fp(x9300);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9302 = x9049 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9303 = Fp(x9301) + Fp(x9302);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9304 = x9053 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9305 = Fp(x9303) + Fp(x9304);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9306 = x9057 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9307 = Fp(x9305) + Fp(x9306);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9308 = x9061 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9309 = Fp(x9307) + Fp(x9308);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9310 = x9065 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9311 = Fp(x9309) + Fp(x9310);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9312 = x9069 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9313 = Fp(x9311) + Fp(x9312);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9314 = x9073 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9315 = Fp(x9313) + Fp(x9314);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x9316 = x9077 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x9317 = Fp(x9315) + Fp(x9316);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x9318 = Fp(x9227) + Fp(x9287);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x9319 = Fp(x9257) + Fp(x9317);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x9320 = Fp(x9167) + Fp(x9318);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x9321 = Fp(x9197) + Fp(x9319);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x9322 = Fp(x9107) + Fp(x9320);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x9323 = Fp(x9137) + Fp(x9321);
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      args[2][148 * steps + cycle] = x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      args[2][149 * steps + cycle] = x9323;
      if (x8496 != 0) {
        {
          // loc("./cirgen/components/bits.h":20:23)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][91 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][19 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][20 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][21 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][22 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][23 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][24 * steps + cycle] = x94;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9324(args[2][82 * steps + ((cycle - 0) & mask)]);
        assert(x9324 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9325(args[2][83 * steps + ((cycle - 0) & mask)]);
        assert(x9325 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9326 = x9325 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9327 = Fp(x9324) + Fp(x9326);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9328(args[2][84 * steps + ((cycle - 0) & mask)]);
        assert(x9328 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9329 = x9328 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9330 = Fp(x9327) + Fp(x9329);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9331(args[2][85 * steps + ((cycle - 0) & mask)]);
        assert(x9331 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9332 = x9331 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9333 = Fp(x9330) + Fp(x9332);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9334(args[2][86 * steps + ((cycle - 0) & mask)]);
        assert(x9334 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9335 = x9334 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9336 = Fp(x9333) + Fp(x9335);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9337(args[2][87 * steps + ((cycle - 0) & mask)]);
        assert(x9337 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9338 = x9337 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9339 = Fp(x9336) + Fp(x9338);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9340(args[2][88 * steps + ((cycle - 0) & mask)]);
        assert(x9340 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9341 = x9340 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9342 = Fp(x9339) + Fp(x9341);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9343(args[2][89 * steps + ((cycle - 0) & mask)]);
        assert(x9343 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9344 = x9343 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9345 = Fp(x9342) + Fp(x9344);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9346(args[2][90 * steps + ((cycle - 0) & mask)]);
        assert(x9346 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9347 = x9346 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9348 = Fp(x9345) + Fp(x9347);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9349(args[2][91 * steps + ((cycle - 0) & mask)]);
        assert(x9349 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9350 = x9349 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9351 = Fp(x9348) + Fp(x9350);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9352(args[2][19 * steps + ((cycle - 0) & mask)]);
        assert(x9352 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9353 = x9352 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9354 = Fp(x9351) + Fp(x9353);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9355(args[2][20 * steps + ((cycle - 0) & mask)]);
        assert(x9355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9356 = x9355 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9357 = Fp(x9354) + Fp(x9356);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9358(args[2][21 * steps + ((cycle - 0) & mask)]);
        assert(x9358 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9359 = x9358 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9360 = Fp(x9357) + Fp(x9359);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9361(args[2][22 * steps + ((cycle - 0) & mask)]);
        assert(x9361 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9362 = x9361 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9363 = Fp(x9360) + Fp(x9362);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9364(args[2][23 * steps + ((cycle - 0) & mask)]);
        assert(x9364 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9365 = x9364 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9366 = Fp(x9363) + Fp(x9365);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9367(args[2][24 * steps + ((cycle - 0) & mask)]);
        assert(x9367 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9368 = x9367 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9369 = Fp(x9366) + Fp(x9368);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9370 = x94 - x9369;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x9371 = x9370 * x9;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x9371;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9372(args[2][80 * steps + ((cycle - 0) & mask)]);
        assert(x9372 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9373 = Fp(x9372.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][25 * steps + cycle] = x9373;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9374 = Fp(x9372.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9375 = x9374 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][26 * steps + cycle] = x9375;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9376 = Fp(x9372.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9377 = x9376 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][27 * steps + cycle] = x9377;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9378 = Fp(x9372.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9379 = x9378 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][28 * steps + cycle] = x9379;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9380 = Fp(x9372.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9381 = x9380 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][29 * steps + cycle] = x9381;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9382 = Fp(x9372.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9383 = x9382 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][30 * steps + cycle] = x9383;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9384 = Fp(x9372.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9385 = x9384 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][31 * steps + cycle] = x9385;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9386 = Fp(x9372.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9387 = x9386 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][32 * steps + cycle] = x9387;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9388 = Fp(x9372.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9389 = x9388 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][33 * steps + cycle] = x9389;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9390 = Fp(x9372.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9391 = x9390 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][34 * steps + cycle] = x9391;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9392 = Fp(x9372.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9393 = x9392 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][35 * steps + cycle] = x9393;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9394 = Fp(x9372.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9395 = x9394 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][36 * steps + cycle] = x9395;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9396 = Fp(x9372.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9397 = x9396 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][37 * steps + cycle] = x9397;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9398 = Fp(x9372.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9399 = x9398 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][38 * steps + cycle] = x9399;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9400 = Fp(x9372.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9401 = x9400 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][39 * steps + cycle] = x9401;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9402 = Fp(x9372.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9403 = x9402 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][40 * steps + cycle] = x9403;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9404(args[2][25 * steps + ((cycle - 0) & mask)]);
        assert(x9404 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9405(args[2][26 * steps + ((cycle - 0) & mask)]);
        assert(x9405 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9406 = x9405 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9407 = Fp(x9404) + Fp(x9406);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9408(args[2][27 * steps + ((cycle - 0) & mask)]);
        assert(x9408 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9409 = x9408 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9410 = Fp(x9407) + Fp(x9409);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9411(args[2][28 * steps + ((cycle - 0) & mask)]);
        assert(x9411 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9412 = x9411 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9413 = Fp(x9410) + Fp(x9412);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9414(args[2][29 * steps + ((cycle - 0) & mask)]);
        assert(x9414 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9415 = x9414 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9416 = Fp(x9413) + Fp(x9415);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9417(args[2][30 * steps + ((cycle - 0) & mask)]);
        assert(x9417 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9418 = x9417 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9419 = Fp(x9416) + Fp(x9418);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9420(args[2][31 * steps + ((cycle - 0) & mask)]);
        assert(x9420 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9421 = x9420 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9422 = Fp(x9419) + Fp(x9421);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9423(args[2][32 * steps + ((cycle - 0) & mask)]);
        assert(x9423 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9424 = x9423 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9425 = Fp(x9422) + Fp(x9424);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9426(args[2][33 * steps + ((cycle - 0) & mask)]);
        assert(x9426 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9427 = x9426 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9428 = Fp(x9425) + Fp(x9427);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9429(args[2][34 * steps + ((cycle - 0) & mask)]);
        assert(x9429 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9430 = x9429 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9431 = Fp(x9428) + Fp(x9430);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9432(args[2][35 * steps + ((cycle - 0) & mask)]);
        assert(x9432 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9433 = x9432 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9434 = Fp(x9431) + Fp(x9433);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9435(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x9435 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9436 = x9435 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9437 = Fp(x9434) + Fp(x9436);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9438(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x9438 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9439 = x9438 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9440 = Fp(x9437) + Fp(x9439);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9441(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x9441 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9442 = x9441 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9443 = Fp(x9440) + Fp(x9442);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9444(args[2][39 * steps + ((cycle - 0) & mask)]);
        assert(x9444 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9445 = x9444 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9446 = Fp(x9443) + Fp(x9445);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9447(args[2][40 * steps + ((cycle - 0) & mask)]);
        assert(x9447 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9448 = x9447 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9449 = Fp(x9446) + Fp(x9448);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9450 = x9372 - x9449;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x9451 = x9450 * x9;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x9451;
      }
      if (x8497 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":140:11))
        Fp x9452(args[2][148 * steps + ((cycle - 0) & mask)]);
        assert(x9452 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg11"("cirgen/circuit/rv32im/sha.cpp":140:26))
        Fp x9453(args[2][149 * steps + ((cycle - 0) & mask)]);
        assert(x9453 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9454 = Fp(x9452.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][82 * steps + cycle] = x9454;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9455 = Fp(x9452.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9456 = x9455 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][83 * steps + cycle] = x9456;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9457 = Fp(x9452.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9458 = x9457 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][84 * steps + cycle] = x9458;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9459 = Fp(x9452.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9460 = x9459 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][85 * steps + cycle] = x9460;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9461 = Fp(x9452.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9462 = x9461 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][86 * steps + cycle] = x9462;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9463 = Fp(x9452.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9464 = x9463 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][87 * steps + cycle] = x9464;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9465 = Fp(x9452.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9466 = x9465 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][88 * steps + cycle] = x9466;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9467 = Fp(x9452.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9468 = x9467 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][89 * steps + cycle] = x9468;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9469 = Fp(x9452.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9470 = x9469 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][90 * steps + cycle] = x9470;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9471 = Fp(x9452.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9472 = x9471 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][91 * steps + cycle] = x9472;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9473 = Fp(x9452.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9474 = x9473 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][19 * steps + cycle] = x9474;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9475 = Fp(x9452.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9476 = x9475 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][20 * steps + cycle] = x9476;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9477 = Fp(x9452.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9478 = x9477 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][21 * steps + cycle] = x9478;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9479 = Fp(x9452.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9480 = x9479 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][22 * steps + cycle] = x9480;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9481 = Fp(x9452.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9482 = x9481 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][23 * steps + cycle] = x9482;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9483 = Fp(x9452.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9484 = x9483 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][24 * steps + cycle] = x9484;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9485(args[2][82 * steps + ((cycle - 0) & mask)]);
        assert(x9485 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9486(args[2][83 * steps + ((cycle - 0) & mask)]);
        assert(x9486 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9487 = x9486 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9488 = Fp(x9485) + Fp(x9487);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9489(args[2][84 * steps + ((cycle - 0) & mask)]);
        assert(x9489 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9490 = x9489 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9491 = Fp(x9488) + Fp(x9490);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9492(args[2][85 * steps + ((cycle - 0) & mask)]);
        assert(x9492 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9493 = x9492 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9494 = Fp(x9491) + Fp(x9493);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9495(args[2][86 * steps + ((cycle - 0) & mask)]);
        assert(x9495 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9496 = x9495 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9497 = Fp(x9494) + Fp(x9496);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9498(args[2][87 * steps + ((cycle - 0) & mask)]);
        assert(x9498 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9499 = x9498 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9500 = Fp(x9497) + Fp(x9499);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9501(args[2][88 * steps + ((cycle - 0) & mask)]);
        assert(x9501 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9502 = x9501 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9503 = Fp(x9500) + Fp(x9502);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9504(args[2][89 * steps + ((cycle - 0) & mask)]);
        assert(x9504 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9505 = x9504 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9506 = Fp(x9503) + Fp(x9505);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9507(args[2][90 * steps + ((cycle - 0) & mask)]);
        assert(x9507 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9508 = x9507 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9509 = Fp(x9506) + Fp(x9508);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9510(args[2][91 * steps + ((cycle - 0) & mask)]);
        assert(x9510 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9511 = x9510 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9512 = Fp(x9509) + Fp(x9511);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9513(args[2][19 * steps + ((cycle - 0) & mask)]);
        assert(x9513 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9514 = x9513 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9515 = Fp(x9512) + Fp(x9514);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9516(args[2][20 * steps + ((cycle - 0) & mask)]);
        assert(x9516 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9517 = x9516 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9518 = Fp(x9515) + Fp(x9517);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9519(args[2][21 * steps + ((cycle - 0) & mask)]);
        assert(x9519 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9520 = x9519 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9521 = Fp(x9518) + Fp(x9520);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9522(args[2][22 * steps + ((cycle - 0) & mask)]);
        assert(x9522 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9523 = x9522 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9524 = Fp(x9521) + Fp(x9523);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9525(args[2][23 * steps + ((cycle - 0) & mask)]);
        assert(x9525 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9526 = x9525 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9527 = Fp(x9524) + Fp(x9526);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9528(args[2][24 * steps + ((cycle - 0) & mask)]);
        assert(x9528 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9529 = x9528 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9530 = Fp(x9527) + Fp(x9529);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9531 = x9452 - x9530;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x9532 = x9531 * x9;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][80 * steps + cycle] = x9532;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9533(args[2][80 * steps + ((cycle - 0) & mask)]);
        assert(x9533 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        Fp x9534 = Fp(x9453) + Fp(x9533);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9535 = Fp(x9534.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][25 * steps + cycle] = x9535;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9536 = Fp(x9534.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9537 = x9536 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][26 * steps + cycle] = x9537;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9538 = Fp(x9534.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9539 = x9538 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][27 * steps + cycle] = x9539;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9540 = Fp(x9534.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9541 = x9540 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][28 * steps + cycle] = x9541;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9542 = Fp(x9534.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9543 = x9542 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][29 * steps + cycle] = x9543;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9544 = Fp(x9534.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9545 = x9544 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][30 * steps + cycle] = x9545;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9546 = Fp(x9534.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9547 = x9546 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][31 * steps + cycle] = x9547;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9548 = Fp(x9534.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9549 = x9548 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][32 * steps + cycle] = x9549;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9550 = Fp(x9534.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9551 = x9550 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][33 * steps + cycle] = x9551;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9552 = Fp(x9534.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9553 = x9552 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][34 * steps + cycle] = x9553;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9554 = Fp(x9534.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9555 = x9554 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][35 * steps + cycle] = x9555;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9556 = Fp(x9534.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9557 = x9556 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][36 * steps + cycle] = x9557;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9558 = Fp(x9534.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9559 = x9558 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][37 * steps + cycle] = x9559;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9560 = Fp(x9534.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9561 = x9560 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][38 * steps + cycle] = x9561;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9562 = Fp(x9534.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9563 = x9562 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][39 * steps + cycle] = x9563;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9564 = Fp(x9534.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9565 = x9564 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][40 * steps + cycle] = x9565;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9566(args[2][25 * steps + ((cycle - 0) & mask)]);
        assert(x9566 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9567(args[2][26 * steps + ((cycle - 0) & mask)]);
        assert(x9567 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9568 = x9567 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9569 = Fp(x9566) + Fp(x9568);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9570(args[2][27 * steps + ((cycle - 0) & mask)]);
        assert(x9570 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9571 = x9570 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9572 = Fp(x9569) + Fp(x9571);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9573(args[2][28 * steps + ((cycle - 0) & mask)]);
        assert(x9573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9574 = x9573 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9575 = Fp(x9572) + Fp(x9574);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9576(args[2][29 * steps + ((cycle - 0) & mask)]);
        assert(x9576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9577 = x9576 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9578 = Fp(x9575) + Fp(x9577);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9579(args[2][30 * steps + ((cycle - 0) & mask)]);
        assert(x9579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9580 = x9579 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9581 = Fp(x9578) + Fp(x9580);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9582(args[2][31 * steps + ((cycle - 0) & mask)]);
        assert(x9582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9583 = x9582 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9584 = Fp(x9581) + Fp(x9583);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9585(args[2][32 * steps + ((cycle - 0) & mask)]);
        assert(x9585 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9586 = x9585 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9587 = Fp(x9584) + Fp(x9586);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9588(args[2][33 * steps + ((cycle - 0) & mask)]);
        assert(x9588 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9589 = x9588 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9590 = Fp(x9587) + Fp(x9589);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9591(args[2][34 * steps + ((cycle - 0) & mask)]);
        assert(x9591 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9592 = x9591 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9593 = Fp(x9590) + Fp(x9592);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9594(args[2][35 * steps + ((cycle - 0) & mask)]);
        assert(x9594 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9595 = x9594 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9596 = Fp(x9593) + Fp(x9595);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9597(args[2][36 * steps + ((cycle - 0) & mask)]);
        assert(x9597 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9598 = x9597 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9599 = Fp(x9596) + Fp(x9598);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9600(args[2][37 * steps + ((cycle - 0) & mask)]);
        assert(x9600 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9601 = x9600 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9602 = Fp(x9599) + Fp(x9601);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9603(args[2][38 * steps + ((cycle - 0) & mask)]);
        assert(x9603 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9604 = x9603 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9605 = Fp(x9602) + Fp(x9604);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9606(args[2][39 * steps + ((cycle - 0) & mask)]);
        assert(x9606 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9607 = x9606 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9608 = Fp(x9605) + Fp(x9607);
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9609(args[2][40 * steps + ((cycle - 0) & mask)]);
        assert(x9609 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9610 = x9609 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9611 = Fp(x9608) + Fp(x9610);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9612 = x9534 - x9611;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x9613 = x9612 * x9;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][81 * steps + cycle] = x9613;
      }
      if (x8496 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9614(args[2][150 * steps + ((cycle - 4) & mask)]);
        assert(x9614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9615(args[2][151 * steps + ((cycle - 4) & mask)]);
        assert(x9615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9616(args[2][152 * steps + ((cycle - 4) & mask)]);
        assert(x9616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9617(args[2][153 * steps + ((cycle - 4) & mask)]);
        assert(x9617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9618(args[2][154 * steps + ((cycle - 4) & mask)]);
        assert(x9618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9619(args[2][155 * steps + ((cycle - 4) & mask)]);
        assert(x9619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9620(args[2][156 * steps + ((cycle - 4) & mask)]);
        assert(x9620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9621(args[2][157 * steps + ((cycle - 4) & mask)]);
        assert(x9621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9622(args[2][158 * steps + ((cycle - 4) & mask)]);
        assert(x9622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9623(args[2][159 * steps + ((cycle - 4) & mask)]);
        assert(x9623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9624(args[2][160 * steps + ((cycle - 4) & mask)]);
        assert(x9624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9625(args[2][161 * steps + ((cycle - 4) & mask)]);
        assert(x9625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9626(args[2][162 * steps + ((cycle - 4) & mask)]);
        assert(x9626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9627(args[2][163 * steps + ((cycle - 4) & mask)]);
        assert(x9627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9628(args[2][164 * steps + ((cycle - 4) & mask)]);
        assert(x9628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9629(args[2][165 * steps + ((cycle - 4) & mask)]);
        assert(x9629 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9630(args[2][166 * steps + ((cycle - 4) & mask)]);
        assert(x9630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9631(args[2][167 * steps + ((cycle - 4) & mask)]);
        assert(x9631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9632(args[2][168 * steps + ((cycle - 4) & mask)]);
        assert(x9632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9633(args[2][169 * steps + ((cycle - 4) & mask)]);
        assert(x9633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9634(args[2][170 * steps + ((cycle - 4) & mask)]);
        assert(x9634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9635(args[2][171 * steps + ((cycle - 4) & mask)]);
        assert(x9635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9636(args[2][172 * steps + ((cycle - 4) & mask)]);
        assert(x9636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9637(args[2][173 * steps + ((cycle - 4) & mask)]);
        assert(x9637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9638(args[2][174 * steps + ((cycle - 4) & mask)]);
        assert(x9638 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9639(args[2][175 * steps + ((cycle - 4) & mask)]);
        assert(x9639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9640(args[2][176 * steps + ((cycle - 4) & mask)]);
        assert(x9640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9641(args[2][177 * steps + ((cycle - 4) & mask)]);
        assert(x9641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9642(args[2][178 * steps + ((cycle - 4) & mask)]);
        assert(x9642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9643(args[2][179 * steps + ((cycle - 4) & mask)]);
        assert(x9643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9644(args[2][180 * steps + ((cycle - 4) & mask)]);
        assert(x9644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9645(args[2][181 * steps + ((cycle - 4) & mask)]);
        assert(x9645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9646 = x9615 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9647 = Fp(x9614) + Fp(x9646);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9648 = x9616 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9649 = Fp(x9647) + Fp(x9648);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9650 = x9617 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9651 = Fp(x9649) + Fp(x9650);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9652 = x9618 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9653 = Fp(x9651) + Fp(x9652);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9654 = x9619 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9655 = Fp(x9653) + Fp(x9654);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9656 = x9620 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9657 = Fp(x9655) + Fp(x9656);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9658 = x9621 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9659 = Fp(x9657) + Fp(x9658);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9660 = x9622 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9661 = Fp(x9659) + Fp(x9660);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9662 = x9623 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9663 = Fp(x9661) + Fp(x9662);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9664 = x9624 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9665 = Fp(x9663) + Fp(x9664);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9666 = x9625 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9667 = Fp(x9665) + Fp(x9666);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9668 = x9626 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9669 = Fp(x9667) + Fp(x9668);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9670 = x9627 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9671 = Fp(x9669) + Fp(x9670);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9672 = x9628 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9673 = Fp(x9671) + Fp(x9672);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9674 = x9629 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9675 = Fp(x9673) + Fp(x9674);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9676 = x9631 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9677 = Fp(x9630) + Fp(x9676);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9678 = x9632 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9679 = Fp(x9677) + Fp(x9678);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9680 = x9633 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9681 = Fp(x9679) + Fp(x9680);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9682 = x9634 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9683 = Fp(x9681) + Fp(x9682);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9684 = x9635 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9685 = Fp(x9683) + Fp(x9684);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9686 = x9636 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9687 = Fp(x9685) + Fp(x9686);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9688 = x9637 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9689 = Fp(x9687) + Fp(x9688);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9690 = x9638 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9691 = Fp(x9689) + Fp(x9690);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9692 = x9639 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9693 = Fp(x9691) + Fp(x9692);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9694 = x9640 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9695 = Fp(x9693) + Fp(x9694);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9696 = x9641 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9697 = Fp(x9695) + Fp(x9696);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9698 = x9642 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9699 = Fp(x9697) + Fp(x9698);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9700 = x9643 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9701 = Fp(x9699) + Fp(x9700);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9702 = x9644 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9703 = Fp(x9701) + Fp(x9702);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9704 = x9645 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9705 = Fp(x9703) + Fp(x9704);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9706(args[2][150 * steps + ((cycle - 68) & mask)]);
        assert(x9706 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9707(args[2][151 * steps + ((cycle - 68) & mask)]);
        assert(x9707 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9708(args[2][152 * steps + ((cycle - 68) & mask)]);
        assert(x9708 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9709(args[2][153 * steps + ((cycle - 68) & mask)]);
        assert(x9709 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9710(args[2][154 * steps + ((cycle - 68) & mask)]);
        assert(x9710 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9711(args[2][155 * steps + ((cycle - 68) & mask)]);
        assert(x9711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9712(args[2][156 * steps + ((cycle - 68) & mask)]);
        assert(x9712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9713(args[2][157 * steps + ((cycle - 68) & mask)]);
        assert(x9713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9714(args[2][158 * steps + ((cycle - 68) & mask)]);
        assert(x9714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9715(args[2][159 * steps + ((cycle - 68) & mask)]);
        assert(x9715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9716(args[2][160 * steps + ((cycle - 68) & mask)]);
        assert(x9716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9717(args[2][161 * steps + ((cycle - 68) & mask)]);
        assert(x9717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9718(args[2][162 * steps + ((cycle - 68) & mask)]);
        assert(x9718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9719(args[2][163 * steps + ((cycle - 68) & mask)]);
        assert(x9719 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9720(args[2][164 * steps + ((cycle - 68) & mask)]);
        assert(x9720 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9721(args[2][165 * steps + ((cycle - 68) & mask)]);
        assert(x9721 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9722(args[2][166 * steps + ((cycle - 68) & mask)]);
        assert(x9722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9723(args[2][167 * steps + ((cycle - 68) & mask)]);
        assert(x9723 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9724(args[2][168 * steps + ((cycle - 68) & mask)]);
        assert(x9724 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9725(args[2][169 * steps + ((cycle - 68) & mask)]);
        assert(x9725 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9726(args[2][170 * steps + ((cycle - 68) & mask)]);
        assert(x9726 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9727(args[2][171 * steps + ((cycle - 68) & mask)]);
        assert(x9727 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9728(args[2][172 * steps + ((cycle - 68) & mask)]);
        assert(x9728 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9729(args[2][173 * steps + ((cycle - 68) & mask)]);
        assert(x9729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9730(args[2][174 * steps + ((cycle - 68) & mask)]);
        assert(x9730 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9731(args[2][175 * steps + ((cycle - 68) & mask)]);
        assert(x9731 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9732(args[2][176 * steps + ((cycle - 68) & mask)]);
        assert(x9732 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9733(args[2][177 * steps + ((cycle - 68) & mask)]);
        assert(x9733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9734(args[2][178 * steps + ((cycle - 68) & mask)]);
        assert(x9734 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9735(args[2][179 * steps + ((cycle - 68) & mask)]);
        assert(x9735 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9736(args[2][180 * steps + ((cycle - 68) & mask)]);
        assert(x9736 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9737(args[2][181 * steps + ((cycle - 68) & mask)]);
        assert(x9737 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9738 = x9707 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9739 = Fp(x9706) + Fp(x9738);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9740 = x9708 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9741 = Fp(x9739) + Fp(x9740);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9742 = x9709 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9743 = Fp(x9741) + Fp(x9742);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9744 = x9710 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9745 = Fp(x9743) + Fp(x9744);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9746 = x9711 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9747 = Fp(x9745) + Fp(x9746);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9748 = x9712 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9749 = Fp(x9747) + Fp(x9748);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9750 = x9713 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9751 = Fp(x9749) + Fp(x9750);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9752 = x9714 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9753 = Fp(x9751) + Fp(x9752);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9754 = x9715 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9755 = Fp(x9753) + Fp(x9754);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9756 = x9716 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9757 = Fp(x9755) + Fp(x9756);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9758 = x9717 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9759 = Fp(x9757) + Fp(x9758);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9760 = x9718 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9761 = Fp(x9759) + Fp(x9760);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9762 = x9719 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9763 = Fp(x9761) + Fp(x9762);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9764 = x9720 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9765 = Fp(x9763) + Fp(x9764);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9766 = x9721 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9767 = Fp(x9765) + Fp(x9766);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9768 = x9723 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9769 = Fp(x9722) + Fp(x9768);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9770 = x9724 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9771 = Fp(x9769) + Fp(x9770);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9772 = x9725 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9773 = Fp(x9771) + Fp(x9772);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9774 = x9726 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9775 = Fp(x9773) + Fp(x9774);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9776 = x9727 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9777 = Fp(x9775) + Fp(x9776);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9778 = x9728 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9779 = Fp(x9777) + Fp(x9778);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9780 = x9729 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9781 = Fp(x9779) + Fp(x9780);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9782 = x9730 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9783 = Fp(x9781) + Fp(x9782);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9784 = x9731 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9785 = Fp(x9783) + Fp(x9784);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9786 = x9732 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9787 = Fp(x9785) + Fp(x9786);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9788 = x9733 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9789 = Fp(x9787) + Fp(x9788);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9790 = x9734 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9791 = Fp(x9789) + Fp(x9790);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9792 = x9735 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9793 = Fp(x9791) + Fp(x9792);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9794 = x9736 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9795 = Fp(x9793) + Fp(x9794);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x9796 = x9737 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x9797 = Fp(x9795) + Fp(x9796);
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        Fp x9798 = Fp(x9675) + Fp(x9767);
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        Fp x9799 = Fp(x9705) + Fp(x9797);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9800 = Fp(x9798.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][150 * steps + cycle] = x9800;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9801 = Fp(x9798.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9802 = x9801 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][151 * steps + cycle] = x9802;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9803 = Fp(x9798.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9804 = x9803 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][152 * steps + cycle] = x9804;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9805 = Fp(x9798.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9806 = x9805 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][153 * steps + cycle] = x9806;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9807 = Fp(x9798.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9808 = x9807 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][154 * steps + cycle] = x9808;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9809 = Fp(x9798.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9810 = x9809 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][155 * steps + cycle] = x9810;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9811 = Fp(x9798.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9812 = x9811 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][156 * steps + cycle] = x9812;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9813 = Fp(x9798.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9814 = x9813 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][157 * steps + cycle] = x9814;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9815 = Fp(x9798.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9816 = x9815 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][158 * steps + cycle] = x9816;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9817 = Fp(x9798.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9818 = x9817 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][159 * steps + cycle] = x9818;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9819 = Fp(x9798.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9820 = x9819 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][160 * steps + cycle] = x9820;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9821 = Fp(x9798.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9822 = x9821 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][161 * steps + cycle] = x9822;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9823 = Fp(x9798.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9824 = x9823 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][162 * steps + cycle] = x9824;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9825 = Fp(x9798.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9826 = x9825 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][163 * steps + cycle] = x9826;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9827 = Fp(x9798.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9828 = x9827 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][164 * steps + cycle] = x9828;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9829 = Fp(x9798.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9830 = x9829 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][165 * steps + cycle] = x9830;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9831(args[2][150 * steps + ((cycle - 0) & mask)]);
        assert(x9831 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9832(args[2][151 * steps + ((cycle - 0) & mask)]);
        assert(x9832 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9833 = x9832 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9834 = Fp(x9831) + Fp(x9833);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9835(args[2][152 * steps + ((cycle - 0) & mask)]);
        assert(x9835 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9836 = x9835 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9837 = Fp(x9834) + Fp(x9836);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9838(args[2][153 * steps + ((cycle - 0) & mask)]);
        assert(x9838 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9839 = x9838 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9840 = Fp(x9837) + Fp(x9839);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9841(args[2][154 * steps + ((cycle - 0) & mask)]);
        assert(x9841 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9842 = x9841 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9843 = Fp(x9840) + Fp(x9842);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9844(args[2][155 * steps + ((cycle - 0) & mask)]);
        assert(x9844 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9845 = x9844 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9846 = Fp(x9843) + Fp(x9845);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9847(args[2][156 * steps + ((cycle - 0) & mask)]);
        assert(x9847 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9848 = x9847 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9849 = Fp(x9846) + Fp(x9848);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9850(args[2][157 * steps + ((cycle - 0) & mask)]);
        assert(x9850 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9851 = x9850 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9852 = Fp(x9849) + Fp(x9851);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9853(args[2][158 * steps + ((cycle - 0) & mask)]);
        assert(x9853 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9854 = x9853 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9855 = Fp(x9852) + Fp(x9854);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9856(args[2][159 * steps + ((cycle - 0) & mask)]);
        assert(x9856 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9857 = x9856 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9858 = Fp(x9855) + Fp(x9857);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9859(args[2][160 * steps + ((cycle - 0) & mask)]);
        assert(x9859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9860 = x9859 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9861 = Fp(x9858) + Fp(x9860);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9862(args[2][161 * steps + ((cycle - 0) & mask)]);
        assert(x9862 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9863 = x9862 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9864 = Fp(x9861) + Fp(x9863);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9865(args[2][162 * steps + ((cycle - 0) & mask)]);
        assert(x9865 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9866 = x9865 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9867 = Fp(x9864) + Fp(x9866);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9868(args[2][163 * steps + ((cycle - 0) & mask)]);
        assert(x9868 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9869 = x9868 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9870 = Fp(x9867) + Fp(x9869);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9871(args[2][164 * steps + ((cycle - 0) & mask)]);
        assert(x9871 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9872 = x9871 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9873 = Fp(x9870) + Fp(x9872);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9874(args[2][165 * steps + ((cycle - 0) & mask)]);
        assert(x9874 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9875 = x9874 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9876 = Fp(x9873) + Fp(x9875);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9877 = x9798 - x9876;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x9878 = x9877 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9879 = Fp(x9878.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][76 * steps + cycle] = x9879;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9880(args[2][76 * steps + ((cycle - 0) & mask)]);
        assert(x9880 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9881 = x9878 - x9880;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        Fp x9882 = x9881 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9883 = x95 - x9882;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        Fp x9884 = x9882 * x9883;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9884 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        Fp x9885 = Fp(x9799) + Fp(x9878);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9886 = Fp(x9885.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][166 * steps + cycle] = x9886;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9887 = Fp(x9885.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9888 = x9887 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][167 * steps + cycle] = x9888;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9889 = Fp(x9885.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9890 = x9889 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][168 * steps + cycle] = x9890;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9891 = Fp(x9885.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9892 = x9891 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][169 * steps + cycle] = x9892;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9893 = Fp(x9885.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9894 = x9893 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][170 * steps + cycle] = x9894;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9895 = Fp(x9885.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9896 = x9895 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][171 * steps + cycle] = x9896;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9897 = Fp(x9885.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9898 = x9897 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][172 * steps + cycle] = x9898;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9899 = Fp(x9885.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9900 = x9899 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][173 * steps + cycle] = x9900;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9901 = Fp(x9885.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9902 = x9901 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][174 * steps + cycle] = x9902;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9903 = Fp(x9885.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9904 = x9903 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][175 * steps + cycle] = x9904;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9905 = Fp(x9885.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9906 = x9905 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][176 * steps + cycle] = x9906;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9907 = Fp(x9885.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9908 = x9907 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][177 * steps + cycle] = x9908;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9909 = Fp(x9885.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9910 = x9909 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][178 * steps + cycle] = x9910;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9911 = Fp(x9885.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9912 = x9911 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][179 * steps + cycle] = x9912;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9913 = Fp(x9885.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9914 = x9913 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][180 * steps + cycle] = x9914;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9915 = Fp(x9885.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x9916 = x9915 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][181 * steps + cycle] = x9916;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9917(args[2][166 * steps + ((cycle - 0) & mask)]);
        assert(x9917 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9918(args[2][167 * steps + ((cycle - 0) & mask)]);
        assert(x9918 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9919 = x9918 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9920 = Fp(x9917) + Fp(x9919);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9921(args[2][168 * steps + ((cycle - 0) & mask)]);
        assert(x9921 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9922 = x9921 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9923 = Fp(x9920) + Fp(x9922);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9924(args[2][169 * steps + ((cycle - 0) & mask)]);
        assert(x9924 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9925 = x9924 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9926 = Fp(x9923) + Fp(x9925);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9927(args[2][170 * steps + ((cycle - 0) & mask)]);
        assert(x9927 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9928 = x9927 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9929 = Fp(x9926) + Fp(x9928);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9930(args[2][171 * steps + ((cycle - 0) & mask)]);
        assert(x9930 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9931 = x9930 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9932 = Fp(x9929) + Fp(x9931);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9933(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x9933 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9934 = x9933 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9935 = Fp(x9932) + Fp(x9934);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9936(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x9936 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9937 = x9936 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9938 = Fp(x9935) + Fp(x9937);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9939(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x9939 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9940 = x9939 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9941 = Fp(x9938) + Fp(x9940);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9942(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x9942 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9943 = x9942 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9944 = Fp(x9941) + Fp(x9943);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9945(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x9945 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9946 = x9945 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9947 = Fp(x9944) + Fp(x9946);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9948(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x9948 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9949 = x9948 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9950 = Fp(x9947) + Fp(x9949);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9951(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x9951 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9952 = x9951 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9953 = Fp(x9950) + Fp(x9952);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9954(args[2][179 * steps + ((cycle - 0) & mask)]);
        assert(x9954 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9955 = x9954 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9956 = Fp(x9953) + Fp(x9955);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9957(args[2][180 * steps + ((cycle - 0) & mask)]);
        assert(x9957 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9958 = x9957 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9959 = Fp(x9956) + Fp(x9958);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9960(args[2][181 * steps + ((cycle - 0) & mask)]);
        assert(x9960 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x9961 = x9960 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x9962 = Fp(x9959) + Fp(x9961);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9963 = x9885 - x9962;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x9964 = x9963 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x9965 = Fp(x9964.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][77 * steps + cycle] = x9965;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9966(args[2][77 * steps + ((cycle - 0) & mask)]);
        assert(x9966 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x9967 = x9964 - x9966;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        Fp x9968 = x9967 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x9969 = x95 - x9968;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        Fp x9970 = x9968 * x9969;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x9970 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9971(args[2][182 * steps + ((cycle - 4) & mask)]);
        assert(x9971 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9972(args[2][183 * steps + ((cycle - 4) & mask)]);
        assert(x9972 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9973(args[2][184 * steps + ((cycle - 4) & mask)]);
        assert(x9973 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9974(args[2][185 * steps + ((cycle - 4) & mask)]);
        assert(x9974 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9975(args[2][186 * steps + ((cycle - 4) & mask)]);
        assert(x9975 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9976(args[2][187 * steps + ((cycle - 4) & mask)]);
        assert(x9976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9977(args[2][188 * steps + ((cycle - 4) & mask)]);
        assert(x9977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9978(args[2][189 * steps + ((cycle - 4) & mask)]);
        assert(x9978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9979(args[2][190 * steps + ((cycle - 4) & mask)]);
        assert(x9979 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9980(args[2][191 * steps + ((cycle - 4) & mask)]);
        assert(x9980 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9981(args[2][192 * steps + ((cycle - 4) & mask)]);
        assert(x9981 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9982(args[2][193 * steps + ((cycle - 4) & mask)]);
        assert(x9982 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9983(args[2][194 * steps + ((cycle - 4) & mask)]);
        assert(x9983 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9984(args[2][195 * steps + ((cycle - 4) & mask)]);
        assert(x9984 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9985(args[2][196 * steps + ((cycle - 4) & mask)]);
        assert(x9985 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9986(args[2][197 * steps + ((cycle - 4) & mask)]);
        assert(x9986 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9987(args[2][198 * steps + ((cycle - 4) & mask)]);
        assert(x9987 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9988(args[2][199 * steps + ((cycle - 4) & mask)]);
        assert(x9988 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9989(args[2][200 * steps + ((cycle - 4) & mask)]);
        assert(x9989 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9990(args[2][201 * steps + ((cycle - 4) & mask)]);
        assert(x9990 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9991(args[2][202 * steps + ((cycle - 4) & mask)]);
        assert(x9991 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9992(args[2][203 * steps + ((cycle - 4) & mask)]);
        assert(x9992 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9993(args[2][204 * steps + ((cycle - 4) & mask)]);
        assert(x9993 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9994(args[2][205 * steps + ((cycle - 4) & mask)]);
        assert(x9994 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9995(args[2][206 * steps + ((cycle - 4) & mask)]);
        assert(x9995 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9996(args[2][207 * steps + ((cycle - 4) & mask)]);
        assert(x9996 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9997(args[2][208 * steps + ((cycle - 4) & mask)]);
        assert(x9997 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9998(args[2][209 * steps + ((cycle - 4) & mask)]);
        assert(x9998 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x9999(args[2][210 * steps + ((cycle - 4) & mask)]);
        assert(x9999 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10000(args[2][211 * steps + ((cycle - 4) & mask)]);
        assert(x10000 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10001(args[2][212 * steps + ((cycle - 4) & mask)]);
        assert(x10001 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10002(args[2][213 * steps + ((cycle - 4) & mask)]);
        assert(x10002 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10003 = x9972 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10004 = Fp(x9971) + Fp(x10003);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10005 = x9973 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10006 = Fp(x10004) + Fp(x10005);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10007 = x9974 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10008 = Fp(x10006) + Fp(x10007);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10009 = x9975 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10010 = Fp(x10008) + Fp(x10009);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10011 = x9976 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10012 = Fp(x10010) + Fp(x10011);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10013 = x9977 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10014 = Fp(x10012) + Fp(x10013);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10015 = x9978 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10016 = Fp(x10014) + Fp(x10015);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10017 = x9979 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10018 = Fp(x10016) + Fp(x10017);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10019 = x9980 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10020 = Fp(x10018) + Fp(x10019);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10021 = x9981 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10022 = Fp(x10020) + Fp(x10021);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10023 = x9982 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10024 = Fp(x10022) + Fp(x10023);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10025 = x9983 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10026 = Fp(x10024) + Fp(x10025);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10027 = x9984 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10028 = Fp(x10026) + Fp(x10027);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10029 = x9985 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10030 = Fp(x10028) + Fp(x10029);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10031 = x9986 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10032 = Fp(x10030) + Fp(x10031);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10033 = x9988 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10034 = Fp(x9987) + Fp(x10033);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10035 = x9989 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10036 = Fp(x10034) + Fp(x10035);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10037 = x9990 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10038 = Fp(x10036) + Fp(x10037);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10039 = x9991 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10040 = Fp(x10038) + Fp(x10039);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10041 = x9992 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10042 = Fp(x10040) + Fp(x10041);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10043 = x9993 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10044 = Fp(x10042) + Fp(x10043);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10045 = x9994 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10046 = Fp(x10044) + Fp(x10045);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10047 = x9995 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10048 = Fp(x10046) + Fp(x10047);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10049 = x9996 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10050 = Fp(x10048) + Fp(x10049);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10051 = x9997 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10052 = Fp(x10050) + Fp(x10051);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10053 = x9998 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10054 = Fp(x10052) + Fp(x10053);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10055 = x9999 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10056 = Fp(x10054) + Fp(x10055);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10057 = x10000 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10058 = Fp(x10056) + Fp(x10057);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10059 = x10001 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10060 = Fp(x10058) + Fp(x10059);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10061 = x10002 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10062 = Fp(x10060) + Fp(x10061);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10063(args[2][182 * steps + ((cycle - 68) & mask)]);
        assert(x10063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10064(args[2][183 * steps + ((cycle - 68) & mask)]);
        assert(x10064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10065(args[2][184 * steps + ((cycle - 68) & mask)]);
        assert(x10065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10066(args[2][185 * steps + ((cycle - 68) & mask)]);
        assert(x10066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10067(args[2][186 * steps + ((cycle - 68) & mask)]);
        assert(x10067 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10068(args[2][187 * steps + ((cycle - 68) & mask)]);
        assert(x10068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10069(args[2][188 * steps + ((cycle - 68) & mask)]);
        assert(x10069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10070(args[2][189 * steps + ((cycle - 68) & mask)]);
        assert(x10070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10071(args[2][190 * steps + ((cycle - 68) & mask)]);
        assert(x10071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10072(args[2][191 * steps + ((cycle - 68) & mask)]);
        assert(x10072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10073(args[2][192 * steps + ((cycle - 68) & mask)]);
        assert(x10073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10074(args[2][193 * steps + ((cycle - 68) & mask)]);
        assert(x10074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10075(args[2][194 * steps + ((cycle - 68) & mask)]);
        assert(x10075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10076(args[2][195 * steps + ((cycle - 68) & mask)]);
        assert(x10076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10077(args[2][196 * steps + ((cycle - 68) & mask)]);
        assert(x10077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10078(args[2][197 * steps + ((cycle - 68) & mask)]);
        assert(x10078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10079(args[2][198 * steps + ((cycle - 68) & mask)]);
        assert(x10079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10080(args[2][199 * steps + ((cycle - 68) & mask)]);
        assert(x10080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10081(args[2][200 * steps + ((cycle - 68) & mask)]);
        assert(x10081 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10082(args[2][201 * steps + ((cycle - 68) & mask)]);
        assert(x10082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10083(args[2][202 * steps + ((cycle - 68) & mask)]);
        assert(x10083 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10084(args[2][203 * steps + ((cycle - 68) & mask)]);
        assert(x10084 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10085(args[2][204 * steps + ((cycle - 68) & mask)]);
        assert(x10085 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10086(args[2][205 * steps + ((cycle - 68) & mask)]);
        assert(x10086 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10087(args[2][206 * steps + ((cycle - 68) & mask)]);
        assert(x10087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10088(args[2][207 * steps + ((cycle - 68) & mask)]);
        assert(x10088 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10089(args[2][208 * steps + ((cycle - 68) & mask)]);
        assert(x10089 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10090(args[2][209 * steps + ((cycle - 68) & mask)]);
        assert(x10090 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10091(args[2][210 * steps + ((cycle - 68) & mask)]);
        assert(x10091 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10092(args[2][211 * steps + ((cycle - 68) & mask)]);
        assert(x10092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10093(args[2][212 * steps + ((cycle - 68) & mask)]);
        assert(x10093 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10094(args[2][213 * steps + ((cycle - 68) & mask)]);
        assert(x10094 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10095 = x10064 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10096 = Fp(x10063) + Fp(x10095);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10097 = x10065 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10098 = Fp(x10096) + Fp(x10097);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10099 = x10066 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10100 = Fp(x10098) + Fp(x10099);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10101 = x10067 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10102 = Fp(x10100) + Fp(x10101);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10103 = x10068 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10104 = Fp(x10102) + Fp(x10103);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10105 = x10069 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10106 = Fp(x10104) + Fp(x10105);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10107 = x10070 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10108 = Fp(x10106) + Fp(x10107);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10109 = x10071 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10110 = Fp(x10108) + Fp(x10109);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10111 = x10072 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10112 = Fp(x10110) + Fp(x10111);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10113 = x10073 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10114 = Fp(x10112) + Fp(x10113);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10115 = x10074 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10116 = Fp(x10114) + Fp(x10115);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10117 = x10075 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10118 = Fp(x10116) + Fp(x10117);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10119 = x10076 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10120 = Fp(x10118) + Fp(x10119);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10121 = x10077 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10122 = Fp(x10120) + Fp(x10121);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10123 = x10078 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10124 = Fp(x10122) + Fp(x10123);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10125 = x10080 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10126 = Fp(x10079) + Fp(x10125);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10127 = x10081 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10128 = Fp(x10126) + Fp(x10127);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10129 = x10082 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10130 = Fp(x10128) + Fp(x10129);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10131 = x10083 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10132 = Fp(x10130) + Fp(x10131);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10133 = x10084 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10134 = Fp(x10132) + Fp(x10133);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10135 = x10085 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10136 = Fp(x10134) + Fp(x10135);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10137 = x10086 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10138 = Fp(x10136) + Fp(x10137);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10139 = x10087 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10140 = Fp(x10138) + Fp(x10139);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10141 = x10088 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10142 = Fp(x10140) + Fp(x10141);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10143 = x10089 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10144 = Fp(x10142) + Fp(x10143);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10145 = x10090 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10146 = Fp(x10144) + Fp(x10145);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10147 = x10091 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10148 = Fp(x10146) + Fp(x10147);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10149 = x10092 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10150 = Fp(x10148) + Fp(x10149);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10151 = x10093 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10152 = Fp(x10150) + Fp(x10151);
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        Fp x10153 = x10094 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        Fp x10154 = Fp(x10152) + Fp(x10153);
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        Fp x10155 = Fp(x10032) + Fp(x10124);
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        Fp x10156 = Fp(x10062) + Fp(x10154);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10157 = Fp(x10155.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][182 * steps + cycle] = x10157;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10158 = Fp(x10155.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10159 = x10158 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][183 * steps + cycle] = x10159;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10160 = Fp(x10155.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10161 = x10160 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][184 * steps + cycle] = x10161;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10162 = Fp(x10155.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10163 = x10162 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][185 * steps + cycle] = x10163;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10164 = Fp(x10155.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10165 = x10164 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][186 * steps + cycle] = x10165;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10166 = Fp(x10155.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10167 = x10166 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][187 * steps + cycle] = x10167;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10168 = Fp(x10155.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10169 = x10168 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][188 * steps + cycle] = x10169;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10170 = Fp(x10155.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10171 = x10170 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][189 * steps + cycle] = x10171;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10172 = Fp(x10155.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10173 = x10172 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][190 * steps + cycle] = x10173;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10174 = Fp(x10155.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10175 = x10174 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][191 * steps + cycle] = x10175;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10176 = Fp(x10155.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10177 = x10176 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][192 * steps + cycle] = x10177;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10178 = Fp(x10155.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10179 = x10178 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][193 * steps + cycle] = x10179;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10180 = Fp(x10155.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10181 = x10180 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][194 * steps + cycle] = x10181;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10182 = Fp(x10155.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10183 = x10182 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][195 * steps + cycle] = x10183;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10184 = Fp(x10155.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10185 = x10184 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][196 * steps + cycle] = x10185;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10186 = Fp(x10155.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10187 = x10186 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][197 * steps + cycle] = x10187;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10188(args[2][182 * steps + ((cycle - 0) & mask)]);
        assert(x10188 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10189(args[2][183 * steps + ((cycle - 0) & mask)]);
        assert(x10189 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10190 = x10189 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10191 = Fp(x10188) + Fp(x10190);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10192(args[2][184 * steps + ((cycle - 0) & mask)]);
        assert(x10192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10193 = x10192 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10194 = Fp(x10191) + Fp(x10193);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10195(args[2][185 * steps + ((cycle - 0) & mask)]);
        assert(x10195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10196 = x10195 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10197 = Fp(x10194) + Fp(x10196);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10198(args[2][186 * steps + ((cycle - 0) & mask)]);
        assert(x10198 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10199 = x10198 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10200 = Fp(x10197) + Fp(x10199);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10201(args[2][187 * steps + ((cycle - 0) & mask)]);
        assert(x10201 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10202 = x10201 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10203 = Fp(x10200) + Fp(x10202);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10204(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x10204 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10205 = x10204 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10206 = Fp(x10203) + Fp(x10205);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10207(args[2][189 * steps + ((cycle - 0) & mask)]);
        assert(x10207 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10208 = x10207 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10209 = Fp(x10206) + Fp(x10208);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10210(args[2][190 * steps + ((cycle - 0) & mask)]);
        assert(x10210 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10211 = x10210 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10212 = Fp(x10209) + Fp(x10211);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10213(args[2][191 * steps + ((cycle - 0) & mask)]);
        assert(x10213 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10214 = x10213 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10215 = Fp(x10212) + Fp(x10214);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10216(args[2][192 * steps + ((cycle - 0) & mask)]);
        assert(x10216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10217 = x10216 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10218 = Fp(x10215) + Fp(x10217);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10219(args[2][193 * steps + ((cycle - 0) & mask)]);
        assert(x10219 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10220 = x10219 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10221 = Fp(x10218) + Fp(x10220);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10222(args[2][194 * steps + ((cycle - 0) & mask)]);
        assert(x10222 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10223 = x10222 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10224 = Fp(x10221) + Fp(x10223);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10225(args[2][195 * steps + ((cycle - 0) & mask)]);
        assert(x10225 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10226 = x10225 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10227 = Fp(x10224) + Fp(x10226);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10228(args[2][196 * steps + ((cycle - 0) & mask)]);
        assert(x10228 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10229 = x10228 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10230 = Fp(x10227) + Fp(x10229);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10231(args[2][197 * steps + ((cycle - 0) & mask)]);
        assert(x10231 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10232 = x10231 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10233 = Fp(x10230) + Fp(x10232);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10234 = x10155 - x10233;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x10235 = x10234 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10236 = Fp(x10235.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][78 * steps + cycle] = x10236;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10237(args[2][78 * steps + ((cycle - 0) & mask)]);
        assert(x10237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10238 = x10235 - x10237;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        Fp x10239 = x10238 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10240 = x95 - x10239;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        Fp x10241 = x10239 * x10240;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10241 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        Fp x10242 = Fp(x10156) + Fp(x10235);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10243 = Fp(x10242.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][198 * steps + cycle] = x10243;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10244 = Fp(x10242.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10245 = x10244 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][199 * steps + cycle] = x10245;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10246 = Fp(x10242.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10247 = x10246 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][200 * steps + cycle] = x10247;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10248 = Fp(x10242.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10249 = x10248 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][201 * steps + cycle] = x10249;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10250 = Fp(x10242.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10251 = x10250 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][202 * steps + cycle] = x10251;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10252 = Fp(x10242.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10253 = x10252 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][203 * steps + cycle] = x10253;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10254 = Fp(x10242.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10255 = x10254 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][204 * steps + cycle] = x10255;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10256 = Fp(x10242.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10257 = x10256 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][205 * steps + cycle] = x10257;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10258 = Fp(x10242.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10259 = x10258 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][206 * steps + cycle] = x10259;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10260 = Fp(x10242.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10261 = x10260 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][207 * steps + cycle] = x10261;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10262 = Fp(x10242.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10263 = x10262 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][208 * steps + cycle] = x10263;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10264 = Fp(x10242.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10265 = x10264 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][209 * steps + cycle] = x10265;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10266 = Fp(x10242.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10267 = x10266 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][210 * steps + cycle] = x10267;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10268 = Fp(x10242.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10269 = x10268 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][211 * steps + cycle] = x10269;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10270 = Fp(x10242.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10271 = x10270 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][212 * steps + cycle] = x10271;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10272 = Fp(x10242.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x10273 = x10272 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][213 * steps + cycle] = x10273;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10274(args[2][198 * steps + ((cycle - 0) & mask)]);
        assert(x10274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10275(args[2][199 * steps + ((cycle - 0) & mask)]);
        assert(x10275 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10276 = x10275 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10277 = Fp(x10274) + Fp(x10276);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10278(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x10278 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10279 = x10278 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10280 = Fp(x10277) + Fp(x10279);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10281(args[2][201 * steps + ((cycle - 0) & mask)]);
        assert(x10281 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10282 = x10281 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10283 = Fp(x10280) + Fp(x10282);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10284(args[2][202 * steps + ((cycle - 0) & mask)]);
        assert(x10284 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10285 = x10284 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10286 = Fp(x10283) + Fp(x10285);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10287(args[2][203 * steps + ((cycle - 0) & mask)]);
        assert(x10287 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10288 = x10287 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10289 = Fp(x10286) + Fp(x10288);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10290(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x10290 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10291 = x10290 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10292 = Fp(x10289) + Fp(x10291);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10293(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x10293 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10294 = x10293 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10295 = Fp(x10292) + Fp(x10294);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10296(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x10296 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10297 = x10296 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10298 = Fp(x10295) + Fp(x10297);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10299(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x10299 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10300 = x10299 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10301 = Fp(x10298) + Fp(x10300);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10302(args[2][208 * steps + ((cycle - 0) & mask)]);
        assert(x10302 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10303 = x10302 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10304 = Fp(x10301) + Fp(x10303);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10305(args[2][209 * steps + ((cycle - 0) & mask)]);
        assert(x10305 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10306 = x10305 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10307 = Fp(x10304) + Fp(x10306);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10308(args[2][210 * steps + ((cycle - 0) & mask)]);
        assert(x10308 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10309 = x10308 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10310 = Fp(x10307) + Fp(x10309);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10311(args[2][211 * steps + ((cycle - 0) & mask)]);
        assert(x10311 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10312 = x10311 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10313 = Fp(x10310) + Fp(x10312);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10314(args[2][212 * steps + ((cycle - 0) & mask)]);
        assert(x10314 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10315 = x10314 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10316 = Fp(x10313) + Fp(x10315);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10317(args[2][213 * steps + ((cycle - 0) & mask)]);
        assert(x10317 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x10318 = x10317 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x10319 = Fp(x10316) + Fp(x10318);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10320 = x10242 - x10319;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x10321 = x10320 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10322 = Fp(x10321.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][79 * steps + cycle] = x10322;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x10323(args[2][79 * steps + ((cycle - 0) & mask)]);
        assert(x10323 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10324 = x10321 - x10323;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        Fp x10325 = x10324 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10326 = x95 - x10325;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        Fp x10327 = x10325 * x10326;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10327 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10328(args[2][143 * steps + ((cycle - 0) & mask)]);
      assert(x10328 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":399:17)
      auto x10329 = x95 - x10328;
      if (x8504 != 0) {
        if (x10328 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
          Fp x10330(args[2][131 * steps + ((cycle - 0) & mask)]);
          assert(x10330 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":403:26)
          Fp x10331 = Fp(x10330) + Fp(x8488);
          {
            host_args.at(0) = x10331;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x10332(host_outs.at(0));
            Fp x10333(host_outs.at(1));
            Fp x10334(host_outs.at(2));
            Fp x10335(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][111 * steps + cycle] = x10332;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][112 * steps + cycle] = x10333;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][113 * steps + cycle] = x10334;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][114 * steps + cycle] = x10335;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10336(args[2][111 * steps + ((cycle - 0) & mask)]);
          assert(x10336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10337(args[2][112 * steps + ((cycle - 0) & mask)]);
          assert(x10337 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10338(args[2][113 * steps + ((cycle - 0) & mask)]);
          assert(x10338 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10339(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x10339 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][108 * steps + cycle] = x10331;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][109 * steps + cycle] = x8476;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][110 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x10336;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x10337;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x10338;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x10339;
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          Fp x10340 = Fp(x10330) + Fp(x78);
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          Fp x10341 = Fp(x10340) + Fp(x8488);
          {
            host_args.at(0) = x10341;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x10342(host_outs.at(0));
            Fp x10343(host_outs.at(1));
            Fp x10344(host_outs.at(2));
            Fp x10345(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][118 * steps + cycle] = x10342;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][119 * steps + cycle] = x10343;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][120 * steps + cycle] = x10344;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][121 * steps + cycle] = x10345;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10346(args[2][118 * steps + ((cycle - 0) & mask)]);
          assert(x10346 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10347(args[2][119 * steps + ((cycle - 0) & mask)]);
          assert(x10347 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10348(args[2][120 * steps + ((cycle - 0) & mask)]);
          assert(x10348 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10349(args[2][121 * steps + ((cycle - 0) & mask)]);
          assert(x10349 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][115 * steps + cycle] = x10341;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][116 * steps + cycle] = x8476;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][117 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][118 * steps + cycle] = x10346;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][119 * steps + cycle] = x10347;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][120 * steps + cycle] = x10348;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][121 * steps + cycle] = x10349;
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          Fp x10350(args[2][108 * steps + ((cycle - 0) & mask)]);
          assert(x10350 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":405:39)
          Fp x10351 = x10350 * x78;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10352(args[2][150 * steps + ((cycle - 0) & mask)]);
          assert(x10352 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10353(args[2][158 * steps + ((cycle - 0) & mask)]);
          assert(x10353 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10354(args[2][166 * steps + ((cycle - 0) & mask)]);
          assert(x10354 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10355(args[2][174 * steps + ((cycle - 0) & mask)]);
          assert(x10355 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10356(args[2][151 * steps + ((cycle - 0) & mask)]);
          assert(x10356 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10357 = x10356 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10358 = Fp(x10352) + Fp(x10357);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10359(args[2][159 * steps + ((cycle - 0) & mask)]);
          assert(x10359 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10360 = x10359 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10361 = Fp(x10353) + Fp(x10360);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10362(args[2][167 * steps + ((cycle - 0) & mask)]);
          assert(x10362 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10363 = x10362 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10364 = Fp(x10354) + Fp(x10363);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10365(args[2][175 * steps + ((cycle - 0) & mask)]);
          assert(x10365 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10366 = x10365 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10367 = Fp(x10355) + Fp(x10366);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10368(args[2][152 * steps + ((cycle - 0) & mask)]);
          assert(x10368 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10369 = x10368 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10370 = Fp(x10358) + Fp(x10369);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10371(args[2][160 * steps + ((cycle - 0) & mask)]);
          assert(x10371 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10372 = x10371 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10373 = Fp(x10361) + Fp(x10372);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10374(args[2][168 * steps + ((cycle - 0) & mask)]);
          assert(x10374 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10375 = x10374 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10376 = Fp(x10364) + Fp(x10375);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10377(args[2][176 * steps + ((cycle - 0) & mask)]);
          assert(x10377 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10378 = x10377 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10379 = Fp(x10367) + Fp(x10378);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10380(args[2][153 * steps + ((cycle - 0) & mask)]);
          assert(x10380 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10381 = x10380 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10382 = Fp(x10370) + Fp(x10381);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10383(args[2][161 * steps + ((cycle - 0) & mask)]);
          assert(x10383 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10384 = x10383 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10385 = Fp(x10373) + Fp(x10384);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10386(args[2][169 * steps + ((cycle - 0) & mask)]);
          assert(x10386 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10387 = x10386 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10388 = Fp(x10376) + Fp(x10387);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10389(args[2][177 * steps + ((cycle - 0) & mask)]);
          assert(x10389 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10390 = x10389 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10391 = Fp(x10379) + Fp(x10390);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10392(args[2][154 * steps + ((cycle - 0) & mask)]);
          assert(x10392 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10393 = x10392 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10394 = Fp(x10382) + Fp(x10393);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10395(args[2][162 * steps + ((cycle - 0) & mask)]);
          assert(x10395 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10396 = x10395 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10397 = Fp(x10385) + Fp(x10396);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10398(args[2][170 * steps + ((cycle - 0) & mask)]);
          assert(x10398 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10399 = x10398 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10400 = Fp(x10388) + Fp(x10399);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10401(args[2][178 * steps + ((cycle - 0) & mask)]);
          assert(x10401 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10402 = x10401 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10403 = Fp(x10391) + Fp(x10402);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10404(args[2][155 * steps + ((cycle - 0) & mask)]);
          assert(x10404 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10405 = x10404 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10406 = Fp(x10394) + Fp(x10405);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10407(args[2][163 * steps + ((cycle - 0) & mask)]);
          assert(x10407 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10408 = x10407 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10409 = Fp(x10397) + Fp(x10408);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10410(args[2][171 * steps + ((cycle - 0) & mask)]);
          assert(x10410 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10411 = x10410 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10412 = Fp(x10400) + Fp(x10411);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10413(args[2][179 * steps + ((cycle - 0) & mask)]);
          assert(x10413 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10414 = x10413 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10415 = Fp(x10403) + Fp(x10414);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10416(args[2][156 * steps + ((cycle - 0) & mask)]);
          assert(x10416 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10417 = x10416 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10418 = Fp(x10406) + Fp(x10417);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10419(args[2][164 * steps + ((cycle - 0) & mask)]);
          assert(x10419 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10420 = x10419 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10421 = Fp(x10409) + Fp(x10420);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10422(args[2][172 * steps + ((cycle - 0) & mask)]);
          assert(x10422 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10423 = x10422 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10424 = Fp(x10412) + Fp(x10423);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10425(args[2][180 * steps + ((cycle - 0) & mask)]);
          assert(x10425 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10426 = x10425 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10427 = Fp(x10415) + Fp(x10426);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10428(args[2][157 * steps + ((cycle - 0) & mask)]);
          assert(x10428 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10429 = x10428 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10430 = Fp(x10418) + Fp(x10429);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10431(args[2][165 * steps + ((cycle - 0) & mask)]);
          assert(x10431 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10432 = x10431 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10433 = Fp(x10421) + Fp(x10432);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10434(args[2][173 * steps + ((cycle - 0) & mask)]);
          assert(x10434 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10435 = x10434 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10436 = Fp(x10424) + Fp(x10435);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10437(args[2][181 * steps + ((cycle - 0) & mask)]);
          assert(x10437 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10438 = x10437 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10439 = Fp(x10427) + Fp(x10438);
          host_args.at(0) = x10351;
          host_args.at(1) = x10336;
          host_args.at(2) = x10337;
          host_args.at(3) = x10338;
          host_args.at(4) = x10339;
          host_args.at(5) = x10439;
          host_args.at(6) = x10436;
          host_args.at(7) = x10433;
          host_args.at(8) = x10430;
          host(ctx, "log", "  io0: [0x%x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":137:10))
          Fp x10440(args[2][115 * steps + ((cycle - 0) & mask)]);
          assert(x10440 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:39)
          Fp x10441 = x10440 * x78;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10442(args[2][182 * steps + ((cycle - 0) & mask)]);
          assert(x10442 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10443(args[2][190 * steps + ((cycle - 0) & mask)]);
          assert(x10443 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10444(args[2][198 * steps + ((cycle - 0) & mask)]);
          assert(x10444 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10445(args[2][206 * steps + ((cycle - 0) & mask)]);
          assert(x10445 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10446(args[2][183 * steps + ((cycle - 0) & mask)]);
          assert(x10446 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10447 = x10446 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10448 = Fp(x10442) + Fp(x10447);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10449(args[2][191 * steps + ((cycle - 0) & mask)]);
          assert(x10449 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10450 = x10449 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10451 = Fp(x10443) + Fp(x10450);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10452(args[2][199 * steps + ((cycle - 0) & mask)]);
          assert(x10452 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10453 = x10452 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10454 = Fp(x10444) + Fp(x10453);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10455(args[2][207 * steps + ((cycle - 0) & mask)]);
          assert(x10455 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10456 = x10455 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10457 = Fp(x10445) + Fp(x10456);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10458(args[2][184 * steps + ((cycle - 0) & mask)]);
          assert(x10458 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10459 = x10458 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10460 = Fp(x10448) + Fp(x10459);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10461(args[2][192 * steps + ((cycle - 0) & mask)]);
          assert(x10461 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10462 = x10461 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10463 = Fp(x10451) + Fp(x10462);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10464(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x10464 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10465 = x10464 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10466 = Fp(x10454) + Fp(x10465);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10467(args[2][208 * steps + ((cycle - 0) & mask)]);
          assert(x10467 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10468 = x10467 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10469 = Fp(x10457) + Fp(x10468);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10470(args[2][185 * steps + ((cycle - 0) & mask)]);
          assert(x10470 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10471 = x10470 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10472 = Fp(x10460) + Fp(x10471);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10473(args[2][193 * steps + ((cycle - 0) & mask)]);
          assert(x10473 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10474 = x10473 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10475 = Fp(x10463) + Fp(x10474);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10476(args[2][201 * steps + ((cycle - 0) & mask)]);
          assert(x10476 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10477 = x10476 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10478 = Fp(x10466) + Fp(x10477);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10479(args[2][209 * steps + ((cycle - 0) & mask)]);
          assert(x10479 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10480 = x10479 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10481 = Fp(x10469) + Fp(x10480);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10482(args[2][186 * steps + ((cycle - 0) & mask)]);
          assert(x10482 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10483 = x10482 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10484 = Fp(x10472) + Fp(x10483);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10485(args[2][194 * steps + ((cycle - 0) & mask)]);
          assert(x10485 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10486 = x10485 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10487 = Fp(x10475) + Fp(x10486);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10488(args[2][202 * steps + ((cycle - 0) & mask)]);
          assert(x10488 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10489 = x10488 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10490 = Fp(x10478) + Fp(x10489);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10491(args[2][210 * steps + ((cycle - 0) & mask)]);
          assert(x10491 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10492 = x10491 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10493 = Fp(x10481) + Fp(x10492);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10494(args[2][187 * steps + ((cycle - 0) & mask)]);
          assert(x10494 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10495 = x10494 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10496 = Fp(x10484) + Fp(x10495);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10497(args[2][195 * steps + ((cycle - 0) & mask)]);
          assert(x10497 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10498 = x10497 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10499 = Fp(x10487) + Fp(x10498);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10500(args[2][203 * steps + ((cycle - 0) & mask)]);
          assert(x10500 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10501 = x10500 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10502 = Fp(x10490) + Fp(x10501);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10503(args[2][211 * steps + ((cycle - 0) & mask)]);
          assert(x10503 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10504 = x10503 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10505 = Fp(x10493) + Fp(x10504);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10506(args[2][188 * steps + ((cycle - 0) & mask)]);
          assert(x10506 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10507 = x10506 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10508 = Fp(x10496) + Fp(x10507);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10509(args[2][196 * steps + ((cycle - 0) & mask)]);
          assert(x10509 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10510 = x10509 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10511 = Fp(x10499) + Fp(x10510);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10512(args[2][204 * steps + ((cycle - 0) & mask)]);
          assert(x10512 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10513 = x10512 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10514 = Fp(x10502) + Fp(x10513);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10515(args[2][212 * steps + ((cycle - 0) & mask)]);
          assert(x10515 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10516 = x10515 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10517 = Fp(x10505) + Fp(x10516);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10518(args[2][189 * steps + ((cycle - 0) & mask)]);
          assert(x10518 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10519 = x10518 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10520 = Fp(x10508) + Fp(x10519);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10521(args[2][197 * steps + ((cycle - 0) & mask)]);
          assert(x10521 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10522 = x10521 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10523 = Fp(x10511) + Fp(x10522);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10524(args[2][205 * steps + ((cycle - 0) & mask)]);
          assert(x10524 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10525 = x10524 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10526 = Fp(x10514) + Fp(x10525);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10527(args[2][213 * steps + ((cycle - 0) & mask)]);
          assert(x10527 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10528 = x10527 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10529 = Fp(x10517) + Fp(x10528);
          host_args.at(0) = x10441;
          host_args.at(1) = x10346;
          host_args.at(2) = x10347;
          host_args.at(3) = x10348;
          host_args.at(4) = x10349;
          host_args.at(5) = x10529;
          host_args.at(6) = x10526;
          host_args.at(7) = x10523;
          host_args.at(8) = x10520;
          host(ctx, "log", "  io1: [0x%x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          Fp x10530 = x10337 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10531 = Fp(x10336) + Fp(x10530);
          // loc("./cirgen/components/u32.h":26:12)
          Fp x10532 = x10338 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10533 = Fp(x10531) + Fp(x10532);
          // loc("./cirgen/components/u32.h":27:12)
          Fp x10534 = x10339 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10535 = Fp(x10533) + Fp(x10534);
          // loc("./cirgen/components/u32.h":25:12)
          Fp x10536 = x10436 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10537 = Fp(x10439) + Fp(x10536);
          // loc("./cirgen/components/u32.h":26:12)
          Fp x10538 = x10433 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10539 = Fp(x10537) + Fp(x10538);
          // loc("./cirgen/components/u32.h":27:12)
          Fp x10540 = x10430 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10541 = Fp(x10539) + Fp(x10540);
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          auto x10542 = x10535 - x10541;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          if (x10542 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:407");
          // loc("./cirgen/components/u32.h":25:12)
          Fp x10543 = x10347 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10544 = Fp(x10346) + Fp(x10543);
          // loc("./cirgen/components/u32.h":26:12)
          Fp x10545 = x10348 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10546 = Fp(x10544) + Fp(x10545);
          // loc("./cirgen/components/u32.h":27:12)
          Fp x10547 = x10349 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10548 = Fp(x10546) + Fp(x10547);
          // loc("./cirgen/components/u32.h":25:12)
          Fp x10549 = x10526 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10550 = Fp(x10529) + Fp(x10549);
          // loc("./cirgen/components/u32.h":26:12)
          Fp x10551 = x10523 * x80;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10552 = Fp(x10550) + Fp(x10551);
          // loc("./cirgen/components/u32.h":27:12)
          Fp x10553 = x10520 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          Fp x10554 = Fp(x10552) + Fp(x10553);
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          auto x10555 = x10548 - x10554;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          if (x10555 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:408");
        }
        if (x10329 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
          Fp x10556(args[2][131 * steps + ((cycle - 0) & mask)]);
          assert(x10556 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":411:27)
          Fp x10557 = Fp(x10556) + Fp(x8488);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10558(args[2][150 * steps + ((cycle - 0) & mask)]);
          assert(x10558 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10559(args[2][158 * steps + ((cycle - 0) & mask)]);
          assert(x10559 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10560(args[2][166 * steps + ((cycle - 0) & mask)]);
          assert(x10560 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10561(args[2][174 * steps + ((cycle - 0) & mask)]);
          assert(x10561 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10562(args[2][151 * steps + ((cycle - 0) & mask)]);
          assert(x10562 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10563 = x10562 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10564 = Fp(x10558) + Fp(x10563);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10565(args[2][159 * steps + ((cycle - 0) & mask)]);
          assert(x10565 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10566 = x10565 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10567 = Fp(x10559) + Fp(x10566);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10568(args[2][167 * steps + ((cycle - 0) & mask)]);
          assert(x10568 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10569 = x10568 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10570 = Fp(x10560) + Fp(x10569);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10571(args[2][175 * steps + ((cycle - 0) & mask)]);
          assert(x10571 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10572 = x10571 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10573 = Fp(x10561) + Fp(x10572);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10574(args[2][152 * steps + ((cycle - 0) & mask)]);
          assert(x10574 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10575 = x10574 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10576 = Fp(x10564) + Fp(x10575);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10577(args[2][160 * steps + ((cycle - 0) & mask)]);
          assert(x10577 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10578 = x10577 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10579 = Fp(x10567) + Fp(x10578);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10580(args[2][168 * steps + ((cycle - 0) & mask)]);
          assert(x10580 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10581 = x10580 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10582 = Fp(x10570) + Fp(x10581);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10583(args[2][176 * steps + ((cycle - 0) & mask)]);
          assert(x10583 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10584 = x10583 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10585 = Fp(x10573) + Fp(x10584);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10586(args[2][153 * steps + ((cycle - 0) & mask)]);
          assert(x10586 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10587 = x10586 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10588 = Fp(x10576) + Fp(x10587);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10589(args[2][161 * steps + ((cycle - 0) & mask)]);
          assert(x10589 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10590 = x10589 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10591 = Fp(x10579) + Fp(x10590);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10592(args[2][169 * steps + ((cycle - 0) & mask)]);
          assert(x10592 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10593 = x10592 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10594 = Fp(x10582) + Fp(x10593);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10595(args[2][177 * steps + ((cycle - 0) & mask)]);
          assert(x10595 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10596 = x10595 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10597 = Fp(x10585) + Fp(x10596);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10598(args[2][154 * steps + ((cycle - 0) & mask)]);
          assert(x10598 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10599 = x10598 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10600 = Fp(x10588) + Fp(x10599);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10601(args[2][162 * steps + ((cycle - 0) & mask)]);
          assert(x10601 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10602 = x10601 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10603 = Fp(x10591) + Fp(x10602);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10604(args[2][170 * steps + ((cycle - 0) & mask)]);
          assert(x10604 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10605 = x10604 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10606 = Fp(x10594) + Fp(x10605);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10607(args[2][178 * steps + ((cycle - 0) & mask)]);
          assert(x10607 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10608 = x10607 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10609 = Fp(x10597) + Fp(x10608);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10610(args[2][155 * steps + ((cycle - 0) & mask)]);
          assert(x10610 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10611 = x10610 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10612 = Fp(x10600) + Fp(x10611);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10613(args[2][163 * steps + ((cycle - 0) & mask)]);
          assert(x10613 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10614 = x10613 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10615 = Fp(x10603) + Fp(x10614);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10616(args[2][171 * steps + ((cycle - 0) & mask)]);
          assert(x10616 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10617 = x10616 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10618 = Fp(x10606) + Fp(x10617);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10619(args[2][179 * steps + ((cycle - 0) & mask)]);
          assert(x10619 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10620 = x10619 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10621 = Fp(x10609) + Fp(x10620);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10622(args[2][156 * steps + ((cycle - 0) & mask)]);
          assert(x10622 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10623 = x10622 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10624 = Fp(x10612) + Fp(x10623);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10625(args[2][164 * steps + ((cycle - 0) & mask)]);
          assert(x10625 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10626 = x10625 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10627 = Fp(x10615) + Fp(x10626);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10628(args[2][172 * steps + ((cycle - 0) & mask)]);
          assert(x10628 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10629 = x10628 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10630 = Fp(x10618) + Fp(x10629);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10631(args[2][180 * steps + ((cycle - 0) & mask)]);
          assert(x10631 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10632 = x10631 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10633 = Fp(x10621) + Fp(x10632);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10634(args[2][157 * steps + ((cycle - 0) & mask)]);
          assert(x10634 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10635 = x10634 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10636 = Fp(x10624) + Fp(x10635);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10637(args[2][165 * steps + ((cycle - 0) & mask)]);
          assert(x10637 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10638 = x10637 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10639 = Fp(x10627) + Fp(x10638);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10640(args[2][173 * steps + ((cycle - 0) & mask)]);
          assert(x10640 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10641 = x10640 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10642 = Fp(x10630) + Fp(x10641);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10643(args[2][181 * steps + ((cycle - 0) & mask)]);
          assert(x10643 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10644 = x10643 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10645 = Fp(x10633) + Fp(x10644);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x10645;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x10642;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x10639;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x10636;
          {
            host_args.at(0) = x10557;
            host_args.at(1) = x10645;
            host_args.at(2) = x10642;
            host_args.at(3) = x10639;
            host_args.at(4) = x10636;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10646(args[2][111 * steps + ((cycle - 0) & mask)]);
          assert(x10646 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10647(args[2][112 * steps + ((cycle - 0) & mask)]);
          assert(x10647 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10648(args[2][113 * steps + ((cycle - 0) & mask)]);
          assert(x10648 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10649(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x10649 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][108 * steps + cycle] = x10557;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][109 * steps + cycle] = x8476;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][110 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][111 * steps + cycle] = x10646;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][112 * steps + cycle] = x10647;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][113 * steps + cycle] = x10648;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][114 * steps + cycle] = x10649;
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          Fp x10650 = Fp(x10556) + Fp(x78);
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          Fp x10651 = Fp(x10650) + Fp(x8488);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10652(args[2][182 * steps + ((cycle - 0) & mask)]);
          assert(x10652 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10653(args[2][190 * steps + ((cycle - 0) & mask)]);
          assert(x10653 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10654(args[2][198 * steps + ((cycle - 0) & mask)]);
          assert(x10654 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10655(args[2][206 * steps + ((cycle - 0) & mask)]);
          assert(x10655 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10656(args[2][183 * steps + ((cycle - 0) & mask)]);
          assert(x10656 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10657 = x10656 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10658 = Fp(x10652) + Fp(x10657);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10659(args[2][191 * steps + ((cycle - 0) & mask)]);
          assert(x10659 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10660 = x10659 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10661 = Fp(x10653) + Fp(x10660);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10662(args[2][199 * steps + ((cycle - 0) & mask)]);
          assert(x10662 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10663 = x10662 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10664 = Fp(x10654) + Fp(x10663);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10665(args[2][207 * steps + ((cycle - 0) & mask)]);
          assert(x10665 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10666 = x10665 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10667 = Fp(x10655) + Fp(x10666);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10668(args[2][184 * steps + ((cycle - 0) & mask)]);
          assert(x10668 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10669 = x10668 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10670 = Fp(x10658) + Fp(x10669);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10671(args[2][192 * steps + ((cycle - 0) & mask)]);
          assert(x10671 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10672 = x10671 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10673 = Fp(x10661) + Fp(x10672);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10674(args[2][200 * steps + ((cycle - 0) & mask)]);
          assert(x10674 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10675 = x10674 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10676 = Fp(x10664) + Fp(x10675);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10677(args[2][208 * steps + ((cycle - 0) & mask)]);
          assert(x10677 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10678 = x10677 * x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10679 = Fp(x10667) + Fp(x10678);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10680(args[2][185 * steps + ((cycle - 0) & mask)]);
          assert(x10680 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10681 = x10680 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10682 = Fp(x10670) + Fp(x10681);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10683(args[2][193 * steps + ((cycle - 0) & mask)]);
          assert(x10683 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10684 = x10683 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10685 = Fp(x10673) + Fp(x10684);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10686(args[2][201 * steps + ((cycle - 0) & mask)]);
          assert(x10686 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10687 = x10686 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10688 = Fp(x10676) + Fp(x10687);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10689(args[2][209 * steps + ((cycle - 0) & mask)]);
          assert(x10689 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10690 = x10689 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10691 = Fp(x10679) + Fp(x10690);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10692(args[2][186 * steps + ((cycle - 0) & mask)]);
          assert(x10692 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10693 = x10692 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10694 = Fp(x10682) + Fp(x10693);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10695(args[2][194 * steps + ((cycle - 0) & mask)]);
          assert(x10695 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10696 = x10695 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10697 = Fp(x10685) + Fp(x10696);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10698(args[2][202 * steps + ((cycle - 0) & mask)]);
          assert(x10698 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10699 = x10698 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10700 = Fp(x10688) + Fp(x10699);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10701(args[2][210 * steps + ((cycle - 0) & mask)]);
          assert(x10701 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10702 = x10701 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10703 = Fp(x10691) + Fp(x10702);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10704(args[2][187 * steps + ((cycle - 0) & mask)]);
          assert(x10704 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10705 = x10704 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10706 = Fp(x10694) + Fp(x10705);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10707(args[2][195 * steps + ((cycle - 0) & mask)]);
          assert(x10707 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10708 = x10707 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10709 = Fp(x10697) + Fp(x10708);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10710(args[2][203 * steps + ((cycle - 0) & mask)]);
          assert(x10710 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10711 = x10710 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10712 = Fp(x10700) + Fp(x10711);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10713(args[2][211 * steps + ((cycle - 0) & mask)]);
          assert(x10713 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10714 = x10713 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10715 = Fp(x10703) + Fp(x10714);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10716(args[2][188 * steps + ((cycle - 0) & mask)]);
          assert(x10716 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10717 = x10716 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10718 = Fp(x10706) + Fp(x10717);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10719(args[2][196 * steps + ((cycle - 0) & mask)]);
          assert(x10719 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10720 = x10719 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10721 = Fp(x10709) + Fp(x10720);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10722(args[2][204 * steps + ((cycle - 0) & mask)]);
          assert(x10722 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10723 = x10722 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10724 = Fp(x10712) + Fp(x10723);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10725(args[2][212 * steps + ((cycle - 0) & mask)]);
          assert(x10725 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10726 = x10725 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10727 = Fp(x10715) + Fp(x10726);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10728(args[2][189 * steps + ((cycle - 0) & mask)]);
          assert(x10728 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10729 = x10728 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10730 = Fp(x10718) + Fp(x10729);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10731(args[2][197 * steps + ((cycle - 0) & mask)]);
          assert(x10731 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10732 = x10731 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10733 = Fp(x10721) + Fp(x10732);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10734(args[2][205 * steps + ((cycle - 0) & mask)]);
          assert(x10734 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10735 = x10734 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10736 = Fp(x10724) + Fp(x10735);
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10737(args[2][213 * steps + ((cycle - 0) & mask)]);
          assert(x10737 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          Fp x10738 = x10737 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          Fp x10739 = Fp(x10727) + Fp(x10738);
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][118 * steps + cycle] = x10739;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][119 * steps + cycle] = x10736;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][120 * steps + cycle] = x10733;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][121 * steps + cycle] = x10730;
          {
            host_args.at(0) = x10651;
            host_args.at(1) = x10739;
            host_args.at(2) = x10736;
            host_args.at(3) = x10733;
            host_args.at(4) = x10730;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10740(args[2][118 * steps + ((cycle - 0) & mask)]);
          assert(x10740 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10741(args[2][119 * steps + ((cycle - 0) & mask)]);
          assert(x10741 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10742(args[2][120 * steps + ((cycle - 0) & mask)]);
          assert(x10742 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x10743(args[2][121 * steps + ((cycle - 0) & mask)]);
          assert(x10743 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][115 * steps + cycle] = x10651;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][116 * steps + cycle] = x8476;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][117 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][118 * steps + cycle] = x10740;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][119 * steps + cycle] = x10741;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][120 * steps + cycle] = x10742;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][121 * steps + cycle] = x10743;
        }
      }
      if (x8505 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        args[2][108 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":44:3)
        args[2][109 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":45:3)
        args[2][110 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][111 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][112 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][113 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][114 * steps + cycle] = x94;
        if (x8496 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][115 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][116 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][117 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][118 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][119 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][120 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][121 * steps + cycle] = x94;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10744(args[2][150 * steps + ((cycle - 1) & mask)]);
      assert(x10744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10745(args[2][151 * steps + ((cycle - 1) & mask)]);
      assert(x10745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10746(args[2][152 * steps + ((cycle - 1) & mask)]);
      assert(x10746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10747(args[2][153 * steps + ((cycle - 1) & mask)]);
      assert(x10747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10748(args[2][154 * steps + ((cycle - 1) & mask)]);
      assert(x10748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10749(args[2][155 * steps + ((cycle - 1) & mask)]);
      assert(x10749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10750(args[2][156 * steps + ((cycle - 1) & mask)]);
      assert(x10750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10751(args[2][157 * steps + ((cycle - 1) & mask)]);
      assert(x10751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10752(args[2][158 * steps + ((cycle - 1) & mask)]);
      assert(x10752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10753(args[2][159 * steps + ((cycle - 1) & mask)]);
      assert(x10753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10754(args[2][160 * steps + ((cycle - 1) & mask)]);
      assert(x10754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10755(args[2][161 * steps + ((cycle - 1) & mask)]);
      assert(x10755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10756(args[2][162 * steps + ((cycle - 1) & mask)]);
      assert(x10756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10757(args[2][163 * steps + ((cycle - 1) & mask)]);
      assert(x10757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10758(args[2][164 * steps + ((cycle - 1) & mask)]);
      assert(x10758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10759(args[2][165 * steps + ((cycle - 1) & mask)]);
      assert(x10759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10760(args[2][166 * steps + ((cycle - 1) & mask)]);
      assert(x10760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10761(args[2][167 * steps + ((cycle - 1) & mask)]);
      assert(x10761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10762(args[2][168 * steps + ((cycle - 1) & mask)]);
      assert(x10762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10763(args[2][169 * steps + ((cycle - 1) & mask)]);
      assert(x10763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10764(args[2][170 * steps + ((cycle - 1) & mask)]);
      assert(x10764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10765(args[2][171 * steps + ((cycle - 1) & mask)]);
      assert(x10765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10766(args[2][172 * steps + ((cycle - 1) & mask)]);
      assert(x10766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10767(args[2][173 * steps + ((cycle - 1) & mask)]);
      assert(x10767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10768(args[2][174 * steps + ((cycle - 1) & mask)]);
      assert(x10768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10769(args[2][175 * steps + ((cycle - 1) & mask)]);
      assert(x10769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10770(args[2][176 * steps + ((cycle - 1) & mask)]);
      assert(x10770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10771(args[2][177 * steps + ((cycle - 1) & mask)]);
      assert(x10771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10772(args[2][178 * steps + ((cycle - 1) & mask)]);
      assert(x10772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10773(args[2][179 * steps + ((cycle - 1) & mask)]);
      assert(x10773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10774(args[2][180 * steps + ((cycle - 1) & mask)]);
      assert(x10774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10775(args[2][181 * steps + ((cycle - 1) & mask)]);
      assert(x10775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10776(args[2][150 * steps + ((cycle - 2) & mask)]);
      assert(x10776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10777(args[2][151 * steps + ((cycle - 2) & mask)]);
      assert(x10777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10778(args[2][152 * steps + ((cycle - 2) & mask)]);
      assert(x10778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10779(args[2][153 * steps + ((cycle - 2) & mask)]);
      assert(x10779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10780(args[2][154 * steps + ((cycle - 2) & mask)]);
      assert(x10780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10781(args[2][155 * steps + ((cycle - 2) & mask)]);
      assert(x10781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10782(args[2][156 * steps + ((cycle - 2) & mask)]);
      assert(x10782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10783(args[2][157 * steps + ((cycle - 2) & mask)]);
      assert(x10783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10784(args[2][158 * steps + ((cycle - 2) & mask)]);
      assert(x10784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10785(args[2][159 * steps + ((cycle - 2) & mask)]);
      assert(x10785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10786(args[2][160 * steps + ((cycle - 2) & mask)]);
      assert(x10786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10787(args[2][161 * steps + ((cycle - 2) & mask)]);
      assert(x10787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10788(args[2][162 * steps + ((cycle - 2) & mask)]);
      assert(x10788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10789(args[2][163 * steps + ((cycle - 2) & mask)]);
      assert(x10789 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10790(args[2][164 * steps + ((cycle - 2) & mask)]);
      assert(x10790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10791(args[2][165 * steps + ((cycle - 2) & mask)]);
      assert(x10791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10792(args[2][166 * steps + ((cycle - 2) & mask)]);
      assert(x10792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10793(args[2][167 * steps + ((cycle - 2) & mask)]);
      assert(x10793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10794(args[2][168 * steps + ((cycle - 2) & mask)]);
      assert(x10794 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10795(args[2][169 * steps + ((cycle - 2) & mask)]);
      assert(x10795 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10796(args[2][170 * steps + ((cycle - 2) & mask)]);
      assert(x10796 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10797(args[2][171 * steps + ((cycle - 2) & mask)]);
      assert(x10797 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10798(args[2][172 * steps + ((cycle - 2) & mask)]);
      assert(x10798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10799(args[2][173 * steps + ((cycle - 2) & mask)]);
      assert(x10799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10800(args[2][174 * steps + ((cycle - 2) & mask)]);
      assert(x10800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10801(args[2][175 * steps + ((cycle - 2) & mask)]);
      assert(x10801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10802(args[2][176 * steps + ((cycle - 2) & mask)]);
      assert(x10802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10803(args[2][177 * steps + ((cycle - 2) & mask)]);
      assert(x10803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10804(args[2][178 * steps + ((cycle - 2) & mask)]);
      assert(x10804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10805(args[2][179 * steps + ((cycle - 2) & mask)]);
      assert(x10805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10806(args[2][180 * steps + ((cycle - 2) & mask)]);
      assert(x10806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10807(args[2][181 * steps + ((cycle - 2) & mask)]);
      assert(x10807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10808(args[2][150 * steps + ((cycle - 3) & mask)]);
      assert(x10808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10809(args[2][151 * steps + ((cycle - 3) & mask)]);
      assert(x10809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10810(args[2][152 * steps + ((cycle - 3) & mask)]);
      assert(x10810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10811(args[2][153 * steps + ((cycle - 3) & mask)]);
      assert(x10811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10812(args[2][154 * steps + ((cycle - 3) & mask)]);
      assert(x10812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10813(args[2][155 * steps + ((cycle - 3) & mask)]);
      assert(x10813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10814(args[2][156 * steps + ((cycle - 3) & mask)]);
      assert(x10814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10815(args[2][157 * steps + ((cycle - 3) & mask)]);
      assert(x10815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10816(args[2][158 * steps + ((cycle - 3) & mask)]);
      assert(x10816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10817(args[2][159 * steps + ((cycle - 3) & mask)]);
      assert(x10817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10818(args[2][160 * steps + ((cycle - 3) & mask)]);
      assert(x10818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10819(args[2][161 * steps + ((cycle - 3) & mask)]);
      assert(x10819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10820(args[2][162 * steps + ((cycle - 3) & mask)]);
      assert(x10820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10821(args[2][163 * steps + ((cycle - 3) & mask)]);
      assert(x10821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10822(args[2][164 * steps + ((cycle - 3) & mask)]);
      assert(x10822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10823(args[2][165 * steps + ((cycle - 3) & mask)]);
      assert(x10823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10824(args[2][166 * steps + ((cycle - 3) & mask)]);
      assert(x10824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10825(args[2][167 * steps + ((cycle - 3) & mask)]);
      assert(x10825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10826(args[2][168 * steps + ((cycle - 3) & mask)]);
      assert(x10826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10827(args[2][169 * steps + ((cycle - 3) & mask)]);
      assert(x10827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10828(args[2][170 * steps + ((cycle - 3) & mask)]);
      assert(x10828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10829(args[2][171 * steps + ((cycle - 3) & mask)]);
      assert(x10829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10830(args[2][172 * steps + ((cycle - 3) & mask)]);
      assert(x10830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10831(args[2][173 * steps + ((cycle - 3) & mask)]);
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10832(args[2][174 * steps + ((cycle - 3) & mask)]);
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10833(args[2][175 * steps + ((cycle - 3) & mask)]);
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10834(args[2][176 * steps + ((cycle - 3) & mask)]);
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10835(args[2][177 * steps + ((cycle - 3) & mask)]);
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10836(args[2][178 * steps + ((cycle - 3) & mask)]);
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10837(args[2][179 * steps + ((cycle - 3) & mask)]);
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10838(args[2][180 * steps + ((cycle - 3) & mask)]);
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10839(args[2][181 * steps + ((cycle - 3) & mask)]);
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10840(args[2][150 * steps + ((cycle - 4) & mask)]);
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10841(args[2][151 * steps + ((cycle - 4) & mask)]);
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10842(args[2][152 * steps + ((cycle - 4) & mask)]);
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10843(args[2][153 * steps + ((cycle - 4) & mask)]);
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10844(args[2][154 * steps + ((cycle - 4) & mask)]);
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10845(args[2][155 * steps + ((cycle - 4) & mask)]);
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10846(args[2][156 * steps + ((cycle - 4) & mask)]);
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10847(args[2][157 * steps + ((cycle - 4) & mask)]);
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10848(args[2][158 * steps + ((cycle - 4) & mask)]);
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10849(args[2][159 * steps + ((cycle - 4) & mask)]);
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10850(args[2][160 * steps + ((cycle - 4) & mask)]);
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10851(args[2][161 * steps + ((cycle - 4) & mask)]);
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10852(args[2][162 * steps + ((cycle - 4) & mask)]);
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10853(args[2][163 * steps + ((cycle - 4) & mask)]);
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10854(args[2][164 * steps + ((cycle - 4) & mask)]);
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10855(args[2][165 * steps + ((cycle - 4) & mask)]);
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10856(args[2][166 * steps + ((cycle - 4) & mask)]);
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10857(args[2][167 * steps + ((cycle - 4) & mask)]);
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10858(args[2][168 * steps + ((cycle - 4) & mask)]);
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10859(args[2][169 * steps + ((cycle - 4) & mask)]);
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10860(args[2][170 * steps + ((cycle - 4) & mask)]);
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10861(args[2][171 * steps + ((cycle - 4) & mask)]);
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10862(args[2][172 * steps + ((cycle - 4) & mask)]);
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10863(args[2][173 * steps + ((cycle - 4) & mask)]);
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10864(args[2][174 * steps + ((cycle - 4) & mask)]);
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10865(args[2][175 * steps + ((cycle - 4) & mask)]);
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10866(args[2][176 * steps + ((cycle - 4) & mask)]);
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10867(args[2][177 * steps + ((cycle - 4) & mask)]);
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10868(args[2][178 * steps + ((cycle - 4) & mask)]);
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10869(args[2][179 * steps + ((cycle - 4) & mask)]);
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10870(args[2][180 * steps + ((cycle - 4) & mask)]);
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10871(args[2][181 * steps + ((cycle - 4) & mask)]);
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10872(args[2][182 * steps + ((cycle - 1) & mask)]);
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10873(args[2][183 * steps + ((cycle - 1) & mask)]);
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10874(args[2][184 * steps + ((cycle - 1) & mask)]);
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10875(args[2][185 * steps + ((cycle - 1) & mask)]);
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10876(args[2][186 * steps + ((cycle - 1) & mask)]);
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10877(args[2][187 * steps + ((cycle - 1) & mask)]);
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10878(args[2][188 * steps + ((cycle - 1) & mask)]);
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10879(args[2][189 * steps + ((cycle - 1) & mask)]);
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10880(args[2][190 * steps + ((cycle - 1) & mask)]);
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10881(args[2][191 * steps + ((cycle - 1) & mask)]);
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10882(args[2][192 * steps + ((cycle - 1) & mask)]);
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10883(args[2][193 * steps + ((cycle - 1) & mask)]);
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10884(args[2][194 * steps + ((cycle - 1) & mask)]);
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10885(args[2][195 * steps + ((cycle - 1) & mask)]);
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10886(args[2][196 * steps + ((cycle - 1) & mask)]);
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10887(args[2][197 * steps + ((cycle - 1) & mask)]);
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10888(args[2][198 * steps + ((cycle - 1) & mask)]);
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10889(args[2][199 * steps + ((cycle - 1) & mask)]);
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10890(args[2][200 * steps + ((cycle - 1) & mask)]);
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10891(args[2][201 * steps + ((cycle - 1) & mask)]);
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10892(args[2][202 * steps + ((cycle - 1) & mask)]);
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10893(args[2][203 * steps + ((cycle - 1) & mask)]);
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10894(args[2][204 * steps + ((cycle - 1) & mask)]);
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10895(args[2][205 * steps + ((cycle - 1) & mask)]);
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10896(args[2][206 * steps + ((cycle - 1) & mask)]);
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10897(args[2][207 * steps + ((cycle - 1) & mask)]);
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10898(args[2][208 * steps + ((cycle - 1) & mask)]);
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10899(args[2][209 * steps + ((cycle - 1) & mask)]);
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10900(args[2][210 * steps + ((cycle - 1) & mask)]);
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10901(args[2][211 * steps + ((cycle - 1) & mask)]);
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10902(args[2][212 * steps + ((cycle - 1) & mask)]);
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10903(args[2][213 * steps + ((cycle - 1) & mask)]);
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10904(args[2][182 * steps + ((cycle - 2) & mask)]);
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10905(args[2][183 * steps + ((cycle - 2) & mask)]);
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10906(args[2][184 * steps + ((cycle - 2) & mask)]);
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10907(args[2][185 * steps + ((cycle - 2) & mask)]);
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10908(args[2][186 * steps + ((cycle - 2) & mask)]);
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10909(args[2][187 * steps + ((cycle - 2) & mask)]);
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10910(args[2][188 * steps + ((cycle - 2) & mask)]);
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10911(args[2][189 * steps + ((cycle - 2) & mask)]);
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10912(args[2][190 * steps + ((cycle - 2) & mask)]);
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10913(args[2][191 * steps + ((cycle - 2) & mask)]);
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10914(args[2][192 * steps + ((cycle - 2) & mask)]);
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10915(args[2][193 * steps + ((cycle - 2) & mask)]);
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10916(args[2][194 * steps + ((cycle - 2) & mask)]);
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10917(args[2][195 * steps + ((cycle - 2) & mask)]);
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10918(args[2][196 * steps + ((cycle - 2) & mask)]);
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10919(args[2][197 * steps + ((cycle - 2) & mask)]);
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10920(args[2][198 * steps + ((cycle - 2) & mask)]);
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10921(args[2][199 * steps + ((cycle - 2) & mask)]);
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10922(args[2][200 * steps + ((cycle - 2) & mask)]);
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10923(args[2][201 * steps + ((cycle - 2) & mask)]);
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10924(args[2][202 * steps + ((cycle - 2) & mask)]);
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10925(args[2][203 * steps + ((cycle - 2) & mask)]);
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10926(args[2][204 * steps + ((cycle - 2) & mask)]);
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10927(args[2][205 * steps + ((cycle - 2) & mask)]);
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10928(args[2][206 * steps + ((cycle - 2) & mask)]);
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10929(args[2][207 * steps + ((cycle - 2) & mask)]);
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10930(args[2][208 * steps + ((cycle - 2) & mask)]);
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10931(args[2][209 * steps + ((cycle - 2) & mask)]);
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10932(args[2][210 * steps + ((cycle - 2) & mask)]);
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10933(args[2][211 * steps + ((cycle - 2) & mask)]);
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10934(args[2][212 * steps + ((cycle - 2) & mask)]);
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10935(args[2][213 * steps + ((cycle - 2) & mask)]);
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10936(args[2][182 * steps + ((cycle - 3) & mask)]);
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10937(args[2][183 * steps + ((cycle - 3) & mask)]);
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10938(args[2][184 * steps + ((cycle - 3) & mask)]);
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10939(args[2][185 * steps + ((cycle - 3) & mask)]);
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10940(args[2][186 * steps + ((cycle - 3) & mask)]);
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10941(args[2][187 * steps + ((cycle - 3) & mask)]);
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10942(args[2][188 * steps + ((cycle - 3) & mask)]);
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10943(args[2][189 * steps + ((cycle - 3) & mask)]);
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10944(args[2][190 * steps + ((cycle - 3) & mask)]);
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10945(args[2][191 * steps + ((cycle - 3) & mask)]);
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10946(args[2][192 * steps + ((cycle - 3) & mask)]);
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10947(args[2][193 * steps + ((cycle - 3) & mask)]);
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10948(args[2][194 * steps + ((cycle - 3) & mask)]);
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10949(args[2][195 * steps + ((cycle - 3) & mask)]);
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10950(args[2][196 * steps + ((cycle - 3) & mask)]);
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10951(args[2][197 * steps + ((cycle - 3) & mask)]);
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10952(args[2][198 * steps + ((cycle - 3) & mask)]);
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10953(args[2][199 * steps + ((cycle - 3) & mask)]);
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10954(args[2][200 * steps + ((cycle - 3) & mask)]);
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10955(args[2][201 * steps + ((cycle - 3) & mask)]);
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10956(args[2][202 * steps + ((cycle - 3) & mask)]);
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10957(args[2][203 * steps + ((cycle - 3) & mask)]);
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10958(args[2][204 * steps + ((cycle - 3) & mask)]);
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10959(args[2][205 * steps + ((cycle - 3) & mask)]);
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10960(args[2][206 * steps + ((cycle - 3) & mask)]);
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10961(args[2][207 * steps + ((cycle - 3) & mask)]);
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10962(args[2][208 * steps + ((cycle - 3) & mask)]);
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10963(args[2][209 * steps + ((cycle - 3) & mask)]);
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10964(args[2][210 * steps + ((cycle - 3) & mask)]);
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10965(args[2][211 * steps + ((cycle - 3) & mask)]);
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10966(args[2][212 * steps + ((cycle - 3) & mask)]);
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10967(args[2][213 * steps + ((cycle - 3) & mask)]);
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10968(args[2][182 * steps + ((cycle - 4) & mask)]);
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10969(args[2][183 * steps + ((cycle - 4) & mask)]);
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10970(args[2][184 * steps + ((cycle - 4) & mask)]);
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10971(args[2][185 * steps + ((cycle - 4) & mask)]);
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10972(args[2][186 * steps + ((cycle - 4) & mask)]);
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10973(args[2][187 * steps + ((cycle - 4) & mask)]);
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10974(args[2][188 * steps + ((cycle - 4) & mask)]);
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10975(args[2][189 * steps + ((cycle - 4) & mask)]);
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10976(args[2][190 * steps + ((cycle - 4) & mask)]);
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10977(args[2][191 * steps + ((cycle - 4) & mask)]);
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10978(args[2][192 * steps + ((cycle - 4) & mask)]);
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10979(args[2][193 * steps + ((cycle - 4) & mask)]);
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10980(args[2][194 * steps + ((cycle - 4) & mask)]);
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10981(args[2][195 * steps + ((cycle - 4) & mask)]);
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10982(args[2][196 * steps + ((cycle - 4) & mask)]);
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10983(args[2][197 * steps + ((cycle - 4) & mask)]);
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10984(args[2][198 * steps + ((cycle - 4) & mask)]);
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10985(args[2][199 * steps + ((cycle - 4) & mask)]);
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10986(args[2][200 * steps + ((cycle - 4) & mask)]);
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10987(args[2][201 * steps + ((cycle - 4) & mask)]);
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10988(args[2][202 * steps + ((cycle - 4) & mask)]);
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10989(args[2][203 * steps + ((cycle - 4) & mask)]);
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10990(args[2][204 * steps + ((cycle - 4) & mask)]);
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10991(args[2][205 * steps + ((cycle - 4) & mask)]);
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10992(args[2][206 * steps + ((cycle - 4) & mask)]);
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10993(args[2][207 * steps + ((cycle - 4) & mask)]);
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10994(args[2][208 * steps + ((cycle - 4) & mask)]);
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10995(args[2][209 * steps + ((cycle - 4) & mask)]);
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10996(args[2][210 * steps + ((cycle - 4) & mask)]);
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10997(args[2][211 * steps + ((cycle - 4) & mask)]);
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10998(args[2][212 * steps + ((cycle - 4) & mask)]);
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x10999(args[2][213 * steps + ((cycle - 4) & mask)]);
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11000(args[2][82 * steps + ((cycle - 0) & mask)]);
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11001(args[2][83 * steps + ((cycle - 0) & mask)]);
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11002(args[2][84 * steps + ((cycle - 0) & mask)]);
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11003(args[2][85 * steps + ((cycle - 0) & mask)]);
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11004(args[2][86 * steps + ((cycle - 0) & mask)]);
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11005(args[2][87 * steps + ((cycle - 0) & mask)]);
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11006(args[2][88 * steps + ((cycle - 0) & mask)]);
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11007(args[2][89 * steps + ((cycle - 0) & mask)]);
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11008(args[2][90 * steps + ((cycle - 0) & mask)]);
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11009(args[2][91 * steps + ((cycle - 0) & mask)]);
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11010(args[2][19 * steps + ((cycle - 0) & mask)]);
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11011(args[2][20 * steps + ((cycle - 0) & mask)]);
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11012(args[2][21 * steps + ((cycle - 0) & mask)]);
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11013(args[2][22 * steps + ((cycle - 0) & mask)]);
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11014(args[2][23 * steps + ((cycle - 0) & mask)]);
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11015(args[2][24 * steps + ((cycle - 0) & mask)]);
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11016(args[2][25 * steps + ((cycle - 0) & mask)]);
      assert(x11016 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11017(args[2][26 * steps + ((cycle - 0) & mask)]);
      assert(x11017 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11018(args[2][27 * steps + ((cycle - 0) & mask)]);
      assert(x11018 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11019(args[2][28 * steps + ((cycle - 0) & mask)]);
      assert(x11019 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11020(args[2][29 * steps + ((cycle - 0) & mask)]);
      assert(x11020 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11021(args[2][30 * steps + ((cycle - 0) & mask)]);
      assert(x11021 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11022(args[2][31 * steps + ((cycle - 0) & mask)]);
      assert(x11022 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11023(args[2][32 * steps + ((cycle - 0) & mask)]);
      assert(x11023 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11024(args[2][33 * steps + ((cycle - 0) & mask)]);
      assert(x11024 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11025(args[2][34 * steps + ((cycle - 0) & mask)]);
      assert(x11025 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11026(args[2][35 * steps + ((cycle - 0) & mask)]);
      assert(x11026 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11027(args[2][36 * steps + ((cycle - 0) & mask)]);
      assert(x11027 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11028(args[2][37 * steps + ((cycle - 0) & mask)]);
      assert(x11028 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11029(args[2][38 * steps + ((cycle - 0) & mask)]);
      assert(x11029 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11030(args[2][39 * steps + ((cycle - 0) & mask)]);
      assert(x11030 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11031(args[2][40 * steps + ((cycle - 0) & mask)]);
      assert(x11031 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11032(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x11032 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11033(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x11033 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11034(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x11034 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x11035(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x11035 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      Fp x11036 = x11033 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      Fp x11037 = Fp(x11032) + Fp(x11036);
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      Fp x11038 = x11035 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      Fp x11039 = Fp(x11034) + Fp(x11038);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11040 = Fp(x10757) + Fp(x10766);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11041 = x10757 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11042 = x11041 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11043 = x11040 - x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11044 = Fp(x10758) + Fp(x10767);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11045 = x10758 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11046 = x11045 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11047 = x11044 - x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11048 = Fp(x10759) + Fp(x10768);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11049 = x10759 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11050 = x11049 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11051 = x11048 - x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11052 = Fp(x10760) + Fp(x10769);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11053 = x10760 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11054 = x11053 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11055 = x11052 - x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11056 = Fp(x10761) + Fp(x10770);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11057 = x10761 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11058 = x11057 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11059 = x11056 - x11058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11060 = Fp(x10762) + Fp(x10771);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11061 = x10762 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11062 = x11061 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11063 = x11060 - x11062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11064 = Fp(x10763) + Fp(x10772);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11065 = x10763 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11066 = x11065 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11067 = x11064 - x11066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11068 = Fp(x10764) + Fp(x10773);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11069 = x10764 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11070 = x11069 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11071 = x11068 - x11070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11072 = Fp(x10765) + Fp(x10774);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11073 = x10765 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11074 = x11073 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11075 = x11072 - x11074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11076 = Fp(x10766) + Fp(x10775);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11077 = x10766 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11078 = x11077 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11079 = x11076 - x11078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11080 = Fp(x10767) + Fp(x10744);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11081 = x10767 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11082 = x11081 * x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11083 = x11080 - x11082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11084 = Fp(x10768) + Fp(x10745);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11085 = x10768 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11086 = x11085 * x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11087 = x11084 - x11086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11088 = Fp(x10769) + Fp(x10746);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11089 = x10769 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11090 = x11089 * x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11091 = x11088 - x11090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11092 = Fp(x10770) + Fp(x10747);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11093 = x10770 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11094 = x11093 * x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11095 = x11092 - x11094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11096 = Fp(x10771) + Fp(x10748);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11097 = x10771 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11098 = x11097 * x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11099 = x11096 - x11098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11100 = Fp(x10772) + Fp(x10749);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11101 = x10772 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11102 = x11101 * x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11103 = x11100 - x11102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11104 = Fp(x10773) + Fp(x10750);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11105 = x10773 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11106 = x11105 * x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11107 = x11104 - x11106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11108 = Fp(x10774) + Fp(x10751);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11109 = x10774 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11110 = x11109 * x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11111 = x11108 - x11110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11112 = Fp(x10775) + Fp(x10752);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11113 = x10775 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11114 = x11113 * x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11115 = x11112 - x11114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11116 = Fp(x10744) + Fp(x10753);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11117 = x10744 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11118 = x11117 * x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11119 = x11116 - x11118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11120 = Fp(x10745) + Fp(x10754);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11121 = x10745 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11122 = x11121 * x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11123 = x11120 - x11122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11124 = Fp(x10746) + Fp(x10755);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11125 = x10746 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11126 = x11125 * x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11127 = x11124 - x11126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11128 = Fp(x10747) + Fp(x10756);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11129 = x10747 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11130 = x11129 * x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11131 = x11128 - x11130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11132 = Fp(x10748) + Fp(x10757);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11133 = x10748 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11134 = x11133 * x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11135 = x11132 - x11134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11136 = Fp(x10749) + Fp(x10758);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11137 = x10749 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11138 = x11137 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11139 = x11136 - x11138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11140 = Fp(x10750) + Fp(x10759);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11141 = x10750 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11142 = x11141 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11143 = x11140 - x11142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11144 = Fp(x10751) + Fp(x10760);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11145 = x10751 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11146 = x11145 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11147 = x11144 - x11146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11148 = Fp(x10752) + Fp(x10761);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11149 = x10752 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11150 = x11149 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11151 = x11148 - x11150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11152 = Fp(x10753) + Fp(x10762);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11153 = x10753 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11154 = x11153 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11155 = x11152 - x11154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11156 = Fp(x10754) + Fp(x10763);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11157 = x10754 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11158 = x11157 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11159 = x11156 - x11158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11160 = Fp(x10755) + Fp(x10764);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11161 = x10755 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11162 = x11161 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11163 = x11160 - x11162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11164 = Fp(x10756) + Fp(x10765);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11165 = x10756 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11166 = x11165 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11167 = x11164 - x11166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11168 = Fp(x10746) + Fp(x11043);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11169 = x11125 * x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11170 = x11168 - x11169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11171 = Fp(x10747) + Fp(x11047);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11172 = x11129 * x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11173 = x11171 - x11172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11174 = Fp(x10748) + Fp(x11051);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11175 = x11133 * x11051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11176 = x11174 - x11175;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11177 = Fp(x10749) + Fp(x11055);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11178 = x11137 * x11055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11179 = x11177 - x11178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11180 = Fp(x10750) + Fp(x11059);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11181 = x11141 * x11059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11182 = x11180 - x11181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11183 = Fp(x10751) + Fp(x11063);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11184 = x11145 * x11063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11185 = x11183 - x11184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11186 = Fp(x10752) + Fp(x11067);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11187 = x11149 * x11067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11188 = x11186 - x11187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11189 = Fp(x10753) + Fp(x11071);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11190 = x11153 * x11071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11191 = x11189 - x11190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11192 = Fp(x10754) + Fp(x11075);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11193 = x11157 * x11075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11194 = x11192 - x11193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11195 = Fp(x10755) + Fp(x11079);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11196 = x11161 * x11079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11197 = x11195 - x11196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11198 = Fp(x10756) + Fp(x11083);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11199 = x11165 * x11083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11200 = x11198 - x11199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11201 = Fp(x10757) + Fp(x11087);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11202 = x11041 * x11087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11203 = x11201 - x11202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11204 = Fp(x10758) + Fp(x11091);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11205 = x11045 * x11091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11206 = x11204 - x11205;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11207 = Fp(x10759) + Fp(x11095);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11208 = x11049 * x11095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11209 = x11207 - x11208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11210 = Fp(x10760) + Fp(x11099);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11211 = x11053 * x11099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11212 = x11210 - x11211;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11213 = Fp(x10761) + Fp(x11103);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11214 = x11057 * x11103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11215 = x11213 - x11214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11216 = Fp(x10762) + Fp(x11107);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11217 = x11061 * x11107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11218 = x11216 - x11217;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11219 = Fp(x10763) + Fp(x11111);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11220 = x11065 * x11111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11221 = x11219 - x11220;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11222 = Fp(x10764) + Fp(x11115);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11223 = x11069 * x11115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11224 = x11222 - x11223;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11225 = Fp(x10765) + Fp(x11119);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11226 = x11073 * x11119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x11225 - x11226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11228 = Fp(x10766) + Fp(x11123);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11229 = x11077 * x11123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11230 = x11228 - x11229;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11231 = Fp(x10767) + Fp(x11127);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11232 = x11081 * x11127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11233 = x11231 - x11232;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11234 = Fp(x10768) + Fp(x11131);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11235 = x11085 * x11131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11236 = x11234 - x11235;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11237 = Fp(x10769) + Fp(x11135);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11238 = x11089 * x11135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x11237 - x11238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11240 = Fp(x10770) + Fp(x11139);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11241 = x11093 * x11139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11242 = x11240 - x11241;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11243 = Fp(x10771) + Fp(x11143);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11244 = x11097 * x11143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11245 = x11243 - x11244;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11246 = Fp(x10772) + Fp(x11147);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11247 = x11101 * x11147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11248 = x11246 - x11247;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11249 = Fp(x10773) + Fp(x11151);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11250 = x11105 * x11151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x11249 - x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11252 = Fp(x10774) + Fp(x11155);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11253 = x11109 * x11155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11254 = x11252 - x11253;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11255 = Fp(x10775) + Fp(x11159);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11256 = x11113 * x11159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11257 = x11255 - x11256;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11258 = Fp(x10744) + Fp(x11163);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11259 = x11117 * x11163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x11258 - x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11261 = Fp(x10745) + Fp(x11167);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11262 = x11121 * x11167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x11261 - x11262;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11264 = Fp(x10883) + Fp(x10897);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11265 = x10883 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11266 = x11265 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11267 = x11264 - x11266;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11268 = Fp(x10884) + Fp(x10898);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11269 = x10884 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11270 = x11269 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11271 = x11268 - x11270;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11272 = Fp(x10885) + Fp(x10899);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11273 = x10885 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11274 = x11273 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11275 = x11272 - x11274;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11276 = Fp(x10886) + Fp(x10900);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11277 = x10886 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11278 = x11277 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11279 = x11276 - x11278;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11280 = Fp(x10887) + Fp(x10901);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11281 = x10887 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11282 = x11281 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11283 = x11280 - x11282;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11284 = Fp(x10888) + Fp(x10902);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11285 = x10888 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11286 = x11285 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11287 = x11284 - x11286;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11288 = Fp(x10889) + Fp(x10903);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11289 = x10889 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11290 = x11289 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11291 = x11288 - x11290;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11292 = Fp(x10890) + Fp(x10872);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11293 = x10890 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11294 = x11293 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11295 = x11292 - x11294;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11296 = Fp(x10891) + Fp(x10873);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11297 = x10891 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11298 = x11297 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11299 = x11296 - x11298;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11300 = Fp(x10892) + Fp(x10874);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11301 = x10892 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11302 = x11301 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11303 = x11300 - x11302;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11304 = Fp(x10893) + Fp(x10875);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11305 = x10893 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11306 = x11305 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11307 = x11304 - x11306;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11308 = Fp(x10894) + Fp(x10876);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11309 = x10894 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11310 = x11309 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11311 = x11308 - x11310;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11312 = Fp(x10895) + Fp(x10877);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11313 = x10895 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11314 = x11313 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11315 = x11312 - x11314;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11316 = Fp(x10896) + Fp(x10878);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11317 = x10896 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11318 = x11317 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11319 = x11316 - x11318;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11320 = Fp(x10897) + Fp(x10879);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11321 = x10897 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11322 = x11321 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11323 = x11320 - x11322;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11324 = Fp(x10898) + Fp(x10880);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11325 = x10898 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11326 = x11325 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11327 = x11324 - x11326;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11328 = Fp(x10899) + Fp(x10881);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11329 = x10899 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11330 = x11329 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11331 = x11328 - x11330;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11332 = Fp(x10900) + Fp(x10882);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11333 = x10900 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11334 = x11333 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11335 = x11332 - x11334;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11336 = Fp(x10901) + Fp(x10883);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11337 = x10901 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11338 = x11337 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11339 = x11336 - x11338;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11340 = Fp(x10902) + Fp(x10884);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11341 = x10902 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11342 = x11341 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11343 = x11340 - x11342;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11344 = Fp(x10903) + Fp(x10885);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11345 = x10903 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11346 = x11345 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11347 = x11344 - x11346;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11348 = Fp(x10872) + Fp(x10886);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11349 = x10872 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11350 = x11349 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11351 = x11348 - x11350;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11352 = Fp(x10873) + Fp(x10887);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11353 = x10873 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11354 = x11353 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11355 = x11352 - x11354;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11356 = Fp(x10874) + Fp(x10888);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11357 = x10874 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11358 = x11357 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11359 = x11356 - x11358;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11360 = Fp(x10875) + Fp(x10889);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11361 = x10875 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11362 = x11361 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11363 = x11360 - x11362;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11364 = Fp(x10876) + Fp(x10890);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11365 = x10876 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11366 = x11365 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11367 = x11364 - x11366;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11368 = Fp(x10877) + Fp(x10891);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11369 = x10877 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11370 = x11369 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11371 = x11368 - x11370;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11372 = Fp(x10878) + Fp(x10892);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11373 = x10878 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11374 = x11373 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11375 = x11372 - x11374;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11376 = Fp(x10879) + Fp(x10893);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11377 = x10879 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11378 = x11377 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11379 = x11376 - x11378;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11380 = Fp(x10880) + Fp(x10894);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11381 = x10880 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11382 = x11381 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11383 = x11380 - x11382;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11384 = Fp(x10881) + Fp(x10895);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11385 = x10881 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11386 = x11385 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11387 = x11384 - x11386;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11388 = Fp(x10882) + Fp(x10896);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11389 = x10882 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11390 = x11389 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11391 = x11388 - x11390;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11392 = Fp(x10878) + Fp(x11267);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11393 = x11373 * x11267;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11394 = x11392 - x11393;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11395 = Fp(x10879) + Fp(x11271);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11396 = x11377 * x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11397 = x11395 - x11396;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11398 = Fp(x10880) + Fp(x11275);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11399 = x11381 * x11275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11400 = x11398 - x11399;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11401 = Fp(x10881) + Fp(x11279);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11402 = x11385 * x11279;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11403 = x11401 - x11402;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11404 = Fp(x10882) + Fp(x11283);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11405 = x11389 * x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11406 = x11404 - x11405;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11407 = Fp(x10883) + Fp(x11287);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11408 = x11265 * x11287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11409 = x11407 - x11408;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11410 = Fp(x10884) + Fp(x11291);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11411 = x11269 * x11291;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x11410 - x11411;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11413 = Fp(x10885) + Fp(x11295);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11414 = x11273 * x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x11413 - x11414;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11416 = Fp(x10886) + Fp(x11299);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11417 = x11277 * x11299;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11418 = x11416 - x11417;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11419 = Fp(x10887) + Fp(x11303);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11420 = x11281 * x11303;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11421 = x11419 - x11420;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11422 = Fp(x10888) + Fp(x11307);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11423 = x11285 * x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x11422 - x11423;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11425 = Fp(x10889) + Fp(x11311);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11426 = x11289 * x11311;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x11425 - x11426;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11428 = Fp(x10890) + Fp(x11315);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11429 = x11293 * x11315;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11430 = x11428 - x11429;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11431 = Fp(x10891) + Fp(x11319);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11432 = x11297 * x11319;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11433 = x11431 - x11432;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11434 = Fp(x10892) + Fp(x11323);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11435 = x11301 * x11323;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x11434 - x11435;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11437 = Fp(x10893) + Fp(x11327);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11438 = x11305 * x11327;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x11437 - x11438;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11440 = Fp(x10894) + Fp(x11331);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11441 = x11309 * x11331;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11442 = x11440 - x11441;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11443 = Fp(x10895) + Fp(x11335);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11444 = x11313 * x11335;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11445 = x11443 - x11444;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11446 = Fp(x10896) + Fp(x11339);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11447 = x11317 * x11339;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x11446 - x11447;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11449 = Fp(x10897) + Fp(x11343);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11450 = x11321 * x11343;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x11449 - x11450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11452 = Fp(x10898) + Fp(x11347);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11453 = x11325 * x11347;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11454 = x11452 - x11453;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11455 = Fp(x10899) + Fp(x11351);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11456 = x11329 * x11351;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11457 = x11455 - x11456;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11458 = Fp(x10900) + Fp(x11355);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11459 = x11333 * x11355;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x11458 - x11459;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11461 = Fp(x10901) + Fp(x11359);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11462 = x11337 * x11359;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x11461 - x11462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11464 = Fp(x10902) + Fp(x11363);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11465 = x11341 * x11363;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11466 = x11464 - x11465;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11467 = Fp(x10903) + Fp(x11367);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11468 = x11345 * x11367;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11469 = x11467 - x11468;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11470 = Fp(x10872) + Fp(x11371);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11471 = x11349 * x11371;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11472 = x11470 - x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11473 = Fp(x10873) + Fp(x11375);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11474 = x11353 * x11375;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x11473 - x11474;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11476 = Fp(x10874) + Fp(x11379);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11477 = x11357 * x11379;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11478 = x11476 - x11477;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11479 = Fp(x10875) + Fp(x11383);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11480 = x11361 * x11383;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11481 = x11479 - x11480;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11482 = Fp(x10876) + Fp(x11387);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11483 = x11365 * x11387;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x11482 - x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      Fp x11485 = Fp(x10877) + Fp(x11391);
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      Fp x11486 = x11369 * x11391;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x11485 - x11486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11488 = x11001 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11489 = Fp(x11000) + Fp(x11488);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11490 = x11002 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11491 = Fp(x11489) + Fp(x11490);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11492 = x11003 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11493 = Fp(x11491) + Fp(x11492);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11494 = x11004 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11495 = Fp(x11493) + Fp(x11494);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11496 = x11005 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11497 = Fp(x11495) + Fp(x11496);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11498 = x11006 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11499 = Fp(x11497) + Fp(x11498);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11500 = x11007 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11501 = Fp(x11499) + Fp(x11500);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11502 = x11008 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11503 = Fp(x11501) + Fp(x11502);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11504 = x11009 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11505 = Fp(x11503) + Fp(x11504);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11506 = x11010 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11507 = Fp(x11505) + Fp(x11506);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11508 = x11011 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11509 = Fp(x11507) + Fp(x11508);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11510 = x11012 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11511 = Fp(x11509) + Fp(x11510);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11512 = x11013 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11513 = Fp(x11511) + Fp(x11512);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11514 = x11014 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11515 = Fp(x11513) + Fp(x11514);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11516 = x11015 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11517 = Fp(x11515) + Fp(x11516);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11518 = x11017 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11519 = Fp(x11016) + Fp(x11518);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11520 = x11018 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11521 = Fp(x11519) + Fp(x11520);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11522 = x11019 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11523 = Fp(x11521) + Fp(x11522);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11524 = x11020 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11525 = Fp(x11523) + Fp(x11524);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11526 = x11021 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11527 = Fp(x11525) + Fp(x11526);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11528 = x11022 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11529 = Fp(x11527) + Fp(x11528);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11530 = x11023 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11531 = Fp(x11529) + Fp(x11530);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11532 = x11024 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11533 = Fp(x11531) + Fp(x11532);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11534 = x11025 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11535 = Fp(x11533) + Fp(x11534);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11536 = x11026 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11537 = Fp(x11535) + Fp(x11536);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11538 = x11027 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11539 = Fp(x11537) + Fp(x11538);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11540 = x11028 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11541 = Fp(x11539) + Fp(x11540);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11542 = x11029 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11543 = Fp(x11541) + Fp(x11542);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11544 = x11030 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11545 = Fp(x11543) + Fp(x11544);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11546 = x11031 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11547 = Fp(x11545) + Fp(x11546);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11548 = x10969 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11549 = Fp(x10968) + Fp(x11548);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11550 = x10970 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11551 = Fp(x11549) + Fp(x11550);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11552 = x10971 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11553 = Fp(x11551) + Fp(x11552);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11554 = x10972 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11555 = Fp(x11553) + Fp(x11554);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11556 = x10973 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11557 = Fp(x11555) + Fp(x11556);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11558 = x10974 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11559 = Fp(x11557) + Fp(x11558);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11560 = x10975 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11561 = Fp(x11559) + Fp(x11560);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11562 = x10976 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11563 = Fp(x11561) + Fp(x11562);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11564 = x10977 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11565 = Fp(x11563) + Fp(x11564);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11566 = x10978 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11567 = Fp(x11565) + Fp(x11566);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11568 = x10979 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11569 = Fp(x11567) + Fp(x11568);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11570 = x10980 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11571 = Fp(x11569) + Fp(x11570);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11572 = x10981 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11573 = Fp(x11571) + Fp(x11572);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11574 = x10982 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11575 = Fp(x11573) + Fp(x11574);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11576 = x10983 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11577 = Fp(x11575) + Fp(x11576);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11578 = x10985 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11579 = Fp(x10984) + Fp(x11578);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11580 = x10986 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11581 = Fp(x11579) + Fp(x11580);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11582 = x10987 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11583 = Fp(x11581) + Fp(x11582);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11584 = x10988 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11585 = Fp(x11583) + Fp(x11584);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11586 = x10989 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11587 = Fp(x11585) + Fp(x11586);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11588 = x10990 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11589 = Fp(x11587) + Fp(x11588);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11590 = x10991 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11591 = Fp(x11589) + Fp(x11590);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11592 = x10992 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11593 = Fp(x11591) + Fp(x11592);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11594 = x10993 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11595 = Fp(x11593) + Fp(x11594);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11596 = x10994 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11597 = Fp(x11595) + Fp(x11596);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11598 = x10995 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11599 = Fp(x11597) + Fp(x11598);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11600 = x10996 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11601 = Fp(x11599) + Fp(x11600);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11602 = x10997 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11603 = Fp(x11601) + Fp(x11602);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11604 = x10998 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11605 = Fp(x11603) + Fp(x11604);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11606 = x10999 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11607 = Fp(x11605) + Fp(x11606);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11608 = x10872 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11609 = x95 - x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11610 = x11609 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11611 = Fp(x11608) + Fp(x11610);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11612 = x10873 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11613 = x95 - x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11614 = x11613 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11615 = Fp(x11612) + Fp(x11614);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11616 = x10874 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11617 = x95 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11618 = x11617 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11619 = Fp(x11616) + Fp(x11618);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11620 = x10875 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11621 = x95 - x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11622 = x11621 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11623 = Fp(x11620) + Fp(x11622);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11624 = x10876 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11625 = x95 - x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11626 = x11625 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11627 = Fp(x11624) + Fp(x11626);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11628 = x10877 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11629 = x95 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11630 = x11629 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11631 = Fp(x11628) + Fp(x11630);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11632 = x10878 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11633 = x95 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11634 = x11633 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11635 = Fp(x11632) + Fp(x11634);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11636 = x10879 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11637 = x95 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11638 = x11637 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11639 = Fp(x11636) + Fp(x11638);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11640 = x10880 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11641 = x95 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11642 = x11641 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11643 = Fp(x11640) + Fp(x11642);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11644 = x10881 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11645 = x95 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11646 = x11645 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11647 = Fp(x11644) + Fp(x11646);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11648 = x10882 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11649 = x95 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11650 = x11649 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11651 = Fp(x11648) + Fp(x11650);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11652 = x10883 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11653 = x95 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11654 = x11653 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11655 = Fp(x11652) + Fp(x11654);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11656 = x10884 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11657 = x95 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11658 = x11657 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11659 = Fp(x11656) + Fp(x11658);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11660 = x10885 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11661 = x95 - x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11662 = x11661 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11663 = Fp(x11660) + Fp(x11662);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11664 = x10886 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11665 = x95 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11666 = x11665 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11667 = Fp(x11664) + Fp(x11666);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11668 = x10887 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11669 = x95 - x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11670 = x11669 * x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11671 = Fp(x11668) + Fp(x11670);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11672 = x10888 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11673 = x95 - x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11674 = x11673 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11675 = Fp(x11672) + Fp(x11674);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11676 = x10889 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11677 = x95 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11678 = x11677 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11679 = Fp(x11676) + Fp(x11678);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11680 = x10890 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11681 = x95 - x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11682 = x11681 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11683 = Fp(x11680) + Fp(x11682);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11684 = x10891 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11685 = x95 - x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11686 = x11685 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11687 = Fp(x11684) + Fp(x11686);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11688 = x10892 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11689 = x95 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11690 = x11689 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11691 = Fp(x11688) + Fp(x11690);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11692 = x10893 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11693 = x95 - x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11694 = x11693 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11695 = Fp(x11692) + Fp(x11694);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11696 = x10894 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11697 = x95 - x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11698 = x11697 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11699 = Fp(x11696) + Fp(x11698);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11700 = x10895 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11701 = x95 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11702 = x11701 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11703 = Fp(x11700) + Fp(x11702);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11704 = x10896 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11705 = x95 - x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11706 = x11705 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11707 = Fp(x11704) + Fp(x11706);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11708 = x10897 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11709 = x95 - x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11710 = x11709 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11711 = Fp(x11708) + Fp(x11710);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11712 = x10898 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11713 = x95 - x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11714 = x11713 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11715 = Fp(x11712) + Fp(x11714);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11716 = x10899 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11717 = x95 - x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11718 = x11717 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11719 = Fp(x11716) + Fp(x11718);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11720 = x10900 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11721 = x95 - x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11722 = x11721 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11723 = Fp(x11720) + Fp(x11722);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11724 = x10901 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11725 = x95 - x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11726 = x11725 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11727 = Fp(x11724) + Fp(x11726);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11728 = x10902 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11729 = x95 - x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11730 = x11729 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11731 = Fp(x11728) + Fp(x11730);
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11732 = x10903 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11733 = x95 - x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      Fp x11734 = x11733 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      Fp x11735 = Fp(x11732) + Fp(x11734);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11736 = x11615 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11737 = Fp(x11611) + Fp(x11736);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11738 = x11619 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11739 = Fp(x11737) + Fp(x11738);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11740 = x11623 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11741 = Fp(x11739) + Fp(x11740);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11742 = x11627 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11743 = Fp(x11741) + Fp(x11742);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11744 = x11631 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11745 = Fp(x11743) + Fp(x11744);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11746 = x11635 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11747 = Fp(x11745) + Fp(x11746);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11748 = x11639 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11749 = Fp(x11747) + Fp(x11748);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11750 = x11643 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11751 = Fp(x11749) + Fp(x11750);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11752 = x11647 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11753 = Fp(x11751) + Fp(x11752);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11754 = x11651 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11755 = Fp(x11753) + Fp(x11754);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11756 = x11655 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11757 = Fp(x11755) + Fp(x11756);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11758 = x11659 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11759 = Fp(x11757) + Fp(x11758);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11760 = x11663 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11761 = Fp(x11759) + Fp(x11760);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11762 = x11667 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11763 = Fp(x11761) + Fp(x11762);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11764 = x11671 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11765 = Fp(x11763) + Fp(x11764);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11766 = x11679 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11767 = Fp(x11675) + Fp(x11766);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11768 = x11683 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11769 = Fp(x11767) + Fp(x11768);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11770 = x11687 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11771 = Fp(x11769) + Fp(x11770);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11772 = x11691 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11773 = Fp(x11771) + Fp(x11772);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11774 = x11695 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11775 = Fp(x11773) + Fp(x11774);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11776 = x11699 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11777 = Fp(x11775) + Fp(x11776);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11778 = x11703 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11779 = Fp(x11777) + Fp(x11778);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11780 = x11707 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11781 = Fp(x11779) + Fp(x11780);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11782 = x11711 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11783 = Fp(x11781) + Fp(x11782);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11784 = x11715 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11785 = Fp(x11783) + Fp(x11784);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11786 = x11719 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11787 = Fp(x11785) + Fp(x11786);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11788 = x11723 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11789 = Fp(x11787) + Fp(x11788);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11790 = x11727 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11791 = Fp(x11789) + Fp(x11790);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11792 = x11731 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11793 = Fp(x11791) + Fp(x11792);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11794 = x11735 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11795 = Fp(x11793) + Fp(x11794);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11796 = x11397 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11797 = Fp(x11394) + Fp(x11796);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11798 = x11400 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11799 = Fp(x11797) + Fp(x11798);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11800 = x11403 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11801 = Fp(x11799) + Fp(x11800);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11802 = x11406 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11803 = Fp(x11801) + Fp(x11802);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11804 = x11409 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11805 = Fp(x11803) + Fp(x11804);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11806 = x11412 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11807 = Fp(x11805) + Fp(x11806);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11808 = x11415 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11809 = Fp(x11807) + Fp(x11808);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11810 = x11418 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11811 = Fp(x11809) + Fp(x11810);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11812 = x11421 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11813 = Fp(x11811) + Fp(x11812);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11814 = x11424 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11815 = Fp(x11813) + Fp(x11814);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11816 = x11427 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11817 = Fp(x11815) + Fp(x11816);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11818 = x11430 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11819 = Fp(x11817) + Fp(x11818);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11820 = x11433 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11821 = Fp(x11819) + Fp(x11820);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11822 = x11436 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11823 = Fp(x11821) + Fp(x11822);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11824 = x11439 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11825 = Fp(x11823) + Fp(x11824);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11826 = x11445 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11827 = Fp(x11442) + Fp(x11826);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11828 = x11448 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11829 = Fp(x11827) + Fp(x11828);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11830 = x11451 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11831 = Fp(x11829) + Fp(x11830);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11832 = x11454 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11833 = Fp(x11831) + Fp(x11832);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11834 = x11457 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11835 = Fp(x11833) + Fp(x11834);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11836 = x11460 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11837 = Fp(x11835) + Fp(x11836);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11838 = x11463 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11839 = Fp(x11837) + Fp(x11838);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11840 = x11466 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11841 = Fp(x11839) + Fp(x11840);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11842 = x11469 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11843 = Fp(x11841) + Fp(x11842);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11844 = x11472 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11845 = Fp(x11843) + Fp(x11844);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11846 = x11475 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11847 = Fp(x11845) + Fp(x11846);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11848 = x11478 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11849 = Fp(x11847) + Fp(x11848);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11850 = x11481 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11851 = Fp(x11849) + Fp(x11850);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11852 = x11484 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11853 = Fp(x11851) + Fp(x11852);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x11854 = x11487 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x11855 = Fp(x11853) + Fp(x11854);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11856 = Fp(x11765) + Fp(x11825);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11857 = Fp(x11795) + Fp(x11855);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11858 = Fp(x11577) + Fp(x11856);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11859 = Fp(x11607) + Fp(x11857);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11860 = Fp(x11037) + Fp(x11858);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11861 = Fp(x11039) + Fp(x11859);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11862 = Fp(x11517) + Fp(x11860);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x11863 = Fp(x11547) + Fp(x11861);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11864 = x10744 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11865 = x95 - x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11866 = x11864 * x11865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11867 = x95 - x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11868 = x10744 * x11867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11869 = x11868 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11870 = Fp(x11866) + Fp(x11869);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11871 = x95 - x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11872 = x11871 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11873 = x11872 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11874 = Fp(x11870) + Fp(x11873);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11875 = x11864 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11876 = Fp(x11874) + Fp(x11875);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11877 = x10745 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11878 = x95 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11879 = x11877 * x11878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11880 = x95 - x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11881 = x10745 * x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11882 = x11881 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11883 = Fp(x11879) + Fp(x11882);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11884 = x95 - x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11885 = x11884 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11886 = x11885 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11887 = Fp(x11883) + Fp(x11886);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11888 = x11877 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11889 = Fp(x11887) + Fp(x11888);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11890 = x10746 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11891 = x95 - x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11892 = x11890 * x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11893 = x95 - x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11894 = x10746 * x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11895 = x11894 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11896 = Fp(x11892) + Fp(x11895);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11897 = x95 - x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11898 = x11897 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11899 = x11898 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11900 = Fp(x11896) + Fp(x11899);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11901 = x11890 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11902 = Fp(x11900) + Fp(x11901);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11903 = x10747 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11904 = x95 - x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11905 = x11903 * x11904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11906 = x95 - x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11907 = x10747 * x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11908 = x11907 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11909 = Fp(x11905) + Fp(x11908);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11910 = x95 - x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11911 = x11910 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11912 = x11911 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11913 = Fp(x11909) + Fp(x11912);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11914 = x11903 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11915 = Fp(x11913) + Fp(x11914);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11916 = x10748 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11917 = x95 - x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11918 = x11916 * x11917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11919 = x95 - x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11920 = x10748 * x11919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11921 = x11920 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11922 = Fp(x11918) + Fp(x11921);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11923 = x95 - x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11924 = x11923 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11925 = x11924 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11926 = Fp(x11922) + Fp(x11925);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11927 = x11916 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11928 = Fp(x11926) + Fp(x11927);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11929 = x10749 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11930 = x95 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11931 = x11929 * x11930;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11932 = x95 - x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11933 = x10749 * x11932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11934 = x11933 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11935 = Fp(x11931) + Fp(x11934);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11936 = x95 - x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11937 = x11936 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11938 = x11937 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11939 = Fp(x11935) + Fp(x11938);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11940 = x11929 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11941 = Fp(x11939) + Fp(x11940);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11942 = x10750 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11943 = x95 - x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11944 = x11942 * x11943;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11945 = x95 - x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11946 = x10750 * x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11947 = x11946 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11948 = Fp(x11944) + Fp(x11947);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11949 = x95 - x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11950 = x11949 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11951 = x11950 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11952 = Fp(x11948) + Fp(x11951);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11953 = x11942 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11954 = Fp(x11952) + Fp(x11953);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11955 = x10751 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11956 = x95 - x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11957 = x11955 * x11956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11958 = x95 - x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11959 = x10751 * x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11960 = x11959 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11961 = Fp(x11957) + Fp(x11960);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11962 = x95 - x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11963 = x11962 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11964 = x11963 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11965 = Fp(x11961) + Fp(x11964);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11966 = x11955 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11967 = Fp(x11965) + Fp(x11966);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11968 = x10752 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11969 = x95 - x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11970 = x11968 * x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11971 = x95 - x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11972 = x10752 * x11971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11973 = x11972 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11974 = Fp(x11970) + Fp(x11973);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11975 = x95 - x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11976 = x11975 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11977 = x11976 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11978 = Fp(x11974) + Fp(x11977);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11979 = x11968 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11980 = Fp(x11978) + Fp(x11979);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11981 = x10753 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11982 = x95 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11983 = x11981 * x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11984 = x95 - x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11985 = x10753 * x11984;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11986 = x11985 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11987 = Fp(x11983) + Fp(x11986);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11988 = x95 - x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11989 = x11988 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x11990 = x11989 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11991 = Fp(x11987) + Fp(x11990);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x11992 = x11981 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11993 = Fp(x11991) + Fp(x11992);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11994 = x10754 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11995 = x95 - x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x11996 = x11994 * x11995;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11997 = x95 - x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11998 = x10754 * x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x11999 = x11998 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12000 = Fp(x11996) + Fp(x11999);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12001 = x95 - x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12002 = x12001 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12003 = x12002 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12004 = Fp(x12000) + Fp(x12003);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12005 = x11994 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12006 = Fp(x12004) + Fp(x12005);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12007 = x10755 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12008 = x95 - x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12009 = x12007 * x12008;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12010 = x95 - x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12011 = x10755 * x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12012 = x12011 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12013 = Fp(x12009) + Fp(x12012);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12014 = x95 - x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12015 = x12014 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12016 = x12015 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12017 = Fp(x12013) + Fp(x12016);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12018 = x12007 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12019 = Fp(x12017) + Fp(x12018);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12020 = x10756 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12021 = x95 - x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12022 = x12020 * x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12023 = x95 - x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12024 = x10756 * x12023;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12025 = x12024 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12026 = Fp(x12022) + Fp(x12025);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12027 = x95 - x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12028 = x12027 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12029 = x12028 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12030 = Fp(x12026) + Fp(x12029);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12031 = x12020 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12032 = Fp(x12030) + Fp(x12031);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12033 = x10757 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12034 = x95 - x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12035 = x12033 * x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12036 = x95 - x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12037 = x10757 * x12036;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12038 = x12037 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12039 = Fp(x12035) + Fp(x12038);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12040 = x95 - x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12041 = x12040 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12042 = x12041 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12043 = Fp(x12039) + Fp(x12042);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12044 = x12033 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12045 = Fp(x12043) + Fp(x12044);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12046 = x10758 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12047 = x95 - x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12048 = x12046 * x12047;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12049 = x95 - x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12050 = x10758 * x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12051 = x12050 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12052 = Fp(x12048) + Fp(x12051);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12053 = x95 - x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12054 = x12053 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12055 = x12054 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12056 = Fp(x12052) + Fp(x12055);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12057 = x12046 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12058 = Fp(x12056) + Fp(x12057);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12059 = x10759 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12060 = x95 - x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12061 = x12059 * x12060;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12062 = x95 - x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12063 = x10759 * x12062;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12064 = x12063 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12065 = Fp(x12061) + Fp(x12064);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12066 = x95 - x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12067 = x12066 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12068 = x12067 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12069 = Fp(x12065) + Fp(x12068);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12070 = x12059 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12071 = Fp(x12069) + Fp(x12070);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12072 = x10760 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12073 = x95 - x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12074 = x12072 * x12073;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12075 = x95 - x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12076 = x10760 * x12075;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12077 = x12076 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12078 = Fp(x12074) + Fp(x12077);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12079 = x95 - x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12080 = x12079 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12081 = x12080 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12082 = Fp(x12078) + Fp(x12081);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12083 = x12072 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12084 = Fp(x12082) + Fp(x12083);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12085 = x10761 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12086 = x95 - x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12087 = x12085 * x12086;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12088 = x95 - x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12089 = x10761 * x12088;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12090 = x12089 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12091 = Fp(x12087) + Fp(x12090);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12092 = x95 - x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12093 = x12092 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12094 = x12093 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12095 = Fp(x12091) + Fp(x12094);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12096 = x12085 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12097 = Fp(x12095) + Fp(x12096);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12098 = x10762 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12099 = x95 - x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12100 = x12098 * x12099;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12101 = x95 - x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12102 = x10762 * x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12103 = x12102 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12104 = Fp(x12100) + Fp(x12103);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12105 = x95 - x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12106 = x12105 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12107 = x12106 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12108 = Fp(x12104) + Fp(x12107);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12109 = x12098 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12110 = Fp(x12108) + Fp(x12109);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12111 = x10763 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12112 = x95 - x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12113 = x12111 * x12112;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12114 = x95 - x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12115 = x10763 * x12114;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12116 = x12115 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12117 = Fp(x12113) + Fp(x12116);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12118 = x95 - x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12119 = x12118 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12120 = x12119 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12121 = Fp(x12117) + Fp(x12120);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12122 = x12111 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12123 = Fp(x12121) + Fp(x12122);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12124 = x10764 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12125 = x95 - x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12126 = x12124 * x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12127 = x95 - x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12128 = x10764 * x12127;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12129 = x12128 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12130 = Fp(x12126) + Fp(x12129);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12131 = x95 - x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12132 = x12131 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12133 = x12132 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12134 = Fp(x12130) + Fp(x12133);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12135 = x12124 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12136 = Fp(x12134) + Fp(x12135);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12137 = x10765 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12138 = x95 - x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12139 = x12137 * x12138;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12140 = x95 - x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12141 = x10765 * x12140;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12142 = x12141 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12143 = Fp(x12139) + Fp(x12142);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12144 = x95 - x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12145 = x12144 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12146 = x12145 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12147 = Fp(x12143) + Fp(x12146);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12148 = x12137 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12149 = Fp(x12147) + Fp(x12148);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12150 = x10766 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12151 = x95 - x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12152 = x12150 * x12151;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12153 = x95 - x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12154 = x10766 * x12153;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12155 = x12154 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12156 = Fp(x12152) + Fp(x12155);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12157 = x95 - x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12158 = x12157 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12159 = x12158 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12160 = Fp(x12156) + Fp(x12159);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12161 = x12150 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12162 = Fp(x12160) + Fp(x12161);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12163 = x10767 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12164 = x95 - x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12165 = x12163 * x12164;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12166 = x95 - x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12167 = x10767 * x12166;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12168 = x12167 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12169 = Fp(x12165) + Fp(x12168);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12170 = x95 - x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12171 = x12170 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12172 = x12171 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12173 = Fp(x12169) + Fp(x12172);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12174 = x12163 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12175 = Fp(x12173) + Fp(x12174);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12176 = x10768 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12177 = x95 - x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12178 = x12176 * x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12179 = x95 - x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12180 = x10768 * x12179;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12181 = x12180 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12182 = Fp(x12178) + Fp(x12181);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12183 = x95 - x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12184 = x12183 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12185 = x12184 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12186 = Fp(x12182) + Fp(x12185);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12187 = x12176 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12188 = Fp(x12186) + Fp(x12187);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12189 = x10769 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12190 = x95 - x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12191 = x12189 * x12190;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12192 = x95 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12193 = x10769 * x12192;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12194 = x12193 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12195 = Fp(x12191) + Fp(x12194);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12196 = x95 - x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12197 = x12196 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12198 = x12197 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12199 = Fp(x12195) + Fp(x12198);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12200 = x12189 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12201 = Fp(x12199) + Fp(x12200);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12202 = x10770 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12203 = x95 - x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12204 = x12202 * x12203;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12205 = x95 - x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12206 = x10770 * x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12207 = x12206 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12208 = Fp(x12204) + Fp(x12207);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12209 = x95 - x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12210 = x12209 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12211 = x12210 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12212 = Fp(x12208) + Fp(x12211);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12213 = x12202 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12214 = Fp(x12212) + Fp(x12213);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12215 = x10771 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12216 = x95 - x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12217 = x12215 * x12216;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12218 = x95 - x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12219 = x10771 * x12218;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12220 = x12219 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12221 = Fp(x12217) + Fp(x12220);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12222 = x95 - x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12223 = x12222 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12224 = x12223 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12225 = Fp(x12221) + Fp(x12224);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12226 = x12215 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12227 = Fp(x12225) + Fp(x12226);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12228 = x10772 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12229 = x95 - x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12230 = x12228 * x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12231 = x95 - x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12232 = x10772 * x12231;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12233 = x12232 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12234 = Fp(x12230) + Fp(x12233);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12235 = x95 - x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12236 = x12235 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12237 = x12236 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12238 = Fp(x12234) + Fp(x12237);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12239 = x12228 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12240 = Fp(x12238) + Fp(x12239);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12241 = x10773 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12242 = x95 - x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12243 = x12241 * x12242;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12244 = x95 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12245 = x10773 * x12244;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12246 = x12245 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12247 = Fp(x12243) + Fp(x12246);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12248 = x95 - x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12249 = x12248 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12250 = x12249 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12251 = Fp(x12247) + Fp(x12250);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12252 = x12241 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12253 = Fp(x12251) + Fp(x12252);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12254 = x10774 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12255 = x95 - x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12256 = x12254 * x12255;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12257 = x95 - x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12258 = x10774 * x12257;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12259 = x12258 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12260 = Fp(x12256) + Fp(x12259);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12261 = x95 - x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12262 = x12261 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12263 = x12262 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12264 = Fp(x12260) + Fp(x12263);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12265 = x12254 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12266 = Fp(x12264) + Fp(x12265);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12267 = x10775 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12268 = x95 - x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12269 = x12267 * x12268;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12270 = x95 - x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12271 = x10775 * x12270;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      Fp x12272 = x12271 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12273 = Fp(x12269) + Fp(x12272);
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12274 = x95 - x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12275 = x12274 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      Fp x12276 = x12275 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12277 = Fp(x12273) + Fp(x12276);
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      Fp x12278 = x12267 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      Fp x12279 = Fp(x12277) + Fp(x12278);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12280 = x11889 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12281 = Fp(x11876) + Fp(x12280);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12282 = x11902 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12283 = Fp(x12281) + Fp(x12282);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12284 = x11915 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12285 = Fp(x12283) + Fp(x12284);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12286 = x11928 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12287 = Fp(x12285) + Fp(x12286);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12288 = x11941 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12289 = Fp(x12287) + Fp(x12288);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12290 = x11954 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12291 = Fp(x12289) + Fp(x12290);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12292 = x11967 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12293 = Fp(x12291) + Fp(x12292);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12294 = x11980 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12295 = Fp(x12293) + Fp(x12294);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12296 = x11993 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12297 = Fp(x12295) + Fp(x12296);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12298 = x12006 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12299 = Fp(x12297) + Fp(x12298);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12300 = x12019 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12301 = Fp(x12299) + Fp(x12300);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12302 = x12032 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12303 = Fp(x12301) + Fp(x12302);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12304 = x12045 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12305 = Fp(x12303) + Fp(x12304);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12306 = x12058 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12307 = Fp(x12305) + Fp(x12306);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12308 = x12071 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12309 = Fp(x12307) + Fp(x12308);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12310 = x12097 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12311 = Fp(x12084) + Fp(x12310);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12312 = x12110 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12313 = Fp(x12311) + Fp(x12312);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12314 = x12123 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12315 = Fp(x12313) + Fp(x12314);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12316 = x12136 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12317 = Fp(x12315) + Fp(x12316);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12318 = x12149 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12319 = Fp(x12317) + Fp(x12318);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12320 = x12162 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12321 = Fp(x12319) + Fp(x12320);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12322 = x12175 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12323 = Fp(x12321) + Fp(x12322);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12324 = x12188 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12325 = Fp(x12323) + Fp(x12324);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12326 = x12201 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12327 = Fp(x12325) + Fp(x12326);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12328 = x12214 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12329 = Fp(x12327) + Fp(x12328);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12330 = x12227 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12331 = Fp(x12329) + Fp(x12330);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12332 = x12240 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12333 = Fp(x12331) + Fp(x12332);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12334 = x12253 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12335 = Fp(x12333) + Fp(x12334);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12336 = x12266 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12337 = Fp(x12335) + Fp(x12336);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12338 = x12279 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12339 = Fp(x12337) + Fp(x12338);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12340 = x11173 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12341 = Fp(x11170) + Fp(x12340);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12342 = x11176 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12343 = Fp(x12341) + Fp(x12342);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12344 = x11179 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12345 = Fp(x12343) + Fp(x12344);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12346 = x11182 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12347 = Fp(x12345) + Fp(x12346);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12348 = x11185 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12349 = Fp(x12347) + Fp(x12348);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12350 = x11188 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12351 = Fp(x12349) + Fp(x12350);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12352 = x11191 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12353 = Fp(x12351) + Fp(x12352);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12354 = x11194 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12355 = Fp(x12353) + Fp(x12354);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12356 = x11197 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12357 = Fp(x12355) + Fp(x12356);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12358 = x11200 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12359 = Fp(x12357) + Fp(x12358);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12360 = x11203 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12361 = Fp(x12359) + Fp(x12360);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12362 = x11206 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12363 = Fp(x12361) + Fp(x12362);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12364 = x11209 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12365 = Fp(x12363) + Fp(x12364);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12366 = x11212 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12367 = Fp(x12365) + Fp(x12366);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12368 = x11215 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12369 = Fp(x12367) + Fp(x12368);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12370 = x11221 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12371 = Fp(x11218) + Fp(x12370);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12372 = x11224 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12373 = Fp(x12371) + Fp(x12372);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12374 = x11227 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12375 = Fp(x12373) + Fp(x12374);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12376 = x11230 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12377 = Fp(x12375) + Fp(x12376);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12378 = x11233 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12379 = Fp(x12377) + Fp(x12378);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12380 = x11236 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12381 = Fp(x12379) + Fp(x12380);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12382 = x11239 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12383 = Fp(x12381) + Fp(x12382);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12384 = x11242 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12385 = Fp(x12383) + Fp(x12384);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12386 = x11245 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12387 = Fp(x12385) + Fp(x12386);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12388 = x11248 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12389 = Fp(x12387) + Fp(x12388);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12390 = x11251 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12391 = Fp(x12389) + Fp(x12390);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12392 = x11254 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12393 = Fp(x12391) + Fp(x12392);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12394 = x11257 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12395 = Fp(x12393) + Fp(x12394);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12396 = x11260 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12397 = Fp(x12395) + Fp(x12396);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12398 = x11263 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12399 = Fp(x12397) + Fp(x12398);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x12400 = Fp(x12309) + Fp(x12369);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x12401 = Fp(x12339) + Fp(x12399);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x12402 = Fp(x11862) + Fp(x12400);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x12403 = Fp(x11863) + Fp(x12401);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12404 = x10841 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12405 = Fp(x10840) + Fp(x12404);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12406 = x10842 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12407 = Fp(x12405) + Fp(x12406);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12408 = x10843 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12409 = Fp(x12407) + Fp(x12408);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12410 = x10844 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12411 = Fp(x12409) + Fp(x12410);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12412 = x10845 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12413 = Fp(x12411) + Fp(x12412);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12414 = x10846 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12415 = Fp(x12413) + Fp(x12414);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12416 = x10847 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12417 = Fp(x12415) + Fp(x12416);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12418 = x10848 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12419 = Fp(x12417) + Fp(x12418);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12420 = x10849 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12421 = Fp(x12419) + Fp(x12420);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12422 = x10850 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12423 = Fp(x12421) + Fp(x12422);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12424 = x10851 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12425 = Fp(x12423) + Fp(x12424);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12426 = x10852 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12427 = Fp(x12425) + Fp(x12426);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12428 = x10853 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12429 = Fp(x12427) + Fp(x12428);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12430 = x10854 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12431 = Fp(x12429) + Fp(x12430);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12432 = x10855 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12433 = Fp(x12431) + Fp(x12432);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12434 = x10857 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12435 = Fp(x10856) + Fp(x12434);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12436 = x10858 * x78;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12437 = Fp(x12435) + Fp(x12436);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12438 = x10859 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12439 = Fp(x12437) + Fp(x12438);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12440 = x10860 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12441 = Fp(x12439) + Fp(x12440);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12442 = x10861 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12443 = Fp(x12441) + Fp(x12442);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12444 = x10862 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12445 = Fp(x12443) + Fp(x12444);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12446 = x10863 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12447 = Fp(x12445) + Fp(x12446);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12448 = x10864 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12449 = Fp(x12447) + Fp(x12448);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12450 = x10865 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12451 = Fp(x12449) + Fp(x12450);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12452 = x10866 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12453 = Fp(x12451) + Fp(x12452);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12454 = x10867 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12455 = Fp(x12453) + Fp(x12454);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12456 = x10868 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12457 = Fp(x12455) + Fp(x12456);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12458 = x10869 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12459 = Fp(x12457) + Fp(x12458);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12460 = x10870 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12461 = Fp(x12459) + Fp(x12460);
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      Fp x12462 = x10871 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      Fp x12463 = Fp(x12461) + Fp(x12462);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x12464 = Fp(x11862) + Fp(x12433);
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      Fp x12465 = Fp(x11863) + Fp(x12463);
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      args[2][144 * steps + cycle] = x12402;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      args[2][146 * steps + cycle] = x12464;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      args[2][145 * steps + cycle] = x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      args[2][147 * steps + cycle] = x12465;
      if (x8497 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
        Fp x12466(args[2][144 * steps + ((cycle - 0) & mask)]);
        assert(x12466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
        Fp x12467(args[2][145 * steps + ((cycle - 0) & mask)]);
        assert(x12467 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12468 = Fp(x12466.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][150 * steps + cycle] = x12468;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12469 = Fp(x12466.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12470 = x12469 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][151 * steps + cycle] = x12470;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12471 = Fp(x12466.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12472 = x12471 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][152 * steps + cycle] = x12472;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12473 = Fp(x12466.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12474 = x12473 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][153 * steps + cycle] = x12474;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12475 = Fp(x12466.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12476 = x12475 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][154 * steps + cycle] = x12476;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12477 = Fp(x12466.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12478 = x12477 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][155 * steps + cycle] = x12478;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12479 = Fp(x12466.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12480 = x12479 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][156 * steps + cycle] = x12480;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12481 = Fp(x12466.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12482 = x12481 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][157 * steps + cycle] = x12482;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12483 = Fp(x12466.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12484 = x12483 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][158 * steps + cycle] = x12484;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12485 = Fp(x12466.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12486 = x12485 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][159 * steps + cycle] = x12486;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12487 = Fp(x12466.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12488 = x12487 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][160 * steps + cycle] = x12488;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12489 = Fp(x12466.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12490 = x12489 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][161 * steps + cycle] = x12490;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12491 = Fp(x12466.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12492 = x12491 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][162 * steps + cycle] = x12492;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12493 = Fp(x12466.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12494 = x12493 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][163 * steps + cycle] = x12494;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12495 = Fp(x12466.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12496 = x12495 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][164 * steps + cycle] = x12496;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12497 = Fp(x12466.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12498 = x12497 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][165 * steps + cycle] = x12498;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12499(args[2][150 * steps + ((cycle - 0) & mask)]);
        assert(x12499 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12500(args[2][151 * steps + ((cycle - 0) & mask)]);
        assert(x12500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12501 = x12500 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12502 = Fp(x12499) + Fp(x12501);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12503(args[2][152 * steps + ((cycle - 0) & mask)]);
        assert(x12503 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12504 = x12503 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12505 = Fp(x12502) + Fp(x12504);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12506(args[2][153 * steps + ((cycle - 0) & mask)]);
        assert(x12506 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12507 = x12506 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12508 = Fp(x12505) + Fp(x12507);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12509(args[2][154 * steps + ((cycle - 0) & mask)]);
        assert(x12509 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12510 = x12509 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12511 = Fp(x12508) + Fp(x12510);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12512(args[2][155 * steps + ((cycle - 0) & mask)]);
        assert(x12512 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12513 = x12512 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12514 = Fp(x12511) + Fp(x12513);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12515(args[2][156 * steps + ((cycle - 0) & mask)]);
        assert(x12515 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12516 = x12515 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12517 = Fp(x12514) + Fp(x12516);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12518(args[2][157 * steps + ((cycle - 0) & mask)]);
        assert(x12518 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12519 = x12518 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12520 = Fp(x12517) + Fp(x12519);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12521(args[2][158 * steps + ((cycle - 0) & mask)]);
        assert(x12521 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12522 = x12521 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12523 = Fp(x12520) + Fp(x12522);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12524(args[2][159 * steps + ((cycle - 0) & mask)]);
        assert(x12524 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12525 = x12524 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12526 = Fp(x12523) + Fp(x12525);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12527(args[2][160 * steps + ((cycle - 0) & mask)]);
        assert(x12527 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12528 = x12527 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12529 = Fp(x12526) + Fp(x12528);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12530(args[2][161 * steps + ((cycle - 0) & mask)]);
        assert(x12530 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12531 = x12530 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12532 = Fp(x12529) + Fp(x12531);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12533(args[2][162 * steps + ((cycle - 0) & mask)]);
        assert(x12533 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12534 = x12533 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12535 = Fp(x12532) + Fp(x12534);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12536(args[2][163 * steps + ((cycle - 0) & mask)]);
        assert(x12536 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12537 = x12536 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12538 = Fp(x12535) + Fp(x12537);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12539(args[2][164 * steps + ((cycle - 0) & mask)]);
        assert(x12539 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12540 = x12539 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12541 = Fp(x12538) + Fp(x12540);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12542(args[2][165 * steps + ((cycle - 0) & mask)]);
        assert(x12542 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12543 = x12542 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12544 = Fp(x12541) + Fp(x12543);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12545 = x12466 - x12544;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x12546 = x12545 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12547 = Fp(x12546.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][76 * steps + cycle] = x12547;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12548(args[2][76 * steps + ((cycle - 0) & mask)]);
        assert(x12548 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12549 = x12546 - x12548;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        Fp x12550 = x12549 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12551 = x95 - x12550;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        Fp x12552 = x12550 * x12551;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12552 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        Fp x12553 = Fp(x12467) + Fp(x12546);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12554 = Fp(x12553.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][166 * steps + cycle] = x12554;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12555 = Fp(x12553.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12556 = x12555 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][167 * steps + cycle] = x12556;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12557 = Fp(x12553.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12558 = x12557 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][168 * steps + cycle] = x12558;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12559 = Fp(x12553.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12560 = x12559 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][169 * steps + cycle] = x12560;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12561 = Fp(x12553.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12562 = x12561 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][170 * steps + cycle] = x12562;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12563 = Fp(x12553.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12564 = x12563 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][171 * steps + cycle] = x12564;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12565 = Fp(x12553.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12566 = x12565 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][172 * steps + cycle] = x12566;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12567 = Fp(x12553.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12568 = x12567 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][173 * steps + cycle] = x12568;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12569 = Fp(x12553.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12570 = x12569 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][174 * steps + cycle] = x12570;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12571 = Fp(x12553.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12572 = x12571 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][175 * steps + cycle] = x12572;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12573 = Fp(x12553.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12574 = x12573 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][176 * steps + cycle] = x12574;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12575 = Fp(x12553.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12576 = x12575 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][177 * steps + cycle] = x12576;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12577 = Fp(x12553.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12578 = x12577 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][178 * steps + cycle] = x12578;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12579 = Fp(x12553.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12580 = x12579 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][179 * steps + cycle] = x12580;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12581 = Fp(x12553.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12582 = x12581 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][180 * steps + cycle] = x12582;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12583 = Fp(x12553.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12584 = x12583 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][181 * steps + cycle] = x12584;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12585(args[2][166 * steps + ((cycle - 0) & mask)]);
        assert(x12585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12586(args[2][167 * steps + ((cycle - 0) & mask)]);
        assert(x12586 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12587 = x12586 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12588 = Fp(x12585) + Fp(x12587);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12589(args[2][168 * steps + ((cycle - 0) & mask)]);
        assert(x12589 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12590 = x12589 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12591 = Fp(x12588) + Fp(x12590);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12592(args[2][169 * steps + ((cycle - 0) & mask)]);
        assert(x12592 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12593 = x12592 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12594 = Fp(x12591) + Fp(x12593);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12595(args[2][170 * steps + ((cycle - 0) & mask)]);
        assert(x12595 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12596 = x12595 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12597 = Fp(x12594) + Fp(x12596);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12598(args[2][171 * steps + ((cycle - 0) & mask)]);
        assert(x12598 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12599 = x12598 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12600 = Fp(x12597) + Fp(x12599);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12601(args[2][172 * steps + ((cycle - 0) & mask)]);
        assert(x12601 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12602 = x12601 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12603 = Fp(x12600) + Fp(x12602);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12604(args[2][173 * steps + ((cycle - 0) & mask)]);
        assert(x12604 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12605 = x12604 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12606 = Fp(x12603) + Fp(x12605);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12607(args[2][174 * steps + ((cycle - 0) & mask)]);
        assert(x12607 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12608 = x12607 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12609 = Fp(x12606) + Fp(x12608);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12610(args[2][175 * steps + ((cycle - 0) & mask)]);
        assert(x12610 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12611 = x12610 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12612 = Fp(x12609) + Fp(x12611);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12613(args[2][176 * steps + ((cycle - 0) & mask)]);
        assert(x12613 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12614 = x12613 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12615 = Fp(x12612) + Fp(x12614);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12616(args[2][177 * steps + ((cycle - 0) & mask)]);
        assert(x12616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12617 = x12616 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12618 = Fp(x12615) + Fp(x12617);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12619(args[2][178 * steps + ((cycle - 0) & mask)]);
        assert(x12619 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12620 = x12619 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12621 = Fp(x12618) + Fp(x12620);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12622(args[2][179 * steps + ((cycle - 0) & mask)]);
        assert(x12622 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12623 = x12622 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12624 = Fp(x12621) + Fp(x12623);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12625(args[2][180 * steps + ((cycle - 0) & mask)]);
        assert(x12625 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12626 = x12625 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12627 = Fp(x12624) + Fp(x12626);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12628(args[2][181 * steps + ((cycle - 0) & mask)]);
        assert(x12628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12629 = x12628 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12630 = Fp(x12627) + Fp(x12629);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12631 = x12553 - x12630;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x12632 = x12631 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12633 = Fp(x12632.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][77 * steps + cycle] = x12633;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12634(args[2][77 * steps + ((cycle - 0) & mask)]);
        assert(x12634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12635 = x12632 - x12634;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        Fp x12636 = x12635 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12637 = x95 - x12636;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        Fp x12638 = x12636 * x12637;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12638 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
        Fp x12639(args[2][146 * steps + ((cycle - 0) & mask)]);
        assert(x12639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
        Fp x12640(args[2][147 * steps + ((cycle - 0) & mask)]);
        assert(x12640 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12641 = Fp(x12639.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][182 * steps + cycle] = x12641;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12642 = Fp(x12639.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12643 = x12642 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][183 * steps + cycle] = x12643;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12644 = Fp(x12639.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12645 = x12644 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][184 * steps + cycle] = x12645;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12646 = Fp(x12639.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12647 = x12646 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][185 * steps + cycle] = x12647;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12648 = Fp(x12639.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12649 = x12648 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][186 * steps + cycle] = x12649;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12650 = Fp(x12639.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12651 = x12650 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][187 * steps + cycle] = x12651;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12652 = Fp(x12639.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12653 = x12652 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][188 * steps + cycle] = x12653;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12654 = Fp(x12639.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12655 = x12654 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][189 * steps + cycle] = x12655;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12656 = Fp(x12639.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12657 = x12656 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][190 * steps + cycle] = x12657;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12658 = Fp(x12639.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12659 = x12658 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][191 * steps + cycle] = x12659;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12660 = Fp(x12639.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12661 = x12660 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][192 * steps + cycle] = x12661;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12662 = Fp(x12639.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12663 = x12662 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][193 * steps + cycle] = x12663;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12664 = Fp(x12639.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12665 = x12664 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][194 * steps + cycle] = x12665;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12666 = Fp(x12639.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12667 = x12666 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][195 * steps + cycle] = x12667;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12668 = Fp(x12639.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12669 = x12668 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][196 * steps + cycle] = x12669;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12670 = Fp(x12639.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12671 = x12670 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][197 * steps + cycle] = x12671;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12672(args[2][182 * steps + ((cycle - 0) & mask)]);
        assert(x12672 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12673(args[2][183 * steps + ((cycle - 0) & mask)]);
        assert(x12673 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12674 = x12673 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12675 = Fp(x12672) + Fp(x12674);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12676(args[2][184 * steps + ((cycle - 0) & mask)]);
        assert(x12676 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12677 = x12676 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12678 = Fp(x12675) + Fp(x12677);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12679(args[2][185 * steps + ((cycle - 0) & mask)]);
        assert(x12679 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12680 = x12679 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12681 = Fp(x12678) + Fp(x12680);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12682(args[2][186 * steps + ((cycle - 0) & mask)]);
        assert(x12682 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12683 = x12682 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12684 = Fp(x12681) + Fp(x12683);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12685(args[2][187 * steps + ((cycle - 0) & mask)]);
        assert(x12685 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12686 = x12685 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12687 = Fp(x12684) + Fp(x12686);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12688(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x12688 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12689 = x12688 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12690 = Fp(x12687) + Fp(x12689);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12691(args[2][189 * steps + ((cycle - 0) & mask)]);
        assert(x12691 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12692 = x12691 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12693 = Fp(x12690) + Fp(x12692);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12694(args[2][190 * steps + ((cycle - 0) & mask)]);
        assert(x12694 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12695 = x12694 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12696 = Fp(x12693) + Fp(x12695);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12697(args[2][191 * steps + ((cycle - 0) & mask)]);
        assert(x12697 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12698 = x12697 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12699 = Fp(x12696) + Fp(x12698);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12700(args[2][192 * steps + ((cycle - 0) & mask)]);
        assert(x12700 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12701 = x12700 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12702 = Fp(x12699) + Fp(x12701);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12703(args[2][193 * steps + ((cycle - 0) & mask)]);
        assert(x12703 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12704 = x12703 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12705 = Fp(x12702) + Fp(x12704);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12706(args[2][194 * steps + ((cycle - 0) & mask)]);
        assert(x12706 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12707 = x12706 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12708 = Fp(x12705) + Fp(x12707);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12709(args[2][195 * steps + ((cycle - 0) & mask)]);
        assert(x12709 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12710 = x12709 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12711 = Fp(x12708) + Fp(x12710);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12712(args[2][196 * steps + ((cycle - 0) & mask)]);
        assert(x12712 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12713 = x12712 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12714 = Fp(x12711) + Fp(x12713);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12715(args[2][197 * steps + ((cycle - 0) & mask)]);
        assert(x12715 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12716 = x12715 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12717 = Fp(x12714) + Fp(x12716);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12718 = x12639 - x12717;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x12719 = x12718 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12720 = Fp(x12719.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][78 * steps + cycle] = x12720;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12721(args[2][78 * steps + ((cycle - 0) & mask)]);
        assert(x12721 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12722 = x12719 - x12721;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        Fp x12723 = x12722 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12724 = x95 - x12723;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        Fp x12725 = x12723 * x12724;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12725 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        Fp x12726 = Fp(x12640) + Fp(x12719);
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12727 = Fp(x12726.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          args[2][198 * steps + cycle] = x12727;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12728 = Fp(x12726.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12729 = x12728 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][199 * steps + cycle] = x12729;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12730 = Fp(x12726.asUInt32() & x78.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12731 = x12730 * x76;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][200 * steps + cycle] = x12731;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12732 = Fp(x12726.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12733 = x12732 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][201 * steps + cycle] = x12733;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12734 = Fp(x12726.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12735 = x12734 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][202 * steps + cycle] = x12735;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12736 = Fp(x12726.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12737 = x12736 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][203 * steps + cycle] = x12737;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12738 = Fp(x12726.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12739 = x12738 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][204 * steps + cycle] = x12739;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12740 = Fp(x12726.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12741 = x12740 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][205 * steps + cycle] = x12741;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12742 = Fp(x12726.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12743 = x12742 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][206 * steps + cycle] = x12743;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12744 = Fp(x12726.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12745 = x12744 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][207 * steps + cycle] = x12745;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12746 = Fp(x12726.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12747 = x12746 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][208 * steps + cycle] = x12747;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12748 = Fp(x12726.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12749 = x12748 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][209 * steps + cycle] = x12749;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12750 = Fp(x12726.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12751 = x12750 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][210 * steps + cycle] = x12751;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12752 = Fp(x12726.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12753 = x12752 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][211 * steps + cycle] = x12753;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12754 = Fp(x12726.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12755 = x12754 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][212 * steps + cycle] = x12755;
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12756 = Fp(x12726.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          Fp x12757 = x12756 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][213 * steps + cycle] = x12757;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12758(args[2][198 * steps + ((cycle - 0) & mask)]);
        assert(x12758 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12759(args[2][199 * steps + ((cycle - 0) & mask)]);
        assert(x12759 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12760 = x12759 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12761 = Fp(x12758) + Fp(x12760);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12762(args[2][200 * steps + ((cycle - 0) & mask)]);
        assert(x12762 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12763 = x12762 * x78;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12764 = Fp(x12761) + Fp(x12763);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12765(args[2][201 * steps + ((cycle - 0) & mask)]);
        assert(x12765 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12766 = x12765 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12767 = Fp(x12764) + Fp(x12766);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12768(args[2][202 * steps + ((cycle - 0) & mask)]);
        assert(x12768 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12769 = x12768 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12770 = Fp(x12767) + Fp(x12769);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12771(args[2][203 * steps + ((cycle - 0) & mask)]);
        assert(x12771 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12772 = x12771 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12773 = Fp(x12770) + Fp(x12772);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12774(args[2][204 * steps + ((cycle - 0) & mask)]);
        assert(x12774 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12775 = x12774 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12776 = Fp(x12773) + Fp(x12775);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12777(args[2][205 * steps + ((cycle - 0) & mask)]);
        assert(x12777 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12778 = x12777 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12779 = Fp(x12776) + Fp(x12778);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12780(args[2][206 * steps + ((cycle - 0) & mask)]);
        assert(x12780 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12781 = x12780 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12782 = Fp(x12779) + Fp(x12781);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12783(args[2][207 * steps + ((cycle - 0) & mask)]);
        assert(x12783 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12784 = x12783 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12785 = Fp(x12782) + Fp(x12784);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12786(args[2][208 * steps + ((cycle - 0) & mask)]);
        assert(x12786 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12787 = x12786 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12788 = Fp(x12785) + Fp(x12787);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12789(args[2][209 * steps + ((cycle - 0) & mask)]);
        assert(x12789 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12790 = x12789 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12791 = Fp(x12788) + Fp(x12790);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12792(args[2][210 * steps + ((cycle - 0) & mask)]);
        assert(x12792 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12793 = x12792 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12794 = Fp(x12791) + Fp(x12793);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12795(args[2][211 * steps + ((cycle - 0) & mask)]);
        assert(x12795 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12796 = x12795 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12797 = Fp(x12794) + Fp(x12796);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12798(args[2][212 * steps + ((cycle - 0) & mask)]);
        assert(x12798 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12799 = x12798 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12800 = Fp(x12797) + Fp(x12799);
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12801(args[2][213 * steps + ((cycle - 0) & mask)]);
        assert(x12801 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        Fp x12802 = x12801 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        Fp x12803 = Fp(x12800) + Fp(x12802);
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12804 = x12726 - x12803;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        Fp x12805 = x12804 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12806 = Fp(x12805.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][79 * steps + cycle] = x12806;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12807(args[2][79 * steps + ((cycle - 0) & mask)]);
        assert(x12807 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12808 = x12805 - x12807;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        Fp x12809 = x12808 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12810 = x95 - x12809;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        Fp x12811 = x12809 * x12810;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12811 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12812(args[2][142 * steps + ((cycle - 0) & mask)]);
      assert(x12812 != Fp::invalid());
      if (x12812 != 0) {
        if (x8504 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":430:38))
          Fp x12813(args[2][133 * steps + ((cycle - 1) & mask)]);
          assert(x12813 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":430:7)
          args[2][133 * steps + cycle] = x12813;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":431:38))
          Fp x12814(args[2][134 * steps + ((cycle - 1) & mask)]);
          assert(x12814 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":431:7)
          args[2][134 * steps + cycle] = x12814;
          // loc("cirgen/circuit/rv32im/sha.cpp":432:7)
          args[2][93 * steps + cycle] = x75;
        }
        if (x8505 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":436:51))
          Fp x12815(args[2][133 * steps + ((cycle - 1) & mask)]);
          assert(x12815 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":436:51)
          Fp x12816 = Fp(x12815) + Fp(x59);
          // loc("cirgen/circuit/rv32im/sha.cpp":436:7)
          args[2][133 * steps + cycle] = x12816;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":437:51))
          Fp x12817(args[2][134 * steps + ((cycle - 1) & mask)]);
          assert(x12817 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":437:51)
          Fp x12818 = Fp(x12817) + Fp(x59);
          // loc("cirgen/circuit/rv32im/sha.cpp":437:7)
          args[2][134 * steps + cycle] = x12818;
          // loc("cirgen/circuit/rv32im/sha.cpp":438:7)
          args[2][93 * steps + cycle] = x68;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":441:27)
      auto x12819 = x95 - x12812;
      if (x12819 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":442:36))
        Fp x12820(args[2][133 * steps + ((cycle - 1) & mask)]);
        assert(x12820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":442:5)
        args[2][133 * steps + cycle] = x12820;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":443:36))
        Fp x12821(args[2][134 * steps + ((cycle - 1) & mask)]);
        assert(x12821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":443:5)
        args[2][134 * steps + cycle] = x12821;
        // loc("cirgen/circuit/rv32im/sha.cpp":444:5)
        args[2][93 * steps + cycle] = x67;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/components/mux.h":37:25))
    Fp x12822(args[2][106 * steps + ((cycle - 0) & mask)]);
    assert(x12822 != Fp::invalid());
    if (x12822 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12823(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x12823 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":122:41)
      Fp x12824 = x596 * x76;
      {
        host_args.at(0) = x12824;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x12825(host_outs.at(0));
        Fp x12826(host_outs.at(1));
        Fp x12827(host_outs.at(2));
        Fp x12828(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][111 * steps + cycle] = x12825;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][112 * steps + cycle] = x12826;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][113 * steps + cycle] = x12827;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][114 * steps + cycle] = x12828;
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12829(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x12829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12830(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x12830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12831(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x12831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12832(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x12832 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][108 * steps + cycle] = x12824;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][109 * steps + cycle] = x12823;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][110 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][111 * steps + cycle] = x12829;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][112 * steps + cycle] = x12830;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][113 * steps + cycle] = x12831;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][114 * steps + cycle] = x12832;
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      auto x12833 = x12829 - x29;
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      if (x12833 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:124");
      // loc("cirgen/circuit/rv32im/ecall.cpp":125:7)
      if (x12830 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:125");
      // loc("cirgen/circuit/rv32im/ecall.cpp":126:7)
      if (x12831 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:126");
      // loc("cirgen/circuit/rv32im/ecall.cpp":127:7)
      if (x12832 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:127");
      {
        host_args.at(0) = x28;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        Fp x12834(host_outs.at(0));
        Fp x12835(host_outs.at(1));
        Fp x12836(host_outs.at(2));
        Fp x12837(host_outs.at(3));
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][118 * steps + cycle] = x12834;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][119 * steps + cycle] = x12835;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][120 * steps + cycle] = x12836;
        // loc("cirgen/components/u32.cpp":82:5)
        args[2][121 * steps + cycle] = x12837;
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12838(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x12838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12839(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x12839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12840(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x12840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x12841(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x12841 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      args[2][115 * steps + cycle] = x28;
      // loc("cirgen/components/ram.cpp":131:3)
      args[2][116 * steps + cycle] = x12823;
      // loc("cirgen/components/ram.cpp":132:3)
      args[2][117 * steps + cycle] = x95;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][118 * steps + cycle] = x12838;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][119 * steps + cycle] = x12839;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][120 * steps + cycle] = x12840;
      // loc("cirgen/components/u32.cpp":34:5)
      args[2][121 * steps + cycle] = x12841;
      {
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12842 = (x12838 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][176 * steps + cycle] = x12842;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12843 = x12838 - x95;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12844 = (x12843 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][177 * steps + cycle] = x12844;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12845 = x12838 - x92;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12846 = (x12845 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][178 * steps + cycle] = x12846;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12847 = x12838 - x77;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12848 = (x12847 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][179 * steps + cycle] = x12848;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12849 = x12838 - x78;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x12850 = (x12849 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        args[2][180 * steps + cycle] = x12850;
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x12851(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x12851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x12852(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x12852 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x12853 = x12852 * x92;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x12854 = Fp(x12851) + Fp(x12853);
      // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x12855(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x12855 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x12856 = x12855 * x77;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x12857 = Fp(x12854) + Fp(x12856);
      // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x12858(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x12858 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      Fp x12859 = x12858 * x78;
      // loc("./cirgen/components/onehot.h":44:13)
      Fp x12860 = Fp(x12857) + Fp(x12859);
      // loc("./cirgen/components/onehot.h":38:8)
      auto x12861 = x12860 - x12838;
      // loc("./cirgen/components/onehot.h":38:8)
      if (x12861 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x12862 = (x12860 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x12863 = x95 - x12862;
        if (x12863 != 0) {
          host_args.at(0) = x12838;
          host_args.at(1) = x12839;
          host_args.at(2) = x12840;
          host_args.at(3) = x12841;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg"("./cirgen/components/mux.h":37:25))
      Fp x12864(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x12864 != Fp::invalid());
      if (x12864 != 0) {
        {
          host_args.at(0) = x12838;
          host_args.at(1) = x12839;
          host_args.at(2) = x12840;
          host_args.at(3) = x12841;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x12865 = Fp(x596) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12866 = Fp(x12865.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x12866;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x12867(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x12867 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12868 = x12865 - x12867;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x12869 = x12868 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12870 = Fp(x12869.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x12870;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x12871(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x12871 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12872 = x12869 - x12871;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x12873 = x12872 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12874 = Fp(x12873.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x12874;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x12875(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x12875 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12876 = x12873 - x12875;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x12877 = x12876 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x12878 = Fp(x12877.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x12878;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12879(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x12879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x12880 = x12877 - x12879;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x12881 = x12880 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x12881;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12882(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x12882 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x12883 = x95 - x12882;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x12884 = x12882 * x12883;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x12884;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12885(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x12885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x12886 = x92 - x12882;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x12887 = x12885 * x12886;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x12887 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        args[2][93 * steps + cycle] = x70;
      }
      if (x12851 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x12888(host_outs.at(0));
          Fp x12889(host_outs.at(1));
          Fp x12890(host_outs.at(2));
          Fp x12891(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x12888;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x12889;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][127 * steps + cycle] = x12890;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][128 * steps + cycle] = x12891;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12892(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x12892 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12893(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x12893 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12894(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x12894 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12895(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x12895 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][122 * steps + cycle] = x27;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][123 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][124 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x12892;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x12893;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][127 * steps + cycle] = x12894;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][128 * steps + cycle] = x12895;
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x12896(host_outs.at(0));
          Fp x12897(host_outs.at(1));
          Fp x12898(host_outs.at(2));
          Fp x12899(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x12896;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x12897;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][134 * steps + cycle] = x12898;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][135 * steps + cycle] = x12899;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12900(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x12900 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12901(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x12901 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12902(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x12902 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12903(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x12903 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x26;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x12900;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x12901;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x12902;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x12903;
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12904 = (x12892 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][181 * steps + cycle] = x12904;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12905 = x12892 - x95;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12906 = (x12905 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][182 * steps + cycle] = x12906;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12907 = x12892 - x92;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12908 = (x12907 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][183 * steps + cycle] = x12908;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12909 = x12892 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12910 = (x12909 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][184 * steps + cycle] = x12910;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12911 = x12892 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12912 = (x12911 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][185 * steps + cycle] = x12912;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12913 = x12892 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12914 = (x12913 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][186 * steps + cycle] = x12914;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12915 = x12892 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12916 = (x12915 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][187 * steps + cycle] = x12916;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12917 = x12892 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12918 = (x12917 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][188 * steps + cycle] = x12918;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12919 = x12892 - x70;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x12920 = (x12919 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          args[2][189 * steps + cycle] = x12920;
        }
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12921(args[2][182 * steps + ((cycle - 0) & mask)]);
        assert(x12921 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12922(args[2][183 * steps + ((cycle - 0) & mask)]);
        assert(x12922 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12923 = x12922 * x92;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12924 = Fp(x12921) + Fp(x12923);
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12925(args[2][184 * steps + ((cycle - 0) & mask)]);
        assert(x12925 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12926 = x12925 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12927 = Fp(x12924) + Fp(x12926);
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12928(args[2][185 * steps + ((cycle - 0) & mask)]);
        assert(x12928 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12929 = x12928 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12930 = Fp(x12927) + Fp(x12929);
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12931(args[2][186 * steps + ((cycle - 0) & mask)]);
        assert(x12931 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12932 = x12931 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12933 = Fp(x12930) + Fp(x12932);
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12934(args[2][187 * steps + ((cycle - 0) & mask)]);
        assert(x12934 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12935 = x12934 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12936 = Fp(x12933) + Fp(x12935);
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12937(args[2][188 * steps + ((cycle - 0) & mask)]);
        assert(x12937 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12938 = x12937 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12939 = Fp(x12936) + Fp(x12938);
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x12940(args[2][189 * steps + ((cycle - 0) & mask)]);
        assert(x12940 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        Fp x12941 = x12940 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        Fp x12942 = Fp(x12939) + Fp(x12941);
        // loc("./cirgen/components/onehot.h":38:8)
        auto x12943 = x12942 - x12892;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x12943 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("Top/Mux/4/Mux/12/Mux/1/OneHot/Reg"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        Fp x12944(args[2][181 * steps + ((cycle - 0) & mask)]);
        assert(x12944 != Fp::invalid());
        if (x12944 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12945 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12946 = Fp(x12945) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x12946;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12947 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12948 = Fp(x12947) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x12948;
        }
        if (x12921 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12949 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12950 = Fp(x12949) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x12950;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12951 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12952 = Fp(x12951) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x12952;
        }
        if (x12922 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12953 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12954 = Fp(x12953) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x12954;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12955 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12956 = Fp(x12955) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x12956;
        }
        if (x12925 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12957 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12958 = Fp(x12957) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x12958;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12959 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12960 = Fp(x12959) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x12960;
        }
        if (x12928 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12961 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12962 = Fp(x12961) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x12962;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12963 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12964 = Fp(x12963) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x12964;
        }
        if (x12931 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12965 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12966 = Fp(x12965) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x12966;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12967 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12968 = Fp(x12967) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x12968;
        }
        if (x12934 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12969 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12970 = Fp(x12969) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x12970;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12971 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12972 = Fp(x12971) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x12972;
        }
        if (x12937 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12973 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12974 = Fp(x12973) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x12974;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12975 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12976 = Fp(x12975) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x12976;
        }
        if (x12940 != 0) {
          host_args.at(0) = x12942;
          host_args.at(1) = x12900;
          host_args.at(2) = x12901;
          host_args.at(3) = x12902;
          host_args.at(4) = x12903;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12977 = x12901 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          Fp x12978 = Fp(x12977) + Fp(x12900);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x12978;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12979 = x12903 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          Fp x12980 = Fp(x12979) + Fp(x12902);
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x12980;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        Fp x12981 = Fp(x596) + Fp(x78);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x12982 = Fp(x12981) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12983 = Fp(x12982.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x12983;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x12984(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x12984 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12985 = x12982 - x12984;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x12986 = x12985 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12987 = Fp(x12986.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x12987;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x12988(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x12988 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12989 = x12986 - x12988;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x12990 = x12989 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12991 = Fp(x12990.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x12991;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x12992(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x12992 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12993 = x12990 - x12992;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x12994 = x12993 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x12995 = Fp(x12994.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x12995;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12996(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x12996 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x12997 = x12994 - x12996;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x12998 = x12997 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x12998;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x12999(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x12999 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13000 = x95 - x12999;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x13001 = x12999 * x13000;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x13001;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13002(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x13002 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13003 = x92 - x12999;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x13004 = x13002 * x13003;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13004 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        args[2][93 * steps + cycle] = x75;
      }
      if (x12852 != 0) {
        {
          host_args.at(0) = x12838;
          host_args.at(1) = x12839;
          host_args.at(2) = x12840;
          host_args.at(3) = x12841;
          host(ctx, "log", "  Doing syscall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
          host(ctx, "syscall", "", host_args.data(), 0, host_outs.data(), 8);
          Fp x13005(host_outs.at(0));
          Fp x13006(host_outs.at(1));
          Fp x13007(host_outs.at(2));
          Fp x13008(host_outs.at(3));
          Fp x13009(host_outs.at(4));
          Fp x13010(host_outs.at(5));
          Fp x13011(host_outs.at(6));
          Fp x13012(host_outs.at(7));
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][125 * steps + cycle] = x13005;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][126 * steps + cycle] = x13006;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][127 * steps + cycle] = x13007;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][128 * steps + cycle] = x13008;
          {
            host_args.at(0) = x27;
            host_args.at(1) = x13005;
            host_args.at(2) = x13006;
            host_args.at(3) = x13007;
            host_args.at(4) = x13008;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13013(args[2][125 * steps + ((cycle - 0) & mask)]);
          assert(x13013 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13014(args[2][126 * steps + ((cycle - 0) & mask)]);
          assert(x13014 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13015(args[2][127 * steps + ((cycle - 0) & mask)]);
          assert(x13015 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13016(args[2][128 * steps + ((cycle - 0) & mask)]);
          assert(x13016 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][122 * steps + cycle] = x27;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][123 * steps + cycle] = x12823;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][124 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][125 * steps + cycle] = x13013;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][126 * steps + cycle] = x13014;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][127 * steps + cycle] = x13015;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][128 * steps + cycle] = x13016;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x13009;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x13010;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x13011;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x13012;
          {
            host_args.at(0) = x26;
            host_args.at(1) = x13009;
            host_args.at(2) = x13010;
            host_args.at(3) = x13011;
            host_args.at(4) = x13012;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13017(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x13017 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13018(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x13018 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13019(args[2][134 * steps + ((cycle - 0) & mask)]);
          assert(x13019 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13020(args[2][135 * steps + ((cycle - 0) & mask)]);
          assert(x13020 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][129 * steps + cycle] = x26;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][130 * steps + cycle] = x12823;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][131 * steps + cycle] = x92;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x13017;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x13018;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][134 * steps + cycle] = x13019;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][135 * steps + cycle] = x13020;
          host_args.at(0) = x13013;
          host_args.at(1) = x13014;
          host_args.at(2) = x13015;
          host_args.at(3) = x13016;
          host(ctx, "log", "  A0 = %w", host_args.data(), 4, host_outs.data(), 0);
          host_args.at(0) = x13017;
          host_args.at(1) = x13018;
          host_args.at(2) = x13019;
          host_args.at(3) = x13020;
          host(ctx, "log", "  A1 = %w", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":141:10))
        Fp x13021(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13021 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        auto x13022 = x13021 - x12823;
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        if (x13022 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:71");
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg1"("cirgen/components/ram.cpp":141:10))
        Fp x13023(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13023 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        auto x13024 = x13023 - x12823;
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        if (x13024 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:72");
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":137:10))
        Fp x13025(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        auto x13026 = x13025 - x27;
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        if (x13026 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:73");
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg"("cirgen/components/ram.cpp":137:10))
        Fp x13027(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13027 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        auto x13028 = x13027 - x26;
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        if (x13028 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:74");
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg2"("cirgen/components/ram.cpp":145:10))
        Fp x13029(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        auto x13030 = x13029 - x92;
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        if (x13030 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:75");
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg2"("cirgen/components/ram.cpp":145:10))
        Fp x13031(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13031 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        auto x13032 = x13031 - x92;
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        if (x13032 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:76");
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:17)
        Fp x13033 = Fp(x596) + Fp(x78);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x13034 = Fp(x13033) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13035 = Fp(x13034.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x13035;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13036(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x13036 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13037 = x13034 - x13036;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13038 = x13037 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13039 = Fp(x13038.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x13039;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x13040(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x13040 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13041 = x13038 - x13040;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13042 = x13041 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13043 = Fp(x13042.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x13043;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13044(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x13044 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13045 = x13042 - x13044;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13046 = x13045 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13047 = Fp(x13046.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x13047;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13048(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x13048 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13049 = x13046 - x13048;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x13050 = x13049 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x13050;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13051(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x13051 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13052 = x95 - x13051;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x13053 = x13051 * x13052;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x13053;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13054(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x13054 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13055 = x92 - x13051;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x13056 = x13054 * x13055;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13056 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:3)
        args[2][93 * steps + cycle] = x75;
      }
      if (x12855 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13057(host_outs.at(0));
          Fp x13058(host_outs.at(1));
          Fp x13059(host_outs.at(2));
          Fp x13060(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x13057;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x13058;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][127 * steps + cycle] = x13059;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][128 * steps + cycle] = x13060;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13061(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13061 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13062(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13063(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13064(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13064 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][122 * steps + cycle] = x27;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][123 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][124 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x13061;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x13062;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][127 * steps + cycle] = x13063;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][128 * steps + cycle] = x13064;
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13065(host_outs.at(0));
          Fp x13066(host_outs.at(1));
          Fp x13067(host_outs.at(2));
          Fp x13068(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x13065;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x13066;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][134 * steps + cycle] = x13067;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][135 * steps + cycle] = x13068;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13069(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13070(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13071(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13072(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13072 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x26;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x13069;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x13070;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x13071;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x13072;
        {
          host_args.at(0) = x25;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13073(host_outs.at(0));
          Fp x13074(host_outs.at(1));
          Fp x13075(host_outs.at(2));
          Fp x13076(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][139 * steps + cycle] = x13073;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][140 * steps + cycle] = x13074;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][141 * steps + cycle] = x13075;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][142 * steps + cycle] = x13076;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13077(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13078(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13079(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x13079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13080(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x13080 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][136 * steps + cycle] = x25;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][137 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][138 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x13077;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x13078;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][141 * steps + cycle] = x13079;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][142 * steps + cycle] = x13080;
        // loc("cirgen/circuit/rv32im/ecall.cpp":92:17)
        Fp x13081 = Fp(x596) + Fp(x78);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x13082 = Fp(x13081) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13083 = Fp(x13082.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x13083;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13084(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x13084 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13085 = x13082 - x13084;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13086 = x13085 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13087 = Fp(x13086.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x13087;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x13088(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x13088 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13089 = x13086 - x13088;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13090 = x13089 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13091 = Fp(x13090.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x13091;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13092(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x13092 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13093 = x13090 - x13092;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13094 = x13093 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13095 = Fp(x13094.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x13095;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13096(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x13096 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13097 = x13094 - x13096;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x13098 = x13097 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x13098;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13099(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x13099 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13100 = x95 - x13099;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x13101 = x13099 * x13100;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x13101;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13102(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x13102 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13103 = x92 - x13099;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x13104 = x13102 * x13103;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13104 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:3)
        args[2][93 * steps + cycle] = x69;
      }
      if (x12858 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":102:3)
        args[2][181 * steps + cycle] = x596;
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13105(host_outs.at(0));
          Fp x13106(host_outs.at(1));
          Fp x13107(host_outs.at(2));
          Fp x13108(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x13105;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x13106;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][127 * steps + cycle] = x13107;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][128 * steps + cycle] = x13108;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13109(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13109 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13110(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13110 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13111(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13111 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13112(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13112 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][122 * steps + cycle] = x27;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][123 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][124 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x13109;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x13110;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][127 * steps + cycle] = x13111;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][128 * steps + cycle] = x13112;
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13113(host_outs.at(0));
          Fp x13114(host_outs.at(1));
          Fp x13115(host_outs.at(2));
          Fp x13116(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x13113;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x13114;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][134 * steps + cycle] = x13115;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][135 * steps + cycle] = x13116;
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13117(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13117 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13118(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13118 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13119(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13119 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13120(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13120 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][129 * steps + cycle] = x26;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][130 * steps + cycle] = x12823;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][131 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x13117;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x13118;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][134 * steps + cycle] = x13119;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][135 * steps + cycle] = x13120;
        // loc("./cirgen/components/u32.h":25:12)
        Fp x13121 = x13110 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x13122 = Fp(x13109) + Fp(x13121);
        // loc("./cirgen/components/u32.h":26:12)
        Fp x13123 = x13111 * x80;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x13124 = Fp(x13122) + Fp(x13123);
        // loc("./cirgen/components/u32.h":27:12)
        Fp x13125 = x13112 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        Fp x13126 = Fp(x13124) + Fp(x13125);
        // loc("cirgen/circuit/rv32im/ecall.cpp":111:17)
        auto x13127 = x13126 - x78;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        Fp x13128 = Fp(x13127) + Fp(x78);
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13129 = Fp(x13128.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][10 * steps + cycle] = x13129;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13130(args[2][10 * steps + ((cycle - 0) & mask)]);
        assert(x13130 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13131 = x13128 - x13130;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13132 = x13131 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13133 = Fp(x13132.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][11 * steps + cycle] = x13133;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x13134(args[2][11 * steps + ((cycle - 0) & mask)]);
        assert(x13134 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13135 = x13132 - x13134;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13136 = x13135 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13137 = Fp(x13136.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][12 * steps + cycle] = x13137;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13138(args[2][12 * steps + ((cycle - 0) & mask)]);
        assert(x13138 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13139 = x13136 - x13138;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13140 = x13139 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13141 = Fp(x13140.asUInt32() & x77.asUInt32());
          // loc("./cirgen/components/bits.h":60:23)
          args[2][72 * steps + cycle] = x13141;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13142(args[2][72 * steps + ((cycle - 0) & mask)]);
        assert(x13142 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13143 = x13140 - x13142;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        Fp x13144 = x13143 * x76;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][73 * steps + cycle] = x13144;
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13145(args[2][73 * steps + ((cycle - 0) & mask)]);
        assert(x13145 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13146 = x95 - x13145;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        Fp x13147 = x13145 * x13146;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        args[2][92 * steps + cycle] = x13147;
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13148(args[2][92 * steps + ((cycle - 0) & mask)]);
        assert(x13148 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13149 = x92 - x13145;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        Fp x13150 = x13148 * x13149;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13150 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":112:3)
        args[2][93 * steps + cycle] = x66;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/components/mux.h":37:25))
    Fp x13151(args[2][107 * steps + ((cycle - 0) & mask)]);
    assert(x13151 != Fp::invalid());
    if (x13151 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13152(args[0][0 * steps + ((cycle - 0) & mask)]);
      assert(x13152 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      Fp x13153 = Fp(x596) + Fp(x78);
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x13154 = Fp(x13153.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][10 * steps + cycle] = x13154;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x13155(args[2][10 * steps + ((cycle - 0) & mask)]);
      assert(x13155 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x13156 = x13153 - x13155;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x13157 = x13156 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x13158 = Fp(x13157.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][11 * steps + cycle] = x13158;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":90:16))
      Fp x13159(args[2][11 * steps + ((cycle - 0) & mask)]);
      assert(x13159 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x13160 = x13157 - x13159;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x13161 = x13160 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x13162 = Fp(x13161.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        args[2][12 * steps + cycle] = x13162;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":90:16))
      Fp x13163(args[2][12 * steps + ((cycle - 0) & mask)]);
      assert(x13163 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x13164 = x13161 - x13163;
      // loc("cirgen/components/bytes.cpp":90:10)
      Fp x13165 = x13164 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x13166 = Fp(x13165.asUInt32() & x77.asUInt32());
        // loc("./cirgen/components/bits.h":60:23)
        args[2][72 * steps + cycle] = x13166;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13167(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x13167 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x13168 = x13165 - x13167;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      Fp x13169 = x13168 * x76;
      // loc("./cirgen/components/bits.h":60:23)
      args[2][73 * steps + cycle] = x13169;
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13170(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x13170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x13171 = x95 - x13170;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      Fp x13172 = x13170 * x13171;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      args[2][92 * steps + cycle] = x13172;
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x13173(args[2][92 * steps + ((cycle - 0) & mask)]);
      assert(x13173 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x13174 = x92 - x13170;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      Fp x13175 = x13173 * x13174;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x13175 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x596;
      host(ctx, "log", "  PageFault: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
      // loc("Top/Code/OneHot/Reg4"("cirgen/circuit/rv32im/page_fault.cpp":84:67))
      Fp x13176(args[0][5 * steps + ((cycle - 1) & mask)]);
      assert(x13176 != Fp::invalid());
      if (x13176 != 0) {
        // loc("Top/Mux/4/OneHot/Reg13"("cirgen/circuit/rv32im/page_fault.cpp":86:79))
        Fp x13177(args[2][107 * steps + ((cycle - 1) & mask)]);
        assert(x13177 != Fp::invalid());
        if (x13177 != 0) {
          // loc("Top/Mux/4/Mux/13/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13178(args[2][118 * steps + ((cycle - 1) & mask)]);
          assert(x13178 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:23)
          auto x13179 = x95 - x13178;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:7)
          args[2][108 * steps + cycle] = x13179;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":91:27)
        auto x13180 = x95 - x13177;
        if (x13180 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":91:31)
          args[2][108 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":93:20)
      auto x13181 = x95 - x13176;
      if (x13181 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":93:24)
        args[2][108 * steps + cycle] = x94;
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13182(args[2][108 * steps + ((cycle - 0) & mask)]);
      assert(x13182 != Fp::invalid());
      if (x13182 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/page_fault.cpp":96:44))
        Fp x13183(args[2][111 * steps + ((cycle - 1) & mask)]);
        assert(x13183 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":96:5)
        args[2][111 * steps + cycle] = x13183;
        // loc("./cirgen/components/bits.h":20:23)
        args[2][112 * steps + cycle] = x94;
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":99:20)
      auto x13184 = x95 - x13182;
      if (x13184 != 0) {
        {
          host_args.at(0) = x596;
          host(ctx, "pageRead", "", host_args.data(), 1, host_outs.data(), 2);
          Fp x13185(host_outs.at(0));
          Fp x13186(host_outs.at(1));
          // loc("cirgen/circuit/rv32im/page_fault.cpp":102:7)
          args[2][111 * steps + cycle] = x13185;
          // loc("./cirgen/components/bits.h":20:23)
          args[2][112 * steps + cycle] = x13186;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
      Fp x13187(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x13187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":109:20)
      auto x13188 = x13187 - x4;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13189 = (x13188 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][115 * steps + cycle] = x13189;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13190 = inv(x13188);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][116 * steps + cycle] = x13190;
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13191(args[2][115 * steps + ((cycle - 0) & mask)]);
      assert(x13191 != Fp::invalid());
      if (x13191 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13188 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13192 = x95 - x13191;
      if (x13192 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13193(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13193 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x13194 = x13188 * x13193;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13195 = x13194 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13195 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x13191 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:5)
        args[2][113 * steps + cycle] = x67;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":112:5)
        args[2][114 * steps + cycle] = x95;
      }
      if (x13192 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":115:5)
        args[2][113 * steps + cycle] = x59;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":116:5)
        args[2][114 * steps + cycle] = x94;
      }
      if (x13184 != 0) {
        // loc("Top/Mux/4/Mux/13/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13196(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13196 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:38)
        auto x13197 = x95 - x13196;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:37)
        Fp x13198 = x13197 * x11;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:22)
        Fp x13199 = Fp(x13196) + Fp(x13198);
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        Fp x13200 = x13196 * x11;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:51)
        Fp x13201 = x13197 * x3;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        Fp x13202 = Fp(x13200) + Fp(x13201);
        // loc("cirgen/circuit/rv32im/page_fault.cpp":130:17)
        auto x13203 = x13187 - x13199;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13204 = Fp(x13203.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][13 * steps + cycle] = x13204;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x13205(args[2][13 * steps + ((cycle - 0) & mask)]);
        assert(x13205 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13206 = x13203 - x13205;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13207 = x13206 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13208 = Fp(x13207.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][14 * steps + cycle] = x13208;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13209(args[2][14 * steps + ((cycle - 0) & mask)]);
        assert(x13209 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13210 = x13207 - x13209;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13211 = x13210 * x89;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][74 * steps + cycle] = x13211;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x13212 = x13202 - x95;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x13213 = x13212 - x13187;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13214 = Fp(x13213.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][15 * steps + cycle] = x13214;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":90:16))
        Fp x13215(args[2][15 * steps + ((cycle - 0) & mask)]);
        assert(x13215 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13216 = x13213 - x13215;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13217 = x13216 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13218 = Fp(x13217.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          args[2][16 * steps + cycle] = x13218;
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":90:16))
        Fp x13219(args[2][16 * steps + ((cycle - 0) & mask)]);
        assert(x13219 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13220 = x13217 - x13219;
        // loc("cirgen/components/bytes.cpp":90:10)
        Fp x13221 = x13220 * x89;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][75 * steps + cycle] = x13221;
        if (x13196 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":134:7)
          args[2][117 * steps + cycle] = x2;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          Fp x13222 = x13187 * x22;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          Fp x13223 = x13222 * x76;
          // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
          Fp x13224(args[2][117 * steps + ((cycle - 0) & mask)]);
          assert(x13224 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
          Fp x13225 = x13224 * x78;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
          Fp x13226 = Fp(x13223) + Fp(x13225);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
          Fp x13227 = x13226 * x78;
          host_args.at(0) = x13224;
          host_args.at(1) = x13187;
          host_args.at(2) = x13227;
          host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
          {
            host_args.at(0) = x13226;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x13228(host_outs.at(0));
            Fp x13229(host_outs.at(1));
            Fp x13230(host_outs.at(2));
            Fp x13231(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][123 * steps + cycle] = x13228;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][124 * steps + cycle] = x13229;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][125 * steps + cycle] = x13230;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][126 * steps + cycle] = x13231;
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13232(args[2][123 * steps + ((cycle - 0) & mask)]);
          assert(x13232 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13233(args[2][124 * steps + ((cycle - 0) & mask)]);
          assert(x13233 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13234(args[2][125 * steps + ((cycle - 0) & mask)]);
          assert(x13234 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13235(args[2][126 * steps + ((cycle - 0) & mask)]);
          assert(x13235 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][120 * steps + cycle] = x13226;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][121 * steps + cycle] = x13152;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][122 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][123 * steps + cycle] = x13232;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][124 * steps + cycle] = x13233;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][125 * steps + cycle] = x13234;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][126 * steps + cycle] = x13235;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          Fp x13236 = Fp(x13226) + Fp(x95);
          {
            host_args.at(0) = x13236;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x13237(host_outs.at(0));
            Fp x13238(host_outs.at(1));
            Fp x13239(host_outs.at(2));
            Fp x13240(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][130 * steps + cycle] = x13237;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][131 * steps + cycle] = x13238;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][132 * steps + cycle] = x13239;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][133 * steps + cycle] = x13240;
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13241(args[2][130 * steps + ((cycle - 0) & mask)]);
          assert(x13241 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13242(args[2][131 * steps + ((cycle - 0) & mask)]);
          assert(x13242 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13243(args[2][132 * steps + ((cycle - 0) & mask)]);
          assert(x13243 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13244(args[2][133 * steps + ((cycle - 0) & mask)]);
          assert(x13244 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][127 * steps + cycle] = x13236;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][128 * steps + cycle] = x13152;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][130 * steps + cycle] = x13241;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][131 * steps + cycle] = x13242;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][132 * steps + cycle] = x13243;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][133 * steps + cycle] = x13244;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          Fp x13245 = Fp(x13226) + Fp(x92);
          {
            host_args.at(0) = x13245;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x13246(host_outs.at(0));
            Fp x13247(host_outs.at(1));
            Fp x13248(host_outs.at(2));
            Fp x13249(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][137 * steps + cycle] = x13246;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][138 * steps + cycle] = x13247;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][139 * steps + cycle] = x13248;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][140 * steps + cycle] = x13249;
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13250(args[2][137 * steps + ((cycle - 0) & mask)]);
          assert(x13250 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13251(args[2][138 * steps + ((cycle - 0) & mask)]);
          assert(x13251 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13252(args[2][139 * steps + ((cycle - 0) & mask)]);
          assert(x13252 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13253(args[2][140 * steps + ((cycle - 0) & mask)]);
          assert(x13253 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][134 * steps + cycle] = x13245;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][135 * steps + cycle] = x13152;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][137 * steps + cycle] = x13250;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][138 * steps + cycle] = x13251;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][139 * steps + cycle] = x13252;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][140 * steps + cycle] = x13253;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          Fp x13254 = Fp(x13226) + Fp(x77);
          {
            host_args.at(0) = x13254;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            Fp x13255(host_outs.at(0));
            Fp x13256(host_outs.at(1));
            Fp x13257(host_outs.at(2));
            Fp x13258(host_outs.at(3));
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][144 * steps + cycle] = x13255;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][145 * steps + cycle] = x13256;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][146 * steps + cycle] = x13257;
            // loc("cirgen/components/u32.cpp":82:5)
            args[2][147 * steps + cycle] = x13258;
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13259(args[2][144 * steps + ((cycle - 0) & mask)]);
          assert(x13259 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13260(args[2][145 * steps + ((cycle - 0) & mask)]);
          assert(x13260 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13261(args[2][146 * steps + ((cycle - 0) & mask)]);
          assert(x13261 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          Fp x13262(args[2][147 * steps + ((cycle - 0) & mask)]);
          assert(x13262 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          args[2][141 * steps + cycle] = x13254;
          // loc("cirgen/components/ram.cpp":131:3)
          args[2][142 * steps + cycle] = x13152;
          // loc("cirgen/components/ram.cpp":132:3)
          args[2][143 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][144 * steps + cycle] = x13259;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][145 * steps + cycle] = x13260;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][146 * steps + cycle] = x13261;
          // loc("cirgen/components/u32.cpp":34:5)
          args[2][147 * steps + cycle] = x13262;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":136:7)
          args[2][93 * steps + cycle] = x65;
        }
        if (x13197 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x13263 = x13187 - x11;
          // loc("Top/Mux/4/Mux/13/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
          Fp x13264(args[2][114 * steps + ((cycle - 0) & mask)]);
          assert(x13264 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          Fp x13265 = Fp(x13263) + Fp(x13264);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:40)
          Fp x13266 = x13265 * x70;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
          Fp x13267 = Fp(x13266) + Fp(x1);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":142:7)
          args[2][109 * steps + cycle] = x13267;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":143:7)
          args[2][110 * steps + cycle] = x0;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][120 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][121 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][122 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][123 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][124 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][125 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][126 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][127 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][128 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][129 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][131 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][135 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][136 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][138 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][142 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][143 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][144 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][145 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][146 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][147 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":147:7)
          args[2][117 * steps + cycle] = x94;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":148:7)
          args[2][93 * steps + cycle] = x69;
        }
      }
      if (x13182 != 0) {
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][13 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][14 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][74 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][15 * steps + cycle] = x94;
        // loc("cirgen/components/bytes.cpp":94:3)
        args[2][16 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":60:23)
        args[2][75 * steps + cycle] = x94;
        // loc("Top/Mux/4/Mux/13/Reg6"("cirgen/circuit/rv32im/page_fault.cpp":156:40))
        Fp x13268(args[2][117 * steps + ((cycle - 1) & mask)]);
        assert(x13268 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:40)
        auto x13269 = x13268 - x95;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:5)
        args[2][117 * steps + cycle] = x13269;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        Fp x13270 = x13187 * x22;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        Fp x13271 = x13270 * x76;
        // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13272(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13272 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
        Fp x13273 = x13272 * x78;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
        Fp x13274 = Fp(x13271) + Fp(x13273);
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
        Fp x13275 = x13274 * x78;
        host_args.at(0) = x13272;
        host_args.at(1) = x13187;
        host_args.at(2) = x13275;
        host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
        {
          host_args.at(0) = x13274;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13276(host_outs.at(0));
          Fp x13277(host_outs.at(1));
          Fp x13278(host_outs.at(2));
          Fp x13279(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][123 * steps + cycle] = x13276;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][124 * steps + cycle] = x13277;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][125 * steps + cycle] = x13278;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][126 * steps + cycle] = x13279;
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13280(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13280 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13281(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13282(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13282 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13283(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13283 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][120 * steps + cycle] = x13274;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][121 * steps + cycle] = x13152;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][122 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][123 * steps + cycle] = x13280;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][124 * steps + cycle] = x13281;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][125 * steps + cycle] = x13282;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][126 * steps + cycle] = x13283;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        Fp x13284 = Fp(x13274) + Fp(x95);
        {
          host_args.at(0) = x13284;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13285(host_outs.at(0));
          Fp x13286(host_outs.at(1));
          Fp x13287(host_outs.at(2));
          Fp x13288(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][130 * steps + cycle] = x13285;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][131 * steps + cycle] = x13286;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][132 * steps + cycle] = x13287;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][133 * steps + cycle] = x13288;
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13289(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13289 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13290(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13290 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13291(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13291 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13292(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13292 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][127 * steps + cycle] = x13284;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][128 * steps + cycle] = x13152;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][129 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][130 * steps + cycle] = x13289;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][131 * steps + cycle] = x13290;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][132 * steps + cycle] = x13291;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][133 * steps + cycle] = x13292;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        Fp x13293 = Fp(x13274) + Fp(x92);
        {
          host_args.at(0) = x13293;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13294(host_outs.at(0));
          Fp x13295(host_outs.at(1));
          Fp x13296(host_outs.at(2));
          Fp x13297(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][137 * steps + cycle] = x13294;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][138 * steps + cycle] = x13295;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][139 * steps + cycle] = x13296;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][140 * steps + cycle] = x13297;
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13298(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x13298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13299(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x13299 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13300(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13300 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13301(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13301 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][134 * steps + cycle] = x13293;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][135 * steps + cycle] = x13152;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][136 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][137 * steps + cycle] = x13298;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][138 * steps + cycle] = x13299;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][139 * steps + cycle] = x13300;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][140 * steps + cycle] = x13301;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        Fp x13302 = Fp(x13274) + Fp(x77);
        {
          host_args.at(0) = x13302;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          Fp x13303(host_outs.at(0));
          Fp x13304(host_outs.at(1));
          Fp x13305(host_outs.at(2));
          Fp x13306(host_outs.at(3));
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][144 * steps + cycle] = x13303;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][145 * steps + cycle] = x13304;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][146 * steps + cycle] = x13305;
          // loc("cirgen/components/u32.cpp":82:5)
          args[2][147 * steps + cycle] = x13306;
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13307(args[2][144 * steps + ((cycle - 0) & mask)]);
        assert(x13307 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13308(args[2][145 * steps + ((cycle - 0) & mask)]);
        assert(x13308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13309(args[2][146 * steps + ((cycle - 0) & mask)]);
        assert(x13309 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13310(args[2][147 * steps + ((cycle - 0) & mask)]);
        assert(x13310 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        args[2][141 * steps + cycle] = x13302;
        // loc("cirgen/components/ram.cpp":131:3)
        args[2][142 * steps + cycle] = x13152;
        // loc("cirgen/components/ram.cpp":132:3)
        args[2][143 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][144 * steps + cycle] = x13307;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][145 * steps + cycle] = x13308;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][146 * steps + cycle] = x13309;
        // loc("cirgen/components/u32.cpp":34:5)
        args[2][147 * steps + cycle] = x13310;
      }
      // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13311(args[2][117 * steps + ((cycle - 0) & mask)]);
      assert(x13311 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13312 = (x13311 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        args[2][118 * steps + cycle] = x13312;
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13313 = inv(x13311);
        // loc("cirgen/components/iszero.cpp":12:5)
        args[2][119 * steps + cycle] = x13313;
      }
      // loc("Top/Mux/4/Mux/13/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13314(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x13314 != Fp::invalid());
      if (x13314 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13311 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13315 = x95 - x13314;
      if (x13315 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
        Fp x13316(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13316 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        Fp x13317 = x13311 * x13316;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13318 = x13317 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13318 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x13182 != 0) {
        if (x13314 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":163:31)
          args[2][93 * steps + cycle] = x75;
        }
        if (x13315 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":164:35)
          args[2][93 * steps + cycle] = x65;
        }
      }
    }
  }
  // loc("Top/Code/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
  Fp x13319(args[0][6 * steps + ((cycle - 0) & mask)]);
  assert(x13319 != Fp::invalid());
  if (x13319 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x13320(args[0][0 * steps + ((cycle - 0) & mask)]);
    assert(x13320 != Fp::invalid());
    host_args.at(0) = x13320;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13321(args[2][95 * steps + ((cycle - 1) & mask)]);
    assert(x13321 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13322(args[2][96 * steps + ((cycle - 1) & mask)]);
    assert(x13322 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13323 = x13322 * x92;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13324 = Fp(x13321) + Fp(x13323);
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13325(args[2][97 * steps + ((cycle - 1) & mask)]);
    assert(x13325 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13326 = x13325 * x77;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13327 = Fp(x13324) + Fp(x13326);
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13328(args[2][98 * steps + ((cycle - 1) & mask)]);
    assert(x13328 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13329 = x13328 * x78;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13330 = Fp(x13327) + Fp(x13329);
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13331(args[2][99 * steps + ((cycle - 1) & mask)]);
    assert(x13331 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13332 = x13331 * x73;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13333 = Fp(x13330) + Fp(x13332);
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13334(args[2][100 * steps + ((cycle - 1) & mask)]);
    assert(x13334 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13335 = x13334 * x72;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13336 = Fp(x13333) + Fp(x13335);
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13337(args[2][101 * steps + ((cycle - 1) & mask)]);
    assert(x13337 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13338 = x13337 * x71;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13339 = Fp(x13336) + Fp(x13338);
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13340(args[2][102 * steps + ((cycle - 1) & mask)]);
    assert(x13340 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13341 = x13340 * x70;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13342 = Fp(x13339) + Fp(x13341);
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13343(args[2][103 * steps + ((cycle - 1) & mask)]);
    assert(x13343 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13344 = x13343 * x69;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13345 = Fp(x13342) + Fp(x13344);
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13346(args[2][104 * steps + ((cycle - 1) & mask)]);
    assert(x13346 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13347 = x13346 * x68;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13348 = Fp(x13345) + Fp(x13347);
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13349(args[2][105 * steps + ((cycle - 1) & mask)]);
    assert(x13349 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13350 = x13349 * x67;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13351 = Fp(x13348) + Fp(x13350);
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13352(args[2][106 * steps + ((cycle - 1) & mask)]);
    assert(x13352 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13353 = x13352 * x66;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13354 = Fp(x13351) + Fp(x13353);
    // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13355(args[2][107 * steps + ((cycle - 1) & mask)]);
    assert(x13355 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13356 = x13355 * x65;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13357 = Fp(x13354) + Fp(x13356);
    // loc("cirgen/circuit/rv32im/top.cpp":49:38)
    auto x13358 = x13357 - x70;
    // loc("cirgen/circuit/rv32im/top.cpp":49:38)
    if (x13358 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:49");
    // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13359(args[2][177 * steps + ((cycle - 1) & mask)]);
    assert(x13359 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13360(args[2][178 * steps + ((cycle - 1) & mask)]);
    assert(x13360 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13361 = x13360 * x92;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13362 = Fp(x13359) + Fp(x13361);
    // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13363(args[2][179 * steps + ((cycle - 1) & mask)]);
    assert(x13363 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13364 = x13363 * x77;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13365 = Fp(x13362) + Fp(x13364);
    // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":113:61))
    Fp x13366(args[2][180 * steps + ((cycle - 1) & mask)]);
    assert(x13366 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    Fp x13367 = x13366 * x78;
    // loc("./cirgen/components/onehot.h":44:13)
    Fp x13368 = Fp(x13365) + Fp(x13367);
    // loc("cirgen/circuit/rv32im/top.cpp":51:39)
    if (x13368 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:51");
  }
  // loc("Top/Code/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
  Fp x13369(args[0][7 * steps + ((cycle - 0) & mask)]);
  assert(x13369 != Fp::invalid());
  if (x13369 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    Fp x13370(args[0][0 * steps + ((cycle - 0) & mask)]);
    assert(x13370 != Fp::invalid());
    host_args.at(0) = x13370;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":72:27))
  Fp x13371(args[0][1 * steps + ((cycle - 0) & mask)]);
  assert(x13371 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  Fp x13372 = Fp(x13371) + Fp(x96);
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  Fp x13373 = Fp(x13372) + Fp(x421);
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  Fp x13374 = Fp(x13373) + Fp(x474);
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  Fp x13375 = Fp(x13374) + Fp(x582);
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  Fp x13376 = Fp(x13375) + Fp(x13319);
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  Fp x13377 = Fp(x13376) + Fp(x13369);
  if (x582 != 0) {
    // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/top.cpp":80:19))
    Fp x13378(args[2][102 * steps + ((cycle - 0) & mask)]);
    assert(x13378 != Fp::invalid());
    if (x13378 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":83:20))
      Fp x13379(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x13379 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":84:7)
      args[2][9 * steps + cycle] = x13379;
    }
    // loc("cirgen/circuit/rv32im/top.cpp":86:19)
    auto x13380 = x95 - x13378;
    if (x13380 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":86:23)
      args[2][9 * steps + cycle] = x94;
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":88:23)
  auto x13381 = x13377 - x582;
  if (x13381 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":88:27)
    args[2][9 * steps + cycle] = x94;
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":113:61))
  Fp x13382(args[2][9 * steps + ((cycle - 0) & mask)]);
  assert(x13382 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":89:10)
  auto x13383 = x95 - x13382;
  if (x421 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][31 * steps + cycle] = x94;
    }
  }
  if (x474 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][37 * steps + cycle] = x94;
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][38 * steps + cycle] = x94;
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][39 * steps + cycle] = x94;
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][40 * steps + cycle] = x94;
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][41 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][82 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][83 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][84 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][85 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][86 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][87 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][88 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][89 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][90 * steps + cycle] = x94;
      // loc("./cirgen/components/bits.h":30:46)
      args[2][91 * steps + cycle] = x94;
    }
  }
  if (x582 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13384(args[2][94 * steps + ((cycle - 0) & mask)]);
    assert(x13384 != Fp::invalid());
    if (x13384 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][32 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][33 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][34 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][35 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][36 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][37 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][38 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13385(args[2][95 * steps + ((cycle - 0) & mask)]);
    assert(x13385 != Fp::invalid());
    if (x13385 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][32 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][33 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][34 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][35 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][36 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][37 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][38 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13386(args[2][96 * steps + ((cycle - 0) & mask)]);
    assert(x13386 != Fp::invalid());
    if (x13386 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][32 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][33 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][34 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][35 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][36 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][37 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][38 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13387(args[2][97 * steps + ((cycle - 0) & mask)]);
    assert(x13387 != Fp::invalid());
    if (x13387 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13388(args[2][98 * steps + ((cycle - 0) & mask)]);
    assert(x13388 != Fp::invalid());
    if (x13388 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":43:3)
        args[2][136 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":44:3)
        args[2][137 * steps + cycle] = x94;
        // loc("cirgen/components/ram.cpp":45:3)
        args[2][138 * steps + cycle] = x95;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][139 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][140 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][141 * steps + cycle] = x94;
        // loc("cirgen/components/u32.cpp":28:5)
        args[2][142 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13389(args[2][99 * steps + ((cycle - 0) & mask)]);
    assert(x13389 != Fp::invalid());
    if (x13389 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][37 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][38 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][87 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13390(args[2][100 * steps + ((cycle - 0) & mask)]);
    assert(x13390 != Fp::invalid());
    if (x13390 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][13 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][14 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][15 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][16 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][17 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][18 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][19 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][20 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][21 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][22 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][23 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][24 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][25 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][26 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][27 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][28 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][29 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][30 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][31 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][32 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][33 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][34 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][35 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][36 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][37 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][38 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][74 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][75 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][76 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][77 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][78 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][79 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][80 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][81 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][82 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][83 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][84 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][85 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][86 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][87 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13391(args[2][101 * steps + ((cycle - 0) & mask)]);
    assert(x13391 != Fp::invalid());
    if (x13391 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][85 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][86 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][87 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13392(args[2][102 * steps + ((cycle - 0) & mask)]);
    assert(x13392 != Fp::invalid());
    if (x13392 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13393(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x13393 != Fp::invalid());
      if (x13393 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][122 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][123 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][124 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][125 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][126 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][127 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][128 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13394(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x13394 != Fp::invalid());
      if (x13394 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13395(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x13395 != Fp::invalid());
      if (x13395 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13396(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x13396 != Fp::invalid());
      if (x13396 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13397(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x13397 != Fp::invalid());
      if (x13397 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13398(args[2][103 * steps + ((cycle - 0) & mask)]);
    assert(x13398 != Fp::invalid());
    if (x13398 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13399(args[2][104 * steps + ((cycle - 0) & mask)]);
    assert(x13399 != Fp::invalid());
    if (x13399 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13400(args[2][105 * steps + ((cycle - 0) & mask)]);
    assert(x13400 != Fp::invalid());
    if (x13400 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13401(args[2][106 * steps + ((cycle - 0) & mask)]);
    assert(x13401 != Fp::invalid());
    if (x13401 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13402(args[2][176 * steps + ((cycle - 0) & mask)]);
      assert(x13402 != Fp::invalid());
      if (x13402 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][122 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][123 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][124 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][125 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][126 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][127 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][128 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][129 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][130 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][131 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][132 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][133 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][134 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][135 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13403(args[2][177 * steps + ((cycle - 0) & mask)]);
      assert(x13403 != Fp::invalid());
      if (x13403 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13404(args[2][178 * steps + ((cycle - 0) & mask)]);
      assert(x13404 != Fp::invalid());
      if (x13404 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13405(args[2][179 * steps + ((cycle - 0) & mask)]);
      assert(x13405 != Fp::invalid());
      if (x13405 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      Fp x13406(args[2][180 * steps + ((cycle - 0) & mask)]);
      assert(x13406 != Fp::invalid());
      if (x13406 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][28 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][29 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][30 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][31 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][32 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][33 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][34 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][35 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][36 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][37 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][38 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][39 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][40 * steps + cycle] = x94;
          // loc("./cirgen/components/bytes.h":37:30)
          args[2][41 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":43:3)
          args[2][136 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":44:3)
          args[2][137 * steps + cycle] = x94;
          // loc("cirgen/components/ram.cpp":45:3)
          args[2][138 * steps + cycle] = x95;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][139 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][140 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][141 * steps + cycle] = x94;
          // loc("cirgen/components/u32.cpp":28:5)
          args[2][142 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][79 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][80 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][81 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][82 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][83 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][84 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][85 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][86 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][87 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][88 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][89 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][90 * steps + cycle] = x94;
          // loc("./cirgen/components/bits.h":30:46)
          args[2][91 * steps + cycle] = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13407(args[2][107 * steps + ((cycle - 0) & mask)]);
    assert(x13407 != Fp::invalid());
    if (x13407 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][29 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][30 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][31 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][32 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][33 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][34 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][35 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][36 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][37 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][38 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][39 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][40 * steps + cycle] = x94;
        // loc("./cirgen/components/bytes.h":37:30)
        args[2][41 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][80 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][81 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][82 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][83 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][84 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][85 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][86 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][87 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][88 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][89 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][90 * steps + cycle] = x94;
        // loc("./cirgen/components/bits.h":30:46)
        args[2][91 * steps + cycle] = x94;
      }
    }
  }
  if (x13319 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      args[2][13 * steps + cycle] = x94;
    }
  }
  if (x421 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13408(args[2][55 * steps + ((cycle - 0) & mask)]);
      assert(x13408 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13409(args[2][56 * steps + ((cycle - 0) & mask)]);
      assert(x13409 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13410(args[2][57 * steps + ((cycle - 0) & mask)]);
      assert(x13410 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13411(args[2][58 * steps + ((cycle - 0) & mask)]);
      assert(x13411 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13412(args[2][59 * steps + ((cycle - 0) & mask)]);
      assert(x13412 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13413(args[2][60 * steps + ((cycle - 0) & mask)]);
      assert(x13413 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13414(args[2][61 * steps + ((cycle - 0) & mask)]);
      assert(x13414 != Fp::invalid());
      host_args.at(0) = x13408;
      host_args.at(1) = x13409;
      host_args.at(2) = x13410;
      host_args.at(3) = x13411;
      host_args.at(4) = x13412;
      host_args.at(5) = x13413;
      host_args.at(6) = x13414;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13415(args[2][62 * steps + ((cycle - 0) & mask)]);
      assert(x13415 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13416(args[2][63 * steps + ((cycle - 0) & mask)]);
      assert(x13416 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13417(args[2][64 * steps + ((cycle - 0) & mask)]);
      assert(x13417 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13418(args[2][65 * steps + ((cycle - 0) & mask)]);
      assert(x13418 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13419(args[2][66 * steps + ((cycle - 0) & mask)]);
      assert(x13419 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13420(args[2][67 * steps + ((cycle - 0) & mask)]);
      assert(x13420 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13421(args[2][68 * steps + ((cycle - 0) & mask)]);
      assert(x13421 != Fp::invalid());
      host_args.at(0) = x13415;
      host_args.at(1) = x13416;
      host_args.at(2) = x13417;
      host_args.at(3) = x13418;
      host_args.at(4) = x13419;
      host_args.at(5) = x13420;
      host_args.at(6) = x13421;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13422(args[2][69 * steps + ((cycle - 0) & mask)]);
      assert(x13422 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13423(args[2][70 * steps + ((cycle - 0) & mask)]);
      assert(x13423 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13424(args[2][71 * steps + ((cycle - 0) & mask)]);
      assert(x13424 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13425(args[2][72 * steps + ((cycle - 0) & mask)]);
      assert(x13425 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13426(args[2][73 * steps + ((cycle - 0) & mask)]);
      assert(x13426 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13427(args[2][74 * steps + ((cycle - 0) & mask)]);
      assert(x13427 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13428(args[2][75 * steps + ((cycle - 0) & mask)]);
      assert(x13428 != Fp::invalid());
      host_args.at(0) = x13422;
      host_args.at(1) = x13423;
      host_args.at(2) = x13424;
      host_args.at(3) = x13425;
      host_args.at(4) = x13426;
      host_args.at(5) = x13427;
      host_args.at(6) = x13428;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x474 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13429(args[2][94 * steps + ((cycle - 0) & mask)]);
      assert(x13429 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13430(args[2][95 * steps + ((cycle - 0) & mask)]);
      assert(x13430 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13431(args[2][96 * steps + ((cycle - 0) & mask)]);
      assert(x13431 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13432(args[2][97 * steps + ((cycle - 0) & mask)]);
      assert(x13432 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13433(args[2][98 * steps + ((cycle - 0) & mask)]);
      assert(x13433 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13434(args[2][99 * steps + ((cycle - 0) & mask)]);
      assert(x13434 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13435(args[2][100 * steps + ((cycle - 0) & mask)]);
      assert(x13435 != Fp::invalid());
      host_args.at(0) = x13429;
      host_args.at(1) = x13430;
      host_args.at(2) = x13431;
      host_args.at(3) = x13432;
      host_args.at(4) = x13433;
      host_args.at(5) = x13434;
      host_args.at(6) = x13435;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13436(args[2][101 * steps + ((cycle - 0) & mask)]);
      assert(x13436 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13437(args[2][102 * steps + ((cycle - 0) & mask)]);
      assert(x13437 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13438(args[2][103 * steps + ((cycle - 0) & mask)]);
      assert(x13438 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13439(args[2][104 * steps + ((cycle - 0) & mask)]);
      assert(x13439 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13440(args[2][105 * steps + ((cycle - 0) & mask)]);
      assert(x13440 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13441(args[2][106 * steps + ((cycle - 0) & mask)]);
      assert(x13441 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13442(args[2][107 * steps + ((cycle - 0) & mask)]);
      assert(x13442 != Fp::invalid());
      host_args.at(0) = x13436;
      host_args.at(1) = x13437;
      host_args.at(2) = x13438;
      host_args.at(3) = x13439;
      host_args.at(4) = x13440;
      host_args.at(5) = x13441;
      host_args.at(6) = x13442;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13443(args[2][108 * steps + ((cycle - 0) & mask)]);
      assert(x13443 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13444(args[2][109 * steps + ((cycle - 0) & mask)]);
      assert(x13444 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13445(args[2][110 * steps + ((cycle - 0) & mask)]);
      assert(x13445 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13446(args[2][111 * steps + ((cycle - 0) & mask)]);
      assert(x13446 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13447(args[2][112 * steps + ((cycle - 0) & mask)]);
      assert(x13447 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13448(args[2][113 * steps + ((cycle - 0) & mask)]);
      assert(x13448 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13449(args[2][114 * steps + ((cycle - 0) & mask)]);
      assert(x13449 != Fp::invalid());
      host_args.at(0) = x13443;
      host_args.at(1) = x13444;
      host_args.at(2) = x13445;
      host_args.at(3) = x13446;
      host_args.at(4) = x13447;
      host_args.at(5) = x13448;
      host_args.at(6) = x13449;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13450(args[2][115 * steps + ((cycle - 0) & mask)]);
      assert(x13450 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13451(args[2][116 * steps + ((cycle - 0) & mask)]);
      assert(x13451 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13452(args[2][117 * steps + ((cycle - 0) & mask)]);
      assert(x13452 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13453(args[2][118 * steps + ((cycle - 0) & mask)]);
      assert(x13453 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13454(args[2][119 * steps + ((cycle - 0) & mask)]);
      assert(x13454 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13455(args[2][120 * steps + ((cycle - 0) & mask)]);
      assert(x13455 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13456(args[2][121 * steps + ((cycle - 0) & mask)]);
      assert(x13456 != Fp::invalid());
      host_args.at(0) = x13450;
      host_args.at(1) = x13451;
      host_args.at(2) = x13452;
      host_args.at(3) = x13453;
      host_args.at(4) = x13454;
      host_args.at(5) = x13455;
      host_args.at(6) = x13456;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13457(args[2][122 * steps + ((cycle - 0) & mask)]);
      assert(x13457 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13458(args[2][123 * steps + ((cycle - 0) & mask)]);
      assert(x13458 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13459(args[2][124 * steps + ((cycle - 0) & mask)]);
      assert(x13459 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13460(args[2][125 * steps + ((cycle - 0) & mask)]);
      assert(x13460 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13461(args[2][126 * steps + ((cycle - 0) & mask)]);
      assert(x13461 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13462(args[2][127 * steps + ((cycle - 0) & mask)]);
      assert(x13462 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13463(args[2][128 * steps + ((cycle - 0) & mask)]);
      assert(x13463 != Fp::invalid());
      host_args.at(0) = x13457;
      host_args.at(1) = x13458;
      host_args.at(2) = x13459;
      host_args.at(3) = x13460;
      host_args.at(4) = x13461;
      host_args.at(5) = x13462;
      host_args.at(6) = x13463;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13464(args[2][129 * steps + ((cycle - 0) & mask)]);
      assert(x13464 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13465(args[2][130 * steps + ((cycle - 0) & mask)]);
      assert(x13465 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13466(args[2][131 * steps + ((cycle - 0) & mask)]);
      assert(x13466 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13467(args[2][132 * steps + ((cycle - 0) & mask)]);
      assert(x13467 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13468(args[2][133 * steps + ((cycle - 0) & mask)]);
      assert(x13468 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13469(args[2][134 * steps + ((cycle - 0) & mask)]);
      assert(x13469 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13470(args[2][135 * steps + ((cycle - 0) & mask)]);
      assert(x13470 != Fp::invalid());
      host_args.at(0) = x13464;
      host_args.at(1) = x13465;
      host_args.at(2) = x13466;
      host_args.at(3) = x13467;
      host_args.at(4) = x13468;
      host_args.at(5) = x13469;
      host_args.at(6) = x13470;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13471(args[2][136 * steps + ((cycle - 0) & mask)]);
      assert(x13471 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13472(args[2][137 * steps + ((cycle - 0) & mask)]);
      assert(x13472 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13473(args[2][138 * steps + ((cycle - 0) & mask)]);
      assert(x13473 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13474(args[2][139 * steps + ((cycle - 0) & mask)]);
      assert(x13474 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13475(args[2][140 * steps + ((cycle - 0) & mask)]);
      assert(x13475 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13476(args[2][141 * steps + ((cycle - 0) & mask)]);
      assert(x13476 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13477(args[2][142 * steps + ((cycle - 0) & mask)]);
      assert(x13477 != Fp::invalid());
      host_args.at(0) = x13471;
      host_args.at(1) = x13472;
      host_args.at(2) = x13473;
      host_args.at(3) = x13474;
      host_args.at(4) = x13475;
      host_args.at(5) = x13476;
      host_args.at(6) = x13477;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13478(args[2][143 * steps + ((cycle - 0) & mask)]);
      assert(x13478 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13479(args[2][144 * steps + ((cycle - 0) & mask)]);
      assert(x13479 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13480(args[2][145 * steps + ((cycle - 0) & mask)]);
      assert(x13480 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13481(args[2][146 * steps + ((cycle - 0) & mask)]);
      assert(x13481 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13482(args[2][147 * steps + ((cycle - 0) & mask)]);
      assert(x13482 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13483(args[2][148 * steps + ((cycle - 0) & mask)]);
      assert(x13483 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      Fp x13484(args[2][149 * steps + ((cycle - 0) & mask)]);
      assert(x13484 != Fp::invalid());
      host_args.at(0) = x13478;
      host_args.at(1) = x13479;
      host_args.at(2) = x13480;
      host_args.at(3) = x13481;
      host_args.at(4) = x13482;
      host_args.at(5) = x13483;
      host_args.at(6) = x13484;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x582 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13485(args[2][94 * steps + ((cycle - 0) & mask)]);
    assert(x13485 != Fp::invalid());
    if (x13485 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13486(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13486 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13487(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13487 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13488(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13488 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13489(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13490(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13491(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13492(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13492 != Fp::invalid());
        host_args.at(0) = x13486;
        host_args.at(1) = x13487;
        host_args.at(2) = x13488;
        host_args.at(3) = x13489;
        host_args.at(4) = x13490;
        host_args.at(5) = x13491;
        host_args.at(6) = x13492;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13493(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13493 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13494(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13494 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13495(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13495 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13496(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13496 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13497(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13497 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13498(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13499(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13499 != Fp::invalid());
        host_args.at(0) = x13493;
        host_args.at(1) = x13494;
        host_args.at(2) = x13495;
        host_args.at(3) = x13496;
        host_args.at(4) = x13497;
        host_args.at(5) = x13498;
        host_args.at(6) = x13499;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13500(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13501(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13502(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13503(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13504(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13505(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13506(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13506 != Fp::invalid());
        host_args.at(0) = x13500;
        host_args.at(1) = x13501;
        host_args.at(2) = x13502;
        host_args.at(3) = x13503;
        host_args.at(4) = x13504;
        host_args.at(5) = x13505;
        host_args.at(6) = x13506;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13507(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13508(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13509(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13510(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13511(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13512(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13513(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13513 != Fp::invalid());
        host_args.at(0) = x13507;
        host_args.at(1) = x13508;
        host_args.at(2) = x13509;
        host_args.at(3) = x13510;
        host_args.at(4) = x13511;
        host_args.at(5) = x13512;
        host_args.at(6) = x13513;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13514(args[2][95 * steps + ((cycle - 0) & mask)]);
    assert(x13514 != Fp::invalid());
    if (x13514 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13515(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13515 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13516(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13517(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13517 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13518(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13518 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13519(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13520(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13521(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13521 != Fp::invalid());
        host_args.at(0) = x13515;
        host_args.at(1) = x13516;
        host_args.at(2) = x13517;
        host_args.at(3) = x13518;
        host_args.at(4) = x13519;
        host_args.at(5) = x13520;
        host_args.at(6) = x13521;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13522(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13523(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13524(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13524 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13525(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13525 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13526(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13526 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13527(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13527 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13528(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13528 != Fp::invalid());
        host_args.at(0) = x13522;
        host_args.at(1) = x13523;
        host_args.at(2) = x13524;
        host_args.at(3) = x13525;
        host_args.at(4) = x13526;
        host_args.at(5) = x13527;
        host_args.at(6) = x13528;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13529(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13530(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13531(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13532(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13532 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13533(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13533 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13534(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13534 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13535(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13535 != Fp::invalid());
        host_args.at(0) = x13529;
        host_args.at(1) = x13530;
        host_args.at(2) = x13531;
        host_args.at(3) = x13532;
        host_args.at(4) = x13533;
        host_args.at(5) = x13534;
        host_args.at(6) = x13535;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13536(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13537(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13538(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13539(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13540(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13541(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13542(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13542 != Fp::invalid());
        host_args.at(0) = x13536;
        host_args.at(1) = x13537;
        host_args.at(2) = x13538;
        host_args.at(3) = x13539;
        host_args.at(4) = x13540;
        host_args.at(5) = x13541;
        host_args.at(6) = x13542;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13543(args[2][96 * steps + ((cycle - 0) & mask)]);
    assert(x13543 != Fp::invalid());
    if (x13543 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13544(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13544 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13545(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13545 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13546(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13546 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13547(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13547 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13548(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13548 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13549(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13549 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13550(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13550 != Fp::invalid());
        host_args.at(0) = x13544;
        host_args.at(1) = x13545;
        host_args.at(2) = x13546;
        host_args.at(3) = x13547;
        host_args.at(4) = x13548;
        host_args.at(5) = x13549;
        host_args.at(6) = x13550;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13551(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13551 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13552(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13552 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13553(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13553 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13554(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13554 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13555(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13556(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13557(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13557 != Fp::invalid());
        host_args.at(0) = x13551;
        host_args.at(1) = x13552;
        host_args.at(2) = x13553;
        host_args.at(3) = x13554;
        host_args.at(4) = x13555;
        host_args.at(5) = x13556;
        host_args.at(6) = x13557;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13558(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13558 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13559(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13559 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13560(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13560 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13561(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13561 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13562(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13562 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13563(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13563 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13564(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13564 != Fp::invalid());
        host_args.at(0) = x13558;
        host_args.at(1) = x13559;
        host_args.at(2) = x13560;
        host_args.at(3) = x13561;
        host_args.at(4) = x13562;
        host_args.at(5) = x13563;
        host_args.at(6) = x13564;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13565(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13566(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13567(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13567 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13568(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13569(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13569 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13570(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13570 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13571(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13571 != Fp::invalid());
        host_args.at(0) = x13565;
        host_args.at(1) = x13566;
        host_args.at(2) = x13567;
        host_args.at(3) = x13568;
        host_args.at(4) = x13569;
        host_args.at(5) = x13570;
        host_args.at(6) = x13571;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13572(args[2][97 * steps + ((cycle - 0) & mask)]);
    assert(x13572 != Fp::invalid());
    if (x13572 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13573(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13574(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13574 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13575(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13576(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13576 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13577(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13578(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13579(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13579 != Fp::invalid());
        host_args.at(0) = x13573;
        host_args.at(1) = x13574;
        host_args.at(2) = x13575;
        host_args.at(3) = x13576;
        host_args.at(4) = x13577;
        host_args.at(5) = x13578;
        host_args.at(6) = x13579;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13580(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13581(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13582(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13583(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13583 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13584(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13584 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13585(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13586(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13586 != Fp::invalid());
        host_args.at(0) = x13580;
        host_args.at(1) = x13581;
        host_args.at(2) = x13582;
        host_args.at(3) = x13583;
        host_args.at(4) = x13584;
        host_args.at(5) = x13585;
        host_args.at(6) = x13586;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13587(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13588(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13588 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13589(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13590(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13591(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13592(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13592 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13593(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13593 != Fp::invalid());
        host_args.at(0) = x13587;
        host_args.at(1) = x13588;
        host_args.at(2) = x13589;
        host_args.at(3) = x13590;
        host_args.at(4) = x13591;
        host_args.at(5) = x13592;
        host_args.at(6) = x13593;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13594(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13594 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13595(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13596(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13597(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13598(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13599(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13600(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13600 != Fp::invalid());
        host_args.at(0) = x13594;
        host_args.at(1) = x13595;
        host_args.at(2) = x13596;
        host_args.at(3) = x13597;
        host_args.at(4) = x13598;
        host_args.at(5) = x13599;
        host_args.at(6) = x13600;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13601(args[2][136 * steps + ((cycle - 0) & mask)]);
        assert(x13601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13602(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x13602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13603(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x13603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13604(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13605(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13606(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x13606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13607(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x13607 != Fp::invalid());
        host_args.at(0) = x13601;
        host_args.at(1) = x13602;
        host_args.at(2) = x13603;
        host_args.at(3) = x13604;
        host_args.at(4) = x13605;
        host_args.at(5) = x13606;
        host_args.at(6) = x13607;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13608(args[2][98 * steps + ((cycle - 0) & mask)]);
    assert(x13608 != Fp::invalid());
    if (x13608 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13609(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13610(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13611(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13612(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13613(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13613 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13614(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13615(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13615 != Fp::invalid());
        host_args.at(0) = x13609;
        host_args.at(1) = x13610;
        host_args.at(2) = x13611;
        host_args.at(3) = x13612;
        host_args.at(4) = x13613;
        host_args.at(5) = x13614;
        host_args.at(6) = x13615;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13616(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13617(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13618(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13619(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13620(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13621(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13622(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13622 != Fp::invalid());
        host_args.at(0) = x13616;
        host_args.at(1) = x13617;
        host_args.at(2) = x13618;
        host_args.at(3) = x13619;
        host_args.at(4) = x13620;
        host_args.at(5) = x13621;
        host_args.at(6) = x13622;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13623(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13624(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13625(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13626(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13627(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13628(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13629(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13629 != Fp::invalid());
        host_args.at(0) = x13623;
        host_args.at(1) = x13624;
        host_args.at(2) = x13625;
        host_args.at(3) = x13626;
        host_args.at(4) = x13627;
        host_args.at(5) = x13628;
        host_args.at(6) = x13629;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13630(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13631(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13632(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13633(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13634(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13635(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13636(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13636 != Fp::invalid());
        host_args.at(0) = x13630;
        host_args.at(1) = x13631;
        host_args.at(2) = x13632;
        host_args.at(3) = x13633;
        host_args.at(4) = x13634;
        host_args.at(5) = x13635;
        host_args.at(6) = x13636;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13637(args[2][136 * steps + ((cycle - 0) & mask)]);
        assert(x13637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13638(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x13638 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13639(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x13639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13640(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13641(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13642(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x13642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13643(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x13643 != Fp::invalid());
        host_args.at(0) = x13637;
        host_args.at(1) = x13638;
        host_args.at(2) = x13639;
        host_args.at(3) = x13640;
        host_args.at(4) = x13641;
        host_args.at(5) = x13642;
        host_args.at(6) = x13643;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13644(args[2][99 * steps + ((cycle - 0) & mask)]);
    assert(x13644 != Fp::invalid());
    if (x13644 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13645(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13645 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13646(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13647(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13648(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13649(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13650(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13650 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13651(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13651 != Fp::invalid());
        host_args.at(0) = x13645;
        host_args.at(1) = x13646;
        host_args.at(2) = x13647;
        host_args.at(3) = x13648;
        host_args.at(4) = x13649;
        host_args.at(5) = x13650;
        host_args.at(6) = x13651;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13652(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13653(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13654(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13654 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13655(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13655 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13656(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13656 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13657(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13657 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13658(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13658 != Fp::invalid());
        host_args.at(0) = x13652;
        host_args.at(1) = x13653;
        host_args.at(2) = x13654;
        host_args.at(3) = x13655;
        host_args.at(4) = x13656;
        host_args.at(5) = x13657;
        host_args.at(6) = x13658;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13659(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13659 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13660(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13660 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13661(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13661 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13662(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13662 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13663(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13663 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13664(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13664 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13665(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13665 != Fp::invalid());
        host_args.at(0) = x13659;
        host_args.at(1) = x13660;
        host_args.at(2) = x13661;
        host_args.at(3) = x13662;
        host_args.at(4) = x13663;
        host_args.at(5) = x13664;
        host_args.at(6) = x13665;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13666(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13666 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13667(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13667 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13668(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13668 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13669(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13669 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13670(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13670 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13671(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13671 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13672(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13672 != Fp::invalid());
        host_args.at(0) = x13666;
        host_args.at(1) = x13667;
        host_args.at(2) = x13668;
        host_args.at(3) = x13669;
        host_args.at(4) = x13670;
        host_args.at(5) = x13671;
        host_args.at(6) = x13672;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13673(args[2][102 * steps + ((cycle - 0) & mask)]);
    assert(x13673 != Fp::invalid());
    if (x13673 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13674(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13674 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13675(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13676(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13676 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13677(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13678(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13678 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13679(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13679 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13680(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13680 != Fp::invalid());
        host_args.at(0) = x13674;
        host_args.at(1) = x13675;
        host_args.at(2) = x13676;
        host_args.at(3) = x13677;
        host_args.at(4) = x13678;
        host_args.at(5) = x13679;
        host_args.at(6) = x13680;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13681(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13681 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13682(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13682 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13683(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13683 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13684(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13684 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13685(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13685 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13686(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13686 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13687(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13687 != Fp::invalid());
        host_args.at(0) = x13681;
        host_args.at(1) = x13682;
        host_args.at(2) = x13683;
        host_args.at(3) = x13684;
        host_args.at(4) = x13685;
        host_args.at(5) = x13686;
        host_args.at(6) = x13687;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13688(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13688 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13689(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13690(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13690 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13691(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13692(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13692 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13693(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13693 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13694(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13694 != Fp::invalid());
        host_args.at(0) = x13688;
        host_args.at(1) = x13689;
        host_args.at(2) = x13690;
        host_args.at(3) = x13691;
        host_args.at(4) = x13692;
        host_args.at(5) = x13693;
        host_args.at(6) = x13694;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13695(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13696(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13697(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13698(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13699(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13700(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13700 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13701(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13701 != Fp::invalid());
        host_args.at(0) = x13695;
        host_args.at(1) = x13696;
        host_args.at(2) = x13697;
        host_args.at(3) = x13698;
        host_args.at(4) = x13699;
        host_args.at(5) = x13700;
        host_args.at(6) = x13701;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13702(args[2][136 * steps + ((cycle - 0) & mask)]);
        assert(x13702 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13703(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x13703 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13704(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x13704 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13705(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13705 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13706(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13706 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13707(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x13707 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13708(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x13708 != Fp::invalid());
        host_args.at(0) = x13702;
        host_args.at(1) = x13703;
        host_args.at(2) = x13704;
        host_args.at(3) = x13705;
        host_args.at(4) = x13706;
        host_args.at(5) = x13707;
        host_args.at(6) = x13708;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13709(args[2][103 * steps + ((cycle - 0) & mask)]);
    assert(x13709 != Fp::invalid());
    if (x13709 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13710(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13710 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13711(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13712(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13713(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13714(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13715(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13716(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13716 != Fp::invalid());
        host_args.at(0) = x13710;
        host_args.at(1) = x13711;
        host_args.at(2) = x13712;
        host_args.at(3) = x13713;
        host_args.at(4) = x13714;
        host_args.at(5) = x13715;
        host_args.at(6) = x13716;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13717(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13718(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13719(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13719 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13720(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13720 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13721(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13721 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13722(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13723(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13723 != Fp::invalid());
        host_args.at(0) = x13717;
        host_args.at(1) = x13718;
        host_args.at(2) = x13719;
        host_args.at(3) = x13720;
        host_args.at(4) = x13721;
        host_args.at(5) = x13722;
        host_args.at(6) = x13723;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13724(args[2][104 * steps + ((cycle - 0) & mask)]);
    assert(x13724 != Fp::invalid());
    if (x13724 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13725(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13725 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13726(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13726 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13727(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13727 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13728(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13728 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13729(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13730(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13730 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13731(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13731 != Fp::invalid());
        host_args.at(0) = x13725;
        host_args.at(1) = x13726;
        host_args.at(2) = x13727;
        host_args.at(3) = x13728;
        host_args.at(4) = x13729;
        host_args.at(5) = x13730;
        host_args.at(6) = x13731;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13732(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13732 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13733(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13734(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13734 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13735(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13735 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13736(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13736 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13737(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13737 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13738(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13738 != Fp::invalid());
        host_args.at(0) = x13732;
        host_args.at(1) = x13733;
        host_args.at(2) = x13734;
        host_args.at(3) = x13735;
        host_args.at(4) = x13736;
        host_args.at(5) = x13737;
        host_args.at(6) = x13738;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13739(args[2][105 * steps + ((cycle - 0) & mask)]);
    assert(x13739 != Fp::invalid());
    if (x13739 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13740(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13740 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13741(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13741 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13742(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13742 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13743(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13743 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13744(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13744 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13745(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13745 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13746(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13746 != Fp::invalid());
        host_args.at(0) = x13740;
        host_args.at(1) = x13741;
        host_args.at(2) = x13742;
        host_args.at(3) = x13743;
        host_args.at(4) = x13744;
        host_args.at(5) = x13745;
        host_args.at(6) = x13746;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13747(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13747 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13748(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13748 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13749(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13749 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13750(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13750 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13751(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13751 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13752(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13752 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13753(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13753 != Fp::invalid());
        host_args.at(0) = x13747;
        host_args.at(1) = x13748;
        host_args.at(2) = x13749;
        host_args.at(3) = x13750;
        host_args.at(4) = x13751;
        host_args.at(5) = x13752;
        host_args.at(6) = x13753;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13754(args[2][106 * steps + ((cycle - 0) & mask)]);
    assert(x13754 != Fp::invalid());
    if (x13754 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13755(args[2][108 * steps + ((cycle - 0) & mask)]);
        assert(x13755 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13756(args[2][109 * steps + ((cycle - 0) & mask)]);
        assert(x13756 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13757(args[2][110 * steps + ((cycle - 0) & mask)]);
        assert(x13757 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13758(args[2][111 * steps + ((cycle - 0) & mask)]);
        assert(x13758 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13759(args[2][112 * steps + ((cycle - 0) & mask)]);
        assert(x13759 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13760(args[2][113 * steps + ((cycle - 0) & mask)]);
        assert(x13760 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13761(args[2][114 * steps + ((cycle - 0) & mask)]);
        assert(x13761 != Fp::invalid());
        host_args.at(0) = x13755;
        host_args.at(1) = x13756;
        host_args.at(2) = x13757;
        host_args.at(3) = x13758;
        host_args.at(4) = x13759;
        host_args.at(5) = x13760;
        host_args.at(6) = x13761;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13762(args[2][115 * steps + ((cycle - 0) & mask)]);
        assert(x13762 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13763(args[2][116 * steps + ((cycle - 0) & mask)]);
        assert(x13763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13764(args[2][117 * steps + ((cycle - 0) & mask)]);
        assert(x13764 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13765(args[2][118 * steps + ((cycle - 0) & mask)]);
        assert(x13765 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13766(args[2][119 * steps + ((cycle - 0) & mask)]);
        assert(x13766 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13767(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13767 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13768(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13768 != Fp::invalid());
        host_args.at(0) = x13762;
        host_args.at(1) = x13763;
        host_args.at(2) = x13764;
        host_args.at(3) = x13765;
        host_args.at(4) = x13766;
        host_args.at(5) = x13767;
        host_args.at(6) = x13768;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13769(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13769 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13770(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13771(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13771 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13772(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13772 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13773(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13773 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13774(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13774 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13775(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13775 != Fp::invalid());
        host_args.at(0) = x13769;
        host_args.at(1) = x13770;
        host_args.at(2) = x13771;
        host_args.at(3) = x13772;
        host_args.at(4) = x13773;
        host_args.at(5) = x13774;
        host_args.at(6) = x13775;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13776(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13776 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13777(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13777 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13778(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13778 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13779(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13779 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13780(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13780 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13781(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13781 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13782(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13782 != Fp::invalid());
        host_args.at(0) = x13776;
        host_args.at(1) = x13777;
        host_args.at(2) = x13778;
        host_args.at(3) = x13779;
        host_args.at(4) = x13780;
        host_args.at(5) = x13781;
        host_args.at(6) = x13782;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13783(args[2][136 * steps + ((cycle - 0) & mask)]);
        assert(x13783 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13784(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x13784 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13785(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x13785 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13786(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13786 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13787(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13787 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13788(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x13788 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13789(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x13789 != Fp::invalid());
        host_args.at(0) = x13783;
        host_args.at(1) = x13784;
        host_args.at(2) = x13785;
        host_args.at(3) = x13786;
        host_args.at(4) = x13787;
        host_args.at(5) = x13788;
        host_args.at(6) = x13789;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    Fp x13790(args[2][107 * steps + ((cycle - 0) & mask)]);
    assert(x13790 != Fp::invalid());
    if (x13790 != 0) {
      {
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13791(args[2][120 * steps + ((cycle - 0) & mask)]);
        assert(x13791 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13792(args[2][121 * steps + ((cycle - 0) & mask)]);
        assert(x13792 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13793(args[2][122 * steps + ((cycle - 0) & mask)]);
        assert(x13793 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13794(args[2][123 * steps + ((cycle - 0) & mask)]);
        assert(x13794 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13795(args[2][124 * steps + ((cycle - 0) & mask)]);
        assert(x13795 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13796(args[2][125 * steps + ((cycle - 0) & mask)]);
        assert(x13796 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13797(args[2][126 * steps + ((cycle - 0) & mask)]);
        assert(x13797 != Fp::invalid());
        host_args.at(0) = x13791;
        host_args.at(1) = x13792;
        host_args.at(2) = x13793;
        host_args.at(3) = x13794;
        host_args.at(4) = x13795;
        host_args.at(5) = x13796;
        host_args.at(6) = x13797;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13798(args[2][127 * steps + ((cycle - 0) & mask)]);
        assert(x13798 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13799(args[2][128 * steps + ((cycle - 0) & mask)]);
        assert(x13799 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13800(args[2][129 * steps + ((cycle - 0) & mask)]);
        assert(x13800 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13801(args[2][130 * steps + ((cycle - 0) & mask)]);
        assert(x13801 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13802(args[2][131 * steps + ((cycle - 0) & mask)]);
        assert(x13802 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13803(args[2][132 * steps + ((cycle - 0) & mask)]);
        assert(x13803 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13804(args[2][133 * steps + ((cycle - 0) & mask)]);
        assert(x13804 != Fp::invalid());
        host_args.at(0) = x13798;
        host_args.at(1) = x13799;
        host_args.at(2) = x13800;
        host_args.at(3) = x13801;
        host_args.at(4) = x13802;
        host_args.at(5) = x13803;
        host_args.at(6) = x13804;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13805(args[2][134 * steps + ((cycle - 0) & mask)]);
        assert(x13805 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13806(args[2][135 * steps + ((cycle - 0) & mask)]);
        assert(x13806 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13807(args[2][136 * steps + ((cycle - 0) & mask)]);
        assert(x13807 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13808(args[2][137 * steps + ((cycle - 0) & mask)]);
        assert(x13808 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13809(args[2][138 * steps + ((cycle - 0) & mask)]);
        assert(x13809 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13810(args[2][139 * steps + ((cycle - 0) & mask)]);
        assert(x13810 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13811(args[2][140 * steps + ((cycle - 0) & mask)]);
        assert(x13811 != Fp::invalid());
        host_args.at(0) = x13805;
        host_args.at(1) = x13806;
        host_args.at(2) = x13807;
        host_args.at(3) = x13808;
        host_args.at(4) = x13809;
        host_args.at(5) = x13810;
        host_args.at(6) = x13811;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13812(args[2][141 * steps + ((cycle - 0) & mask)]);
        assert(x13812 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13813(args[2][142 * steps + ((cycle - 0) & mask)]);
        assert(x13813 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13814(args[2][143 * steps + ((cycle - 0) & mask)]);
        assert(x13814 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13815(args[2][144 * steps + ((cycle - 0) & mask)]);
        assert(x13815 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13816(args[2][145 * steps + ((cycle - 0) & mask)]);
        assert(x13816 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13817(args[2][146 * steps + ((cycle - 0) & mask)]);
        assert(x13817 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        Fp x13818(args[2][147 * steps + ((cycle - 0) & mask)]);
        assert(x13818 != Fp::invalid());
        host_args.at(0) = x13812;
        host_args.at(1) = x13813;
        host_args.at(2) = x13814;
        host_args.at(3) = x13815;
        host_args.at(4) = x13816;
        host_args.at(5) = x13817;
        host_args.at(6) = x13818;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13383;
}

} // namespace risc0::circuit::rv32im
// clang-format on
